{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.587519,
        "productions": [
            {
                "expression": "logo_epsA",
                "logProbability": -0.367069
            },
            {
                "expression": "logo_UA",
                "logProbability": -0.415735
            },
            {
                "expression": "logo_DIVA",
                "logProbability": -0.451565
            },
            {
                "expression": "logo_epsL",
                "logProbability": -0.493431
            },
            {
                "expression": "logo_UL",
                "logProbability": -0.518363
            },
            {
                "expression": "logo_MULA",
                "logProbability": -0.589242
            },
            {
                "expression": "logo_ZA",
                "logProbability": -0.59813
            },
            {
                "expression": "4",
                "logProbability": -0.6046
            },
            {
                "expression": "logo_ZL",
                "logProbability": -0.607848
            },
            {
                "expression": "logo_SUBA",
                "logProbability": -0.646624
            },
            {
                "expression": "logo_ADDA",
                "logProbability": -0.647162
            },
            {
                "expression": "logo_MULL",
                "logProbability": -0.648185
            },
            {
                "expression": "7",
                "logProbability": -0.652331
            },
            {
                "expression": "5",
                "logProbability": -0.673316
            },
            {
                "expression": "3",
                "logProbability": -0.676153
            },
            {
                "expression": "2",
                "logProbability": -0.688131
            },
            {
                "expression": "logo_DIVL",
                "logProbability": -0.70831
            },
            {
                "expression": "6",
                "logProbability": -0.722189
            },
            {
                "expression": "8",
                "logProbability": -0.745901
            },
            {
                "expression": "9",
                "logProbability": -0.803035
            },
            {
                "expression": "logo_IFTY",
                "logProbability": -0.831781
            },
            {
                "expression": "0",
                "logProbability": -0.842281
            },
            {
                "expression": "1",
                "logProbability": -0.842281
            },
            {
                "expression": "logo_FWRT",
                "logProbability": -1.198813
            },
            {
                "expression": "logo_forLoop",
                "logProbability": -1.203546
            },
            {
                "expression": "logo_GETSET",
                "logProbability": -1.35386
            },
            {
                "expression": "logo_PT",
                "logProbability": -1.354069
            },
            {
                "expression": "#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY)",
                "logProbability": -1.139157
            },
            {
                "expression": "#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0)))))",
                "logProbability": -1.233178
            },
            {
                "expression": "#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2)))",
                "logProbability": -1.234666
            },
            {
                "expression": "#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0)))))))",
                "logProbability": -1.252588
            },
            {
                "expression": "#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4)))",
                "logProbability": -1.262163
            },
            {
                "expression": "#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0)))))",
                "logProbability": -1.292016
            },
            {
                "expression": "#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA)))",
                "logProbability": -1.292041
            },
            {
                "expression": "#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0)))))",
                "logProbability": -1.322788
            },
            {
                "expression": "#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)))",
                "logProbability": -1.32279
            }
        ],
        "continuationType": {
            "constructor": "turtle",
            "arguments": []
        }
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "3-gon 1l slanted 8",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 5 logo_ZL logo_epsA (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 5 logo_ZL logo_epsA (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 4 logo_UL (logo_DIVA logo_UA 3) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "4-gon (*d 1d 3)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 3 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 3 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "5-gon 1l",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_MULA logo_epsA 8) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "6-gon (*d 1d 2) slanted 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 8 logo_ZL logo_epsA (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 2) (logo_DIVA logo_UA 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 6 logo_ZL (logo_DIVA logo_UA 5) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 2) (logo_DIVA logo_UA 6) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "7-gon 1l",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 logo_UL (logo_DIVA logo_UA 7) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "8-gon (/d 1d 2)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_UL 2) (logo_DIVA logo_UA 8) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_UL 2) (logo_MULA logo_epsA 5) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "upwards",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "right angle",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 2 (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 2 (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_UA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "right angle epsilon",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 2 logo_epsL (logo_DIVA logo_UA 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 2 logo_epsL (logo_DIVA logo_UA 4) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "line segment",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_UA $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "square slanted by 2pi/3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_epsL (logo_DIVA logo_UA 3) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_ZL (logo_DIVA logo_epsA 6) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "semicircle slanted by 2pi/5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 logo_ZL logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_MULA logo_epsA 7) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Greek spiral slanted by 2pi/6",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_ZL (logo_DIVA logo_epsA 3) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 7 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slanted line",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 5 logo_ZL logo_epsA (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_ZL (logo_DIVA logo_epsA 4) (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 3 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Greek spiral 7",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 7 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Greek spiral 8",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 8 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 8 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "smooth spiral 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 3 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "smooth spiral 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_DIVA logo_UA 8) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "smooth spiral 4 slanted by 2pi/2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_ZL logo_epsA (#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0))))) 4 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "star 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_DIVA (logo_ADDA logo_UA logo_UA) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_MULA (logo_ADDA logo_epsA logo_epsA) 8) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "star 9",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_MULA (logo_DIVA logo_UA 9) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_UL 4) (logo_DIVA (logo_MULA logo_UA 4) 9) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "leaf iteration 1.1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "leaf iteration 1.2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_ZL logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "leaf iteration 2.1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 0 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "leaf iteration 2.2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 0 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "flower 4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "staircase 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 0 $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL $0)))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "blocks zigzag 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0))) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 3 logo_UL (logo_DIVA logo_UA 4) (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "left semicircle of size 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 5 logo_ZL logo_epsA (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle of size 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "right semicircle of size 2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 2 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "left semicircle of size 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 3) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY (logo_MULL logo_epsL 3) logo_epsA $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle of size 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "right semicircle of size 4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 4 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle of size 4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_DIVL logo_UL 5) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "left semicircle of size 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 5) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_UL 4) logo_epsA $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle of size 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_DIVL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "right semicircle of size 6",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 6 (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle of size 6",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 6 (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 6 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "5 enclosed circles",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0)) $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "3-circle flower l=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "3-semicircle sequence L=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY logo_epsL logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "1-semicircle sequence L=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL 3) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY (logo_MULL logo_epsL 3) logo_epsA (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA))) 3 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "row of 2 circles",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "row of 2 lines",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "line next to semicircle",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "3 dashed lines of size (/d 1d 2)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_epsL 2) logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_DIVL logo_epsL 2) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "broken circle",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle next to semicircle",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY logo_epsL logo_epsA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle next to line",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "line next to circle",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)) (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_UA (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_GETSET (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0))))) logo_epsL $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "row of 4 dashes",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 2 $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "row of 5 semicircles",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (logo_GETSET (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0)) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "3-Greek snowflake",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0))))) 3 $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "6-close semicircle snowflake",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "7-empty snowflake",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) (logo_GETSET (lambda (logo_FWRT logo_UL logo_epsA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_FWRT logo_UL logo_epsA $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 7) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "4-row of squares",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA 4) (#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "square of size 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "square of size 2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 2 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 2 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "square of size 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 3 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 3 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "5-concentric squares",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $3 $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $3 $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 2,
        "num_learned": 7,
        "new_grammar": {
            "logVariable": -0.750519,
            "productions": [
                {
                    "expression": "logo_UA",
                    "logProbability": -0.332199
                },
                {
                    "expression": "logo_epsL",
                    "logProbability": -0.366807
                },
                {
                    "expression": "logo_DIVA",
                    "logProbability": -0.418702
                },
                {
                    "expression": "logo_epsA",
                    "logProbability": -0.443585
                },
                {
                    "expression": "logo_MULA",
                    "logProbability": -0.530984
                },
                {
                    "expression": "logo_ZA",
                    "logProbability": -0.57013
                },
                {
                    "expression": "logo_MULL",
                    "logProbability": -0.585737
                },
                {
                    "expression": "logo_ADDA",
                    "logProbability": -0.591213
                },
                {
                    "expression": "logo_SUBA",
                    "logProbability": -0.605792
                },
                {
                    "expression": "logo_UL",
                    "logProbability": -0.648581
                },
                {
                    "expression": "logo_DIVL",
                    "logProbability": -0.767358
                },
                {
                    "expression": "logo_ZL",
                    "logProbability": -0.806556
                },
                {
                    "expression": "3",
                    "logProbability": -0.842963
                },
                {
                    "expression": "4",
                    "logProbability": -0.887666
                },
                {
                    "expression": "5",
                    "logProbability": -0.95362
                },
                {
                    "expression": "2",
                    "logProbability": -0.980902
                },
                {
                    "expression": "7",
                    "logProbability": -1.051492
                },
                {
                    "expression": "6",
                    "logProbability": -1.14122
                },
                {
                    "expression": "0",
                    "logProbability": -1.196062
                },
                {
                    "expression": "8",
                    "logProbability": -1.201895
                },
                {
                    "expression": "1",
                    "logProbability": -1.23543
                },
                {
                    "expression": "9",
                    "logProbability": -1.254321
                },
                {
                    "expression": "logo_IFTY",
                    "logProbability": -1.255078
                },
                {
                    "expression": "logo_forLoop",
                    "logProbability": -1.730893
                },
                {
                    "expression": "logo_GETSET",
                    "logProbability": -1.914001
                },
                {
                    "expression": "logo_FWRT",
                    "logProbability": -1.916264
                },
                {
                    "expression": "logo_PT",
                    "logProbability": -2.018867
                },
                {
                    "expression": "#(logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)))",
                    "logProbability": -1.656443
                },
                {
                    "expression": "#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) 7 $2 logo_epsA $0)))))",
                    "logProbability": -1.71035
                },
                {
                    "expression": "#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY)",
                    "logProbability": -1.711462
                },
                {
                    "expression": "#(#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_epsL logo_epsA)",
                    "logProbability": -1.733486
                },
                {
                    "expression": "#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) (logo_MULL logo_epsL $0) (logo_SUBA logo_ZA logo_epsA)))",
                    "logProbability": -1.745716
                },
                {
                    "expression": "#(lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) 1 $0))",
                    "logProbability": -1.794479
                },
                {
                    "expression": "#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $1 $0)))))",
                    "logProbability": -1.809969
                },
                {
                    "expression": "#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) logo_UL (logo_DIVA logo_UA $0)))",
                    "logProbability": -1.827878
                },
                {
                    "expression": "#(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) $0 logo_ZL logo_epsA))",
                    "logProbability": -1.840665
                },
                {
                    "expression": "#(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4))) $2 $0)))))",
                    "logProbability": -1.876472
                },
                {
                    "expression": "#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_GETSET $2 (logo_FWRT logo_ZL (logo_DIVA logo_UA $4) $0))))))))",
                    "logProbability": -1.893735
                },
                {
                    "expression": "#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0)))))",
                    "logProbability": -1.923588
                },
                {
                    "expression": "#(lambda (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_ZL (#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2))) logo_epsL $0))))",
                    "logProbability": -1.92359
                },
                {
                    "expression": "#(lambda (#(#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0))))))) logo_IFTY) $0 (logo_DIVA logo_epsA 2)))",
                    "logProbability": -1.947042
                },
                {
                    "expression": "#(lambda (logo_FWRT (logo_MULL logo_UL $0) (logo_DIVA logo_UA 4)))",
                    "logProbability": -1.953972
                },
                {
                    "expression": "#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $3 $2 $0)))))))",
                    "logProbability": -1.973656
                }
            ],
            "continuationType": {
                "constructor": "turtle",
                "arguments": []
            }
        }
    }
}