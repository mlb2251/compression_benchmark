{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T22.01.57/bench006_it8.json --max-arity=3 --threads=1 --iterations=3 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T22.01.57/out/stitch/2022-10-04_19-35-51/raw/bench006_it8.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T22.01.57/bench006_it8.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T22.01.57/out/stitch/2022-10-04_19-35-51/raw/bench006_it8.json",
    "iterations": 3,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 77453,
  "original": [
    "(lam (prev_dc_inv_4 LPAREN ',' $0))",
    "(lam (prev_dc_inv_4 LPAREN ',' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_4 RPAREN '.' $0))",
    "(lam (prev_dc_inv_4 RPAREN '.' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_4 '.' ',' $0))",
    "(lam (map (lam $0) (prev_dc_inv_4 '.' ',' $0)))",
    "(lam (prev_dc_inv_4 RPAREN LPAREN $0))",
    "(lam (prev_dc_inv_4 RPAREN LPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_4 SPACE '-' $0))",
    "(lam (map (lam (if (char-eq? '-' $0) SPACE $0)) $0))",
    "(lam (prev_dc_inv_11 $0 '.'))",
    "(lam (fold (prev_dc_inv_7 (prev_dc_inv_9 $0) '.') $0 (lam (lam (cdr $0)))))",
    "(lam (prev_dc_inv_7 $0 '.'))",
    "(lam (prev_dc_inv_7 $0 (fold (cdr $0) RPAREN (lam (lam '.')))))",
    "(lam (prev_dc_inv_7 $0 ','))",
    "(lam (prev_dc_inv_3 (fold (cdr $0) 1 (lam (lam (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
    "(lam (prev_dc_inv_11 $0 SPACE))",
    "(lam (prev_dc_inv_11 (cdr $0) SPACE))",
    "(lam (prev_dc_inv_7 $0 SPACE))",
    "(lam (prev_dc_inv_7 $0 (if (char-eq? (car $0) ',') RPAREN SPACE)))",
    "(lam (fold $0 $0 (lam (lam (if (char-eq? $1 SPACE) (prev_dc_inv_11 $0 $1) $0)))))",
    "(lam (fold (cdr $0) $0 (lam (lam (if (char-eq? $1 SPACE) (prev_dc_inv_11 $0 $1) $0)))))",
    "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
    "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
    "(lam (prev_dc_inv_7 $0 RPAREN))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) RPAREN))",
    "(lam (prev_dc_inv_11 $0 '-'))",
    "(lam (prev_dc_inv_11 (cdr $0) '-'))",
    "(lam (prev_dc_inv_7 $0 '-'))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) '-'))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_11 (prev_dc_inv_10 SPACE $0 '-' $0) '-') '-'))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_10 SPACE $0 '-' (prev_dc_inv_11 $0 '-')) '-'))",
    "(lam (lam (prev_dc_inv_5 (cons LPAREN $0) $1)))",
    "(lam (lam (prev_dc_inv_5 (prev_dc_inv_7 (prev_dc_inv_9 $0) RPAREN) $1)))",
    "(lam (lam (prev_dc_inv_10 SPACE $0 '.' $1)))",
    "(lam (lam (prev_dc_inv_10 SPACE (prev_dc_inv_4 '.' SPACE $0) '.' $1)))",
    "(lam (lam (prev_dc_inv_10 ',' $0 LPAREN $1)))",
    "(lam (lam (prev_dc_inv_10 ',' (prev_dc_inv_4 LPAREN '.' $0) LPAREN $1)))",
    "(lam (lam (prev_dc_inv_10 '.' $0 '.' $1)))",
    "(lam (lam (map (lam $0) (prev_dc_inv_10 '.' $0 '.' $1))))",
    "(lam (lam (prev_dc_inv_10 '-' $0 '.' $1)))",
    "(lam (lam (map (lam $0) (prev_dc_inv_10 '-' $0 '.' $1))))",
    "(lam (lam (prev_dc_inv_10 '-' $0 SPACE $1)))",
    "(lam (lam (prev_dc_inv_10 '-' (prev_dc_inv_4 '-' SPACE $0) SPACE $1)))",
    "(lam (prev_dc_inv_3 (- (length $0) 1) $0))",
    "(lam (prev_dc_inv_3 (length (cdr $0)) $0))",
    "(lam (prev_dc_inv_3 (- (- (length (cdr $0)) 1) 1) $0))",
    "(lam (prev_dc_inv_3 (- (length $0) (+ 1 (+ 1 1))) $0))",
    "(lam (prev_dc_inv_3 (+ 1 (+ 1 1)) $0))",
    "(lam (prev_dc_inv_3 (+ (length (prev_dc_inv_9 empty)) 1) $0))",
    "(lam (prev_dc_inv_3 (length (prev_dc_inv_2 (cdr $0))) $0))",
    "(lam (prev_dc_inv_3 (length (cdr (cdr (cdr (cdr (cdr $0)))))) $0))",
    "(lam (prev_dc_inv_3 (index 1 (prev_dc_inv_2 $0)) $0))",
    "(lam (prev_dc_inv_3 (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
    "(lam (prev_dc_inv_11 (prev_dc_inv_7 $0 '.') ','))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 ',') '.'))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 LPAREN) LPAREN))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_11 (cdr $0) LPAREN) LPAREN))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 ',') ','))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0 (prev_dc_inv_11 $0 ',')) ','))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 RPAREN) '-'))",
    "(lam (prev_dc_inv_11 (prev_dc_inv_7 $0 '-') RPAREN))",
    "(lam (prev_dc_inv_0 $0 ','))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_3 1 $0) ','))",
    "(lam (prev_dc_inv_0 $0 LPAREN))",
    "(lam (cons (car $0) (map (lam LPAREN) (range 1))))",
    "(lam (prev_dc_inv_0 $0 '-'))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_3 1 $0) '-'))",
    "(lam (lam (prev_dc_inv_8 $0 $1)))",
    "(lam (lam (prev_dc_inv_5 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 $1 '.'))))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_11 $0 '.') $0))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_11 (prev_dc_inv_9 $0) '.') $0))",
    "(lam (lam (prev_dc_inv_8 $0 $1)))",
    "(lam (lam (prev_dc_inv_8 $0 (prev_dc_inv_3 1 $1))))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_11 $0 ',') $0))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_11 (prev_dc_inv_9 $0) ',') $0))",
    "(lam (lam (prev_dc_inv_8 $0 $1)))",
    "(lam (lam (prev_dc_inv_8 $0 (prev_dc_inv_3 1 $1))))",
    "(lam (lam (prev_dc_inv_8 $0 $1)))",
    "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
    "(lam (prev_dc_inv_8 (cons (index (length (prev_dc_inv_7 (cons '.' $0) RPAREN)) $0) $0) $0))",
    "(lam (prev_dc_inv_8 (cons (index (length (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) RPAREN)) (cdr $0)) $0) $0))",
    "(lam (lam (prev_dc_inv_5 $0 $1)))",
    "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_5 $0 $1)))",
    "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_5 $0 $1)))",
    "(lam (lam (prev_dc_inv_5 (map (lam $0) $0) $1)))",
    "(lam (lam (prev_dc_inv_5 $0 $1)))",
    "(lam (lam (prev_dc_inv_5 (map (lam $0) $0) $1)))",
    "(lam (lam (prev_dc_inv_5 $0 $1)))",
    "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_5 $0 $1)))",
    "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
    "(lam (prev_dc_inv_6 $0))",
    "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 STRING $0))",
    "(lam (prev_dc_inv_12 $0 (lam (char-eq? SPACE SPACE))))",
    "(lam (prev_dc_inv_6 $0))",
    "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 STRING $0))",
    "(lam (prev_dc_inv_5 (prev_dc_inv_6 empty) $0))",
    "(lam (prev_dc_inv_6 (prev_dc_inv_7 $0 SPACE)))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
    "(lam (prev_dc_inv_6 $0))",
    "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_6 (prev_dc_inv_7 $0 SPACE)))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
    "(lam (prev_dc_inv_5 STRING $0))",
    "(lam (prev_dc_inv_5 (prev_dc_inv_6 empty) $0))",
    "(lam (prev_dc_inv_6 (prev_dc_inv_7 $0 SPACE)))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
    "(lam (prev_dc_inv_6 $0))",
    "(lam (prev_dc_inv_5 $0 STRING))",
    "(lam (prev_dc_inv_5 STRING $0))",
    "(lam (prev_dc_inv_12 $0 (lam (char-eq? SPACE SPACE))))",
    "(lam (prev_dc_inv_6 (prev_dc_inv_7 $0 SPACE)))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
    "(lam (prev_dc_inv_9 $0))",
    "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_9 $0))",
    "(lam (cons LPAREN (prev_dc_inv_5 (cons RPAREN empty) $0)))",
    "(lam (prev_dc_inv_9 $0))",
    "(lam (cons LPAREN (prev_dc_inv_5 (cons RPAREN empty) $0)))",
    "(lam (prev_dc_inv_9 $0))",
    "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_9 $0))",
    "(lam (cons LPAREN (prev_dc_inv_5 (cons RPAREN empty) $0)))",
    "(lam (prev_dc_inv_9 (prev_dc_inv_7 $0 SPACE)))",
    "(lam (prev_dc_inv_9 (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) SPACE)))",
    "(lam (prev_dc_inv_12 $0 (lam ($0 (car $1)))))",
    "(lam (prev_dc_inv_12 $0 (lam (prev_dc_inv_1 (cdr $1) (lam (lam (if ($2 $1) SPACE $0))) '-'))))",
    "(lam (prev_dc_inv_5 (fold (cdr $0) empty (lam (lam (if (prev_dc_inv_1 (cdr $2) (lam (lam (if (char-eq? $3 $1) SPACE $0))) '-') STRING $0)))) $0))",
    "(lam (prev_dc_inv_12 $0 (lam (prev_dc_inv_1 $1 (lam (lam (if ($2 $0) SPACE (index 1 (cdr $3))))) SPACE))))",
    "(lam (prev_dc_inv_12 $0 (lam (prev_dc_inv_1 $1 (lam (lam (if ($2 $0) SPACE (index (+ 1 1) $3)))) SPACE))))",
    "(lam (prev_dc_inv_12 $0 (lam (empty? (range (fold $1 0 (lam (lam (- 1 $0)))))))))",
    "(lam (prev_dc_inv_12 $0 (lam (empty? (range (- 1 (fold $1 1 (lam (lam (- 1 $0))))))))))"
  ],
  "invs": [
    {
      "body": "(lam (lam (prev_dc_inv_5 $0 $1)))",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
      "arity": 0,
      "name": "fn_13",
      "rewritten": [
        "(lam (prev_dc_inv_4 LPAREN ',' $0))",
        "(lam (prev_dc_inv_4 LPAREN ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 RPAREN '.' $0))",
        "(lam (prev_dc_inv_4 RPAREN '.' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 '.' ',' $0))",
        "(lam (map (lam $0) (prev_dc_inv_4 '.' ',' $0)))",
        "(lam (prev_dc_inv_4 RPAREN LPAREN $0))",
        "(lam (prev_dc_inv_4 RPAREN LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 SPACE '-' $0))",
        "(lam (map (lam (if (char-eq? '-' $0) SPACE $0)) $0))",
        "(lam (prev_dc_inv_11 $0 '.'))",
        "(lam (fold (prev_dc_inv_7 (prev_dc_inv_9 $0) '.') $0 (lam (lam (cdr $0)))))",
        "(lam (prev_dc_inv_7 $0 '.'))",
        "(lam (prev_dc_inv_7 $0 (fold (cdr $0) RPAREN (lam (lam '.')))))",
        "(lam (prev_dc_inv_7 $0 ','))",
        "(lam (prev_dc_inv_3 (fold (cdr $0) 1 (lam (lam (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
        "(lam (prev_dc_inv_11 $0 SPACE))",
        "(lam (prev_dc_inv_11 (cdr $0) SPACE))",
        "(lam (prev_dc_inv_7 $0 SPACE))",
        "(lam (prev_dc_inv_7 $0 (if (char-eq? (car $0) ',') RPAREN SPACE)))",
        "(lam (fold $0 $0 (lam (lam (if (char-eq? $1 SPACE) (prev_dc_inv_11 $0 $1) $0)))))",
        "(lam (fold (cdr $0) $0 (lam (lam (if (char-eq? $1 SPACE) (prev_dc_inv_11 $0 $1) $0)))))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lam (prev_dc_inv_7 $0 RPAREN))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) RPAREN))",
        "(lam (prev_dc_inv_11 $0 '-'))",
        "(lam (prev_dc_inv_11 (cdr $0) '-'))",
        "(lam (prev_dc_inv_7 $0 '-'))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) '-'))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 (prev_dc_inv_10 SPACE $0 '-' $0) '-') '-'))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_10 SPACE $0 '-' (prev_dc_inv_11 $0 '-')) '-'))",
        "(lam (lam (prev_dc_inv_5 (cons LPAREN $0) $1)))",
        "(lam (lam (prev_dc_inv_5 (prev_dc_inv_7 (prev_dc_inv_9 $0) RPAREN) $1)))",
        "(lam (lam (prev_dc_inv_10 SPACE $0 '.' $1)))",
        "(lam (lam (prev_dc_inv_10 SPACE (prev_dc_inv_4 '.' SPACE $0) '.' $1)))",
        "(lam (lam (prev_dc_inv_10 ',' $0 LPAREN $1)))",
        "(lam (lam (prev_dc_inv_10 ',' (prev_dc_inv_4 LPAREN '.' $0) LPAREN $1)))",
        "(lam (lam (prev_dc_inv_10 '.' $0 '.' $1)))",
        "(lam (lam (map (lam $0) (prev_dc_inv_10 '.' $0 '.' $1))))",
        "(lam (lam (prev_dc_inv_10 '-' $0 '.' $1)))",
        "(lam (lam (map (lam $0) (prev_dc_inv_10 '-' $0 '.' $1))))",
        "(lam (lam (prev_dc_inv_10 '-' $0 SPACE $1)))",
        "(lam (lam (prev_dc_inv_10 '-' (prev_dc_inv_4 '-' SPACE $0) SPACE $1)))",
        "(lam (prev_dc_inv_3 (- (length $0) 1) $0))",
        "(lam (prev_dc_inv_3 (length (cdr $0)) $0))",
        "(lam (prev_dc_inv_3 (- (- (length (cdr $0)) 1) 1) $0))",
        "(lam (prev_dc_inv_3 (- (length $0) (+ 1 (+ 1 1))) $0))",
        "(lam (prev_dc_inv_3 (+ 1 (+ 1 1)) $0))",
        "(lam (prev_dc_inv_3 (+ (length (prev_dc_inv_9 empty)) 1) $0))",
        "(lam (prev_dc_inv_3 (length (prev_dc_inv_2 (cdr $0))) $0))",
        "(lam (prev_dc_inv_3 (length (cdr (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lam (prev_dc_inv_3 (index 1 (prev_dc_inv_2 $0)) $0))",
        "(lam (prev_dc_inv_3 (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_7 $0 '.') ','))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 ',') '.'))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 LPAREN) LPAREN))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 (cdr $0) LPAREN) LPAREN))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 ',') ','))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0 (prev_dc_inv_11 $0 ',')) ','))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 RPAREN) '-'))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_7 $0 '-') RPAREN))",
        "(lam (prev_dc_inv_0 $0 ','))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_3 1 $0) ','))",
        "(lam (prev_dc_inv_0 $0 LPAREN))",
        "(lam (cons (car $0) (map (lam LPAREN) (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_3 1 $0) '-'))",
        "(lam (lam (prev_dc_inv_8 $0 $1)))",
        "(lam (lam (prev_dc_inv_5 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 $1 '.'))))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_11 $0 '.') $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_11 (prev_dc_inv_9 $0) '.') $0))",
        "(lam (lam (prev_dc_inv_8 $0 $1)))",
        "(lam (lam (prev_dc_inv_8 $0 (prev_dc_inv_3 1 $1))))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_11 $0 ',') $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_11 (prev_dc_inv_9 $0) ',') $0))",
        "(lam (lam (prev_dc_inv_8 $0 $1)))",
        "(lam (lam (prev_dc_inv_8 $0 (prev_dc_inv_3 1 $1))))",
        "(lam (lam (prev_dc_inv_8 $0 $1)))",
        "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (prev_dc_inv_8 (cons (index (length (prev_dc_inv_7 (cons '.' $0) RPAREN)) $0) $0) $0))",
        "(lam (prev_dc_inv_8 (cons (index (length (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) RPAREN)) (cdr $0)) $0) $0))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 (map (lam $0) $0) $1)))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 (map (lam $0) $0) $1)))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 STRING $0))",
        "(lam (prev_dc_inv_12 $0 (lam (char-eq? SPACE SPACE))))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 STRING $0))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_6 empty) $0))",
        "(lam (prev_dc_inv_6 (prev_dc_inv_7 $0 SPACE)))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_6 (prev_dc_inv_7 $0 SPACE)))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_5 STRING $0))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_6 empty) $0))",
        "(lam (prev_dc_inv_6 (prev_dc_inv_7 $0 SPACE)))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_5 $0 STRING))",
        "(lam (prev_dc_inv_5 STRING $0))",
        "(lam (prev_dc_inv_12 $0 (lam (char-eq? SPACE SPACE))))",
        "(lam (prev_dc_inv_6 (prev_dc_inv_7 $0 SPACE)))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (cons LPAREN (prev_dc_inv_5 (cons RPAREN empty) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (cons LPAREN (prev_dc_inv_5 (cons RPAREN empty) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (cons LPAREN (prev_dc_inv_5 (cons RPAREN empty) $0)))",
        "(lam (prev_dc_inv_9 (prev_dc_inv_7 $0 SPACE)))",
        "(lam (prev_dc_inv_9 (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) SPACE)))",
        "(lam (prev_dc_inv_12 $0 (lam ($0 (car $1)))))",
        "(lam (prev_dc_inv_12 $0 (lam (prev_dc_inv_1 (cdr $1) (lam (lam (if ($2 $1) SPACE $0))) '-'))))",
        "(lam (prev_dc_inv_5 (fold (cdr $0) empty (lam (lam (if (prev_dc_inv_1 (cdr $2) (lam (lam (if (char-eq? $3 $1) SPACE $0))) '-') STRING $0)))) $0))",
        "(lam (prev_dc_inv_12 $0 (lam (prev_dc_inv_1 $1 (lam (lam (if ($2 $0) SPACE (index 1 (cdr $3))))) SPACE))))",
        "(lam (prev_dc_inv_12 $0 (lam (prev_dc_inv_1 $1 (lam (lam (if ($2 $0) SPACE (index (+ 1 1) $3)))) SPACE))))",
        "(lam (prev_dc_inv_12 $0 (lam (empty? (range (fold $1 0 (lam (lam (- 1 $0)))))))))",
        "(lam (prev_dc_inv_12 $0 (lam (empty? (range (- 1 (fold $1 1 (lam (lam (- 1 $0))))))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN '.' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN '.' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' ',' $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' ',' $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) SPACE '-' $0))",
        "(lambda (map (lambda (if (char-eq? '-' $0) SPACE $0)) $0))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 '.'))",
        "(lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0) '.') $0 (lambda (lambda (cdr $0)))))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '.'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 (fold (cdr $0) RPAREN (lambda (lambda '.')))))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 ','))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (fold (cdr $0) 1 (lambda (lambda (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (cdr $0) SPACE))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 (if (char-eq? (car $0) ',') RPAREN SPACE)))",
        "(lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 SPACE) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 $1) $0)))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (if (char-eq? $1 SPACE) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 $1) $0)))))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 RPAREN))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) RPAREN))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 '-'))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (cdr $0) '-'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '-'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) '-'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) SPACE $0 '-' $0) '-') '-'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) SPACE $0 '-' (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 '-')) '-'))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0) RPAREN) $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) SPACE $0 '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) SPACE (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' SPACE $0) '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) ',' $0 LPAREN $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) ',' (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN '.' $0) LPAREN $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '.' $0 '.' $1)))",
        "(lambda (lambda (map (lambda $0) (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '.' $0 '.' $1))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '-' $0 '.' $1)))",
        "(lambda (lambda (map (lambda $0) (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '-' $0 '.' $1))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '-' $0 SPACE $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '-' (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '-' SPACE $0) SPACE $1)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (length $0) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (cdr $0)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (- (length (cdr $0)) 1) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (length $0) (+ 1 (+ 1 1))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ 1 (+ 1 1)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ (length (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) empty)) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (#(lambda (cdr (cdr (cdr (cdr (range (length $0))))))) (cdr $0))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (cdr (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (index 1 (#(lambda (cdr (cdr (cdr (cdr (range (length $0))))))) $0)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '.') ','))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 ',') '.'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 LPAREN) LPAREN))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (cdr $0) LPAREN) LPAREN))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 ',') ','))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 ',')) ','))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 RPAREN) '-'))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '-') RPAREN))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $0) ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 LPAREN))",
        "(lambda (cons (car $0) (map (lambda LPAREN) (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $0) '-'))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 '.') $0))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0) '.') $0))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $1))))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 ',') $0))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0) ',') $0))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $1))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (cons (index (length (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (cons '.' $0) RPAREN)) $0) $0) $0))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (cons (index (length (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) RPAREN)) (cdr $0)) $0) $0))",
        "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (char-eq? SPACE SPACE))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) empty) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) empty) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (char-eq? SPACE SPACE))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda ($0 (car $1)))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (#(lambda (lambda (char-eq? (fold (cdr $1) '-' $0)))) (cdr $1) (lambda (lambda (if ($2 $1) SPACE $0))) '-'))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $0) empty (lambda (lambda (if (#(lambda (lambda (char-eq? (fold (cdr $1) '-' $0)))) (cdr $2) (lambda (lambda (if (char-eq? $3 $1) SPACE $0))) '-') STRING $0)))) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (#(lambda (lambda (char-eq? (fold (cdr $1) '-' $0)))) $1 (lambda (lambda (if ($2 $0) SPACE (index 1 (cdr $3))))) SPACE))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (#(lambda (lambda (char-eq? (fold (cdr $1) '-' $0)))) $1 (lambda (lambda (if ($2 $0) SPACE (index (+ 1 1) $3)))) SPACE))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (empty? (range (fold $1 0 (lambda (lambda (- 1 $0)))))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (empty? (range (- 1 (fold $1 1 (lambda (lambda (- 1 $0))))))))))"
      ],
      "utility": 920,
      "expected_cost": 29813,
      "final_cost": 29813,
      "multiplier": 1.0410559152047765,
      "multiplier_wrt_orig": 1.0410559152047765,
      "num_uses": 6,
      "uses": [
        {
          "fn_13 ": "(lam (lam (prev_dc_inv_5 $0 $1)))"
        }
      ]
    },
    {
      "body": "(lam (prev_dc_inv_6 (prev_dc_inv_7 $0 SPACE)))",
      "dreamcoder": "#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE)))",
      "arity": 0,
      "name": "fn_14",
      "rewritten": [
        "(lam (prev_dc_inv_4 LPAREN ',' $0))",
        "(lam (prev_dc_inv_4 LPAREN ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 RPAREN '.' $0))",
        "(lam (prev_dc_inv_4 RPAREN '.' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 '.' ',' $0))",
        "(lam (map (lam $0) (prev_dc_inv_4 '.' ',' $0)))",
        "(lam (prev_dc_inv_4 RPAREN LPAREN $0))",
        "(lam (prev_dc_inv_4 RPAREN LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 SPACE '-' $0))",
        "(lam (map (lam (if (char-eq? '-' $0) SPACE $0)) $0))",
        "(lam (prev_dc_inv_11 $0 '.'))",
        "(lam (fold (prev_dc_inv_7 (prev_dc_inv_9 $0) '.') $0 (lam (lam (cdr $0)))))",
        "(lam (prev_dc_inv_7 $0 '.'))",
        "(lam (prev_dc_inv_7 $0 (fold (cdr $0) RPAREN (lam (lam '.')))))",
        "(lam (prev_dc_inv_7 $0 ','))",
        "(lam (prev_dc_inv_3 (fold (cdr $0) 1 (lam (lam (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
        "(lam (prev_dc_inv_11 $0 SPACE))",
        "(lam (prev_dc_inv_11 (cdr $0) SPACE))",
        "(lam (prev_dc_inv_7 $0 SPACE))",
        "(lam (prev_dc_inv_7 $0 (if (char-eq? (car $0) ',') RPAREN SPACE)))",
        "(lam (fold $0 $0 (lam (lam (if (char-eq? $1 SPACE) (prev_dc_inv_11 $0 $1) $0)))))",
        "(lam (fold (cdr $0) $0 (lam (lam (if (char-eq? $1 SPACE) (prev_dc_inv_11 $0 $1) $0)))))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lam (prev_dc_inv_7 $0 RPAREN))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) RPAREN))",
        "(lam (prev_dc_inv_11 $0 '-'))",
        "(lam (prev_dc_inv_11 (cdr $0) '-'))",
        "(lam (prev_dc_inv_7 $0 '-'))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) '-'))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 (prev_dc_inv_10 SPACE $0 '-' $0) '-') '-'))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_10 SPACE $0 '-' (prev_dc_inv_11 $0 '-')) '-'))",
        "(lam (lam (prev_dc_inv_5 (cons LPAREN $0) $1)))",
        "(lam (lam (prev_dc_inv_5 (prev_dc_inv_7 (prev_dc_inv_9 $0) RPAREN) $1)))",
        "(lam (lam (prev_dc_inv_10 SPACE $0 '.' $1)))",
        "(lam (lam (prev_dc_inv_10 SPACE (prev_dc_inv_4 '.' SPACE $0) '.' $1)))",
        "(lam (lam (prev_dc_inv_10 ',' $0 LPAREN $1)))",
        "(lam (lam (prev_dc_inv_10 ',' (prev_dc_inv_4 LPAREN '.' $0) LPAREN $1)))",
        "(lam (lam (prev_dc_inv_10 '.' $0 '.' $1)))",
        "(lam (lam (map (lam $0) (prev_dc_inv_10 '.' $0 '.' $1))))",
        "(lam (lam (prev_dc_inv_10 '-' $0 '.' $1)))",
        "(lam (lam (map (lam $0) (prev_dc_inv_10 '-' $0 '.' $1))))",
        "(lam (lam (prev_dc_inv_10 '-' $0 SPACE $1)))",
        "(lam (lam (prev_dc_inv_10 '-' (prev_dc_inv_4 '-' SPACE $0) SPACE $1)))",
        "(lam (prev_dc_inv_3 (- (length $0) 1) $0))",
        "(lam (prev_dc_inv_3 (length (cdr $0)) $0))",
        "(lam (prev_dc_inv_3 (- (- (length (cdr $0)) 1) 1) $0))",
        "(lam (prev_dc_inv_3 (- (length $0) (+ 1 (+ 1 1))) $0))",
        "(lam (prev_dc_inv_3 (+ 1 (+ 1 1)) $0))",
        "(lam (prev_dc_inv_3 (+ (length (prev_dc_inv_9 empty)) 1) $0))",
        "(lam (prev_dc_inv_3 (length (prev_dc_inv_2 (cdr $0))) $0))",
        "(lam (prev_dc_inv_3 (length (cdr (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lam (prev_dc_inv_3 (index 1 (prev_dc_inv_2 $0)) $0))",
        "(lam (prev_dc_inv_3 (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_7 $0 '.') ','))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 ',') '.'))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 LPAREN) LPAREN))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 (cdr $0) LPAREN) LPAREN))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 ',') ','))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0 (prev_dc_inv_11 $0 ',')) ','))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 RPAREN) '-'))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_7 $0 '-') RPAREN))",
        "(lam (prev_dc_inv_0 $0 ','))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_3 1 $0) ','))",
        "(lam (prev_dc_inv_0 $0 LPAREN))",
        "(lam (cons (car $0) (map (lam LPAREN) (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_3 1 $0) '-'))",
        "(lam (lam (prev_dc_inv_8 $0 $1)))",
        "(lam (lam (prev_dc_inv_5 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 $1 '.'))))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_11 $0 '.') $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_11 (prev_dc_inv_9 $0) '.') $0))",
        "(lam (lam (prev_dc_inv_8 $0 $1)))",
        "(lam (lam (prev_dc_inv_8 $0 (prev_dc_inv_3 1 $1))))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_11 $0 ',') $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_11 (prev_dc_inv_9 $0) ',') $0))",
        "(lam (lam (prev_dc_inv_8 $0 $1)))",
        "(lam (lam (prev_dc_inv_8 $0 (prev_dc_inv_3 1 $1))))",
        "(lam (lam (prev_dc_inv_8 $0 $1)))",
        "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (prev_dc_inv_8 (cons (index (length (prev_dc_inv_7 (cons '.' $0) RPAREN)) $0) $0) $0))",
        "(lam (prev_dc_inv_8 (cons (index (length (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) RPAREN)) (cdr $0)) $0) $0))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 (map (lam $0) $0) $1)))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 (map (lam $0) $0) $1)))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 STRING $0))",
        "(lam (prev_dc_inv_12 $0 (lam (char-eq? SPACE SPACE))))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 STRING $0))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_6 empty) $0))",
        "fn_14",
        "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
        "fn_14",
        "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_5 STRING $0))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_6 empty) $0))",
        "fn_14",
        "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_5 $0 STRING))",
        "(lam (prev_dc_inv_5 STRING $0))",
        "(lam (prev_dc_inv_12 $0 (lam (char-eq? SPACE SPACE))))",
        "fn_14",
        "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (cons LPAREN (prev_dc_inv_5 (cons RPAREN empty) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (cons LPAREN (prev_dc_inv_5 (cons RPAREN empty) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (cons LPAREN (prev_dc_inv_5 (cons RPAREN empty) $0)))",
        "(lam (prev_dc_inv_9 (prev_dc_inv_7 $0 SPACE)))",
        "(lam (prev_dc_inv_9 (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) SPACE)))",
        "(lam (prev_dc_inv_12 $0 (lam ($0 (car $1)))))",
        "(lam (prev_dc_inv_12 $0 (lam (prev_dc_inv_1 (cdr $1) (lam (lam (if ($2 $1) SPACE $0))) '-'))))",
        "(lam (prev_dc_inv_5 (fold (cdr $0) empty (lam (lam (if (prev_dc_inv_1 (cdr $2) (lam (lam (if (char-eq? $3 $1) SPACE $0))) '-') STRING $0)))) $0))",
        "(lam (prev_dc_inv_12 $0 (lam (prev_dc_inv_1 $1 (lam (lam (if ($2 $0) SPACE (index 1 (cdr $3))))) SPACE))))",
        "(lam (prev_dc_inv_12 $0 (lam (prev_dc_inv_1 $1 (lam (lam (if ($2 $0) SPACE (index (+ 1 1) $3)))) SPACE))))",
        "(lam (prev_dc_inv_12 $0 (lam (empty? (range (fold $1 0 (lam (lam (- 1 $0)))))))))",
        "(lam (prev_dc_inv_12 $0 (lam (empty? (range (- 1 (fold $1 1 (lam (lam (- 1 $0))))))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN '.' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN '.' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' ',' $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' ',' $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) SPACE '-' $0))",
        "(lambda (map (lambda (if (char-eq? '-' $0) SPACE $0)) $0))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 '.'))",
        "(lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0) '.') $0 (lambda (lambda (cdr $0)))))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '.'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 (fold (cdr $0) RPAREN (lambda (lambda '.')))))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 ','))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (fold (cdr $0) 1 (lambda (lambda (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (cdr $0) SPACE))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 (if (char-eq? (car $0) ',') RPAREN SPACE)))",
        "(lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 SPACE) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 $1) $0)))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (if (char-eq? $1 SPACE) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 $1) $0)))))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 RPAREN))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) RPAREN))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 '-'))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (cdr $0) '-'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '-'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) '-'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) SPACE $0 '-' $0) '-') '-'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) SPACE $0 '-' (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 '-')) '-'))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0) RPAREN) $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) SPACE $0 '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) SPACE (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' SPACE $0) '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) ',' $0 LPAREN $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) ',' (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN '.' $0) LPAREN $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '.' $0 '.' $1)))",
        "(lambda (lambda (map (lambda $0) (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '.' $0 '.' $1))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '-' $0 '.' $1)))",
        "(lambda (lambda (map (lambda $0) (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '-' $0 '.' $1))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '-' $0 SPACE $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '-' (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '-' SPACE $0) SPACE $1)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (length $0) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (cdr $0)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (- (length (cdr $0)) 1) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (length $0) (+ 1 (+ 1 1))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ 1 (+ 1 1)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ (length (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) empty)) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (#(lambda (cdr (cdr (cdr (cdr (range (length $0))))))) (cdr $0))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (cdr (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (index 1 (#(lambda (cdr (cdr (cdr (cdr (range (length $0))))))) $0)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '.') ','))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 ',') '.'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 LPAREN) LPAREN))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (cdr $0) LPAREN) LPAREN))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 ',') ','))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 ',')) ','))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 RPAREN) '-'))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '-') RPAREN))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $0) ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 LPAREN))",
        "(lambda (cons (car $0) (map (lambda LPAREN) (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $0) '-'))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 '.') $0))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0) '.') $0))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $1))))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 ',') $0))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0) ',') $0))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $1))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (cons (index (length (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (cons '.' $0) RPAREN)) $0) $0) $0))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (cons (index (length (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) RPAREN)) (cdr $0)) $0) $0))",
        "fn_13",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "fn_13",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "fn_13",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "fn_13",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "fn_13",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "fn_13",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (char-eq? SPACE SPACE))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) empty) $0))",
        "#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) empty) $0))",
        "#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (char-eq? SPACE SPACE))))",
        "#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda ($0 (car $1)))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (#(lambda (lambda (char-eq? (fold (cdr $1) '-' $0)))) (cdr $1) (lambda (lambda (if ($2 $1) SPACE $0))) '-'))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $0) empty (lambda (lambda (if (#(lambda (lambda (char-eq? (fold (cdr $1) '-' $0)))) (cdr $2) (lambda (lambda (if (char-eq? $3 $1) SPACE $0))) '-') STRING $0)))) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (#(lambda (lambda (char-eq? (fold (cdr $1) '-' $0)))) $1 (lambda (lambda (if ($2 $0) SPACE (index 1 (cdr $3))))) SPACE))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (#(lambda (lambda (char-eq? (fold (cdr $1) '-' $0)))) $1 (lambda (lambda (if ($2 $0) SPACE (index (+ 1 1) $3)))) SPACE))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (empty? (range (fold $1 0 (lambda (lambda (- 1 $0)))))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (empty? (range (- 1 (fold $1 1 (lambda (lambda (- 1 $0))))))))))"
      ],
      "utility": 812,
      "expected_cost": 28597,
      "final_cost": 28597,
      "multiplier": 1.0425219428611392,
      "multiplier_wrt_orig": 1.0853236353463651,
      "num_uses": 4,
      "uses": [
        {
          "fn_14 ": "(lam (prev_dc_inv_6 (prev_dc_inv_7 $0 SPACE)))"
        }
      ]
    },
    {
      "body": "(lam (lam (prev_dc_inv_10 #1 $0 #0 $1)))",
      "dreamcoder": "#(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) $2 $0 $3 $1)))))",
      "arity": 2,
      "name": "fn_15",
      "rewritten": [
        "(lam (prev_dc_inv_4 LPAREN ',' $0))",
        "(lam (prev_dc_inv_4 LPAREN ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 RPAREN '.' $0))",
        "(lam (prev_dc_inv_4 RPAREN '.' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 '.' ',' $0))",
        "(lam (map (lam $0) (prev_dc_inv_4 '.' ',' $0)))",
        "(lam (prev_dc_inv_4 RPAREN LPAREN $0))",
        "(lam (prev_dc_inv_4 RPAREN LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 SPACE '-' $0))",
        "(lam (map (lam (if (char-eq? '-' $0) SPACE $0)) $0))",
        "(lam (prev_dc_inv_11 $0 '.'))",
        "(lam (fold (prev_dc_inv_7 (prev_dc_inv_9 $0) '.') $0 (lam (lam (cdr $0)))))",
        "(lam (prev_dc_inv_7 $0 '.'))",
        "(lam (prev_dc_inv_7 $0 (fold (cdr $0) RPAREN (lam (lam '.')))))",
        "(lam (prev_dc_inv_7 $0 ','))",
        "(lam (prev_dc_inv_3 (fold (cdr $0) 1 (lam (lam (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
        "(lam (prev_dc_inv_11 $0 SPACE))",
        "(lam (prev_dc_inv_11 (cdr $0) SPACE))",
        "(lam (prev_dc_inv_7 $0 SPACE))",
        "(lam (prev_dc_inv_7 $0 (if (char-eq? (car $0) ',') RPAREN SPACE)))",
        "(lam (fold $0 $0 (lam (lam (if (char-eq? $1 SPACE) (prev_dc_inv_11 $0 $1) $0)))))",
        "(lam (fold (cdr $0) $0 (lam (lam (if (char-eq? $1 SPACE) (prev_dc_inv_11 $0 $1) $0)))))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lam (prev_dc_inv_7 $0 RPAREN))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) RPAREN))",
        "(lam (prev_dc_inv_11 $0 '-'))",
        "(lam (prev_dc_inv_11 (cdr $0) '-'))",
        "(lam (prev_dc_inv_7 $0 '-'))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) '-'))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 (prev_dc_inv_10 SPACE $0 '-' $0) '-') '-'))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_10 SPACE $0 '-' (prev_dc_inv_11 $0 '-')) '-'))",
        "(lam (lam (prev_dc_inv_5 (cons LPAREN $0) $1)))",
        "(lam (lam (prev_dc_inv_5 (prev_dc_inv_7 (prev_dc_inv_9 $0) RPAREN) $1)))",
        "(fn_15 '.' SPACE)",
        "(lam (lam (prev_dc_inv_10 SPACE (prev_dc_inv_4 '.' SPACE $0) '.' $1)))",
        "(fn_15 LPAREN ',')",
        "(lam (lam (prev_dc_inv_10 ',' (prev_dc_inv_4 LPAREN '.' $0) LPAREN $1)))",
        "(fn_15 '.' '.')",
        "(lam (lam (map (lam $0) (prev_dc_inv_10 '.' $0 '.' $1))))",
        "(fn_15 '.' '-')",
        "(lam (lam (map (lam $0) (prev_dc_inv_10 '-' $0 '.' $1))))",
        "(fn_15 SPACE '-')",
        "(lam (lam (prev_dc_inv_10 '-' (prev_dc_inv_4 '-' SPACE $0) SPACE $1)))",
        "(lam (prev_dc_inv_3 (- (length $0) 1) $0))",
        "(lam (prev_dc_inv_3 (length (cdr $0)) $0))",
        "(lam (prev_dc_inv_3 (- (- (length (cdr $0)) 1) 1) $0))",
        "(lam (prev_dc_inv_3 (- (length $0) (+ 1 (+ 1 1))) $0))",
        "(lam (prev_dc_inv_3 (+ 1 (+ 1 1)) $0))",
        "(lam (prev_dc_inv_3 (+ (length (prev_dc_inv_9 empty)) 1) $0))",
        "(lam (prev_dc_inv_3 (length (prev_dc_inv_2 (cdr $0))) $0))",
        "(lam (prev_dc_inv_3 (length (cdr (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lam (prev_dc_inv_3 (index 1 (prev_dc_inv_2 $0)) $0))",
        "(lam (prev_dc_inv_3 (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_7 $0 '.') ','))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 ',') '.'))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 LPAREN) LPAREN))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 (cdr $0) LPAREN) LPAREN))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 ',') ','))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0 (prev_dc_inv_11 $0 ',')) ','))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_11 $0 RPAREN) '-'))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_7 $0 '-') RPAREN))",
        "(lam (prev_dc_inv_0 $0 ','))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_3 1 $0) ','))",
        "(lam (prev_dc_inv_0 $0 LPAREN))",
        "(lam (cons (car $0) (map (lam LPAREN) (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_3 1 $0) '-'))",
        "(lam (lam (prev_dc_inv_8 $0 $1)))",
        "(lam (lam (prev_dc_inv_5 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 $1 '.'))))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_11 $0 '.') $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_11 (prev_dc_inv_9 $0) '.') $0))",
        "(lam (lam (prev_dc_inv_8 $0 $1)))",
        "(lam (lam (prev_dc_inv_8 $0 (prev_dc_inv_3 1 $1))))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_11 $0 ',') $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_11 (prev_dc_inv_9 $0) ',') $0))",
        "(lam (lam (prev_dc_inv_8 $0 $1)))",
        "(lam (lam (prev_dc_inv_8 $0 (prev_dc_inv_3 1 $1))))",
        "(lam (lam (prev_dc_inv_8 $0 $1)))",
        "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (prev_dc_inv_8 (cons (index (length (prev_dc_inv_7 (cons '.' $0) RPAREN)) $0) $0) $0))",
        "(lam (prev_dc_inv_8 (cons (index (length (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) RPAREN)) (cdr $0)) $0) $0))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 (map (lam $0) $0) $1)))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 (map (lam $0) $0) $1)))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
        "fn_13",
        "(lam (lam (prev_dc_inv_5 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 STRING $0))",
        "(lam (prev_dc_inv_12 $0 (lam (char-eq? SPACE SPACE))))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 STRING $0))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_6 empty) $0))",
        "fn_14",
        "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
        "fn_14",
        "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_5 STRING $0))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_6 empty) $0))",
        "fn_14",
        "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_5 $0 STRING))",
        "(lam (prev_dc_inv_5 STRING $0))",
        "(lam (prev_dc_inv_12 $0 (lam (char-eq? SPACE SPACE))))",
        "fn_14",
        "(lam (prev_dc_inv_7 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (cons LPAREN (prev_dc_inv_5 (cons RPAREN empty) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (cons LPAREN (prev_dc_inv_5 (cons RPAREN empty) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (cons LPAREN (prev_dc_inv_5 (cons RPAREN empty) $0)))",
        "(lam (prev_dc_inv_9 (prev_dc_inv_7 $0 SPACE)))",
        "(lam (prev_dc_inv_9 (prev_dc_inv_7 (prev_dc_inv_5 $0 $0) SPACE)))",
        "(lam (prev_dc_inv_12 $0 (lam ($0 (car $1)))))",
        "(lam (prev_dc_inv_12 $0 (lam (prev_dc_inv_1 (cdr $1) (lam (lam (if ($2 $1) SPACE $0))) '-'))))",
        "(lam (prev_dc_inv_5 (fold (cdr $0) empty (lam (lam (if (prev_dc_inv_1 (cdr $2) (lam (lam (if (char-eq? $3 $1) SPACE $0))) '-') STRING $0)))) $0))",
        "(lam (prev_dc_inv_12 $0 (lam (prev_dc_inv_1 $1 (lam (lam (if ($2 $0) SPACE (index 1 (cdr $3))))) SPACE))))",
        "(lam (prev_dc_inv_12 $0 (lam (prev_dc_inv_1 $1 (lam (lam (if ($2 $0) SPACE (index (+ 1 1) $3)))) SPACE))))",
        "(lam (prev_dc_inv_12 $0 (lam (empty? (range (fold $1 0 (lam (lam (- 1 $0)))))))))",
        "(lam (prev_dc_inv_12 $0 (lam (empty? (range (- 1 (fold $1 1 (lam (lam (- 1 $0))))))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN '.' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN '.' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' ',' $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' ',' $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) SPACE '-' $0))",
        "(lambda (map (lambda (if (char-eq? '-' $0) SPACE $0)) $0))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 '.'))",
        "(lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0) '.') $0 (lambda (lambda (cdr $0)))))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '.'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 (fold (cdr $0) RPAREN (lambda (lambda '.')))))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 ','))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (fold (cdr $0) 1 (lambda (lambda (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (cdr $0) SPACE))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 (if (char-eq? (car $0) ',') RPAREN SPACE)))",
        "(lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 SPACE) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 $1) $0)))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (if (char-eq? $1 SPACE) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 $1) $0)))))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 RPAREN))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) RPAREN))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 '-'))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (cdr $0) '-'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '-'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) '-'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) SPACE $0 '-' $0) '-') '-'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) SPACE $0 '-' (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 '-')) '-'))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0) RPAREN) $1)))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) $2 $0 $3 $1))))) '.' SPACE)",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) SPACE (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' SPACE $0) '.' $1)))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) $2 $0 $3 $1))))) LPAREN ',')",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) ',' (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN '.' $0) LPAREN $1)))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) $2 $0 $3 $1))))) '.' '.')",
        "(lambda (lambda (map (lambda $0) (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '.' $0 '.' $1))))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) $2 $0 $3 $1))))) '.' '-')",
        "(lambda (lambda (map (lambda $0) (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '-' $0 '.' $1))))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) $2 $0 $3 $1))))) SPACE '-')",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 (cons $2 $1)))))) '-' (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '-' SPACE $0) SPACE $1)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (length $0) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (cdr $0)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (- (length (cdr $0)) 1) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (length $0) (+ 1 (+ 1 1))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ 1 (+ 1 1)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ (length (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) empty)) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (#(lambda (cdr (cdr (cdr (cdr (range (length $0))))))) (cdr $0))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (cdr (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (index 1 (#(lambda (cdr (cdr (cdr (cdr (range (length $0))))))) $0)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '.') ','))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 ',') '.'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 LPAREN) LPAREN))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (cdr $0) LPAREN) LPAREN))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 ',') ','))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 ',')) ','))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 RPAREN) '-'))",
        "(lambda (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '-') RPAREN))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $0) ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 LPAREN))",
        "(lambda (cons (car $0) (map (lambda LPAREN) (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $0) '-'))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 '.') $0))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0) '.') $0))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $1))))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $0 ',') $0))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0) ',') $0))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $1))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (cons (index (length (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (cons '.' $0) RPAREN)) $0) $0) $0))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (cons (index (length (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) RPAREN)) (cdr $0)) $0) $0))",
        "fn_13",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "fn_13",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "fn_13",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "fn_13",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "fn_13",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "fn_13",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (char-eq? SPACE SPACE))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) empty) $0))",
        "fn_14",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "fn_14",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) empty) $0))",
        "fn_14",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (char-eq? SPACE SPACE))))",
        "fn_14",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda ($0 (car $1)))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (#(lambda (lambda (char-eq? (fold (cdr $1) '-' $0)))) (cdr $1) (lambda (lambda (if ($2 $1) SPACE $0))) '-'))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $0) empty (lambda (lambda (if (#(lambda (lambda (char-eq? (fold (cdr $1) '-' $0)))) (cdr $2) (lambda (lambda (if (char-eq? $3 $1) SPACE $0))) '-') STRING $0)))) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (#(lambda (lambda (char-eq? (fold (cdr $1) '-' $0)))) $1 (lambda (lambda (if ($2 $0) SPACE (index 1 (cdr $3))))) SPACE))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (#(lambda (lambda (char-eq? (fold (cdr $1) '-' $0)))) $1 (lambda (lambda (if ($2 $0) SPACE (index (+ 1 1) $3)))) SPACE))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (empty? (range (fold $1 0 (lambda (lambda (- 1 $0)))))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $1) empty (lambda (lambda (if ($2 (lambda (char-eq? $0 $2))) STRING $0)))) $1))) $0 (lambda (empty? (range (- 1 (fold $1 1 (lambda (lambda (- 1 $0))))))))))"
      ],
      "utility": 714,
      "expected_cost": 27577,
      "final_cost": 27577,
      "multiplier": 1.0369873445262356,
      "multiplier_wrt_orig": 1.1254668745693874,
      "num_uses": 5,
      "uses": [
        {
          "fn_15 LPAREN ','": "(lam (lam (prev_dc_inv_10 ',' $0 LPAREN $1)))"
        },
        {
          "fn_15 '.' '-'": "(lam (lam (prev_dc_inv_10 '-' $0 '.' $1)))"
        },
        {
          "fn_15 SPACE '-'": "(lam (lam (prev_dc_inv_10 '-' $0 SPACE $1)))"
        },
        {
          "fn_15 '.' '.'": "(lam (lam (prev_dc_inv_10 '.' $0 '.' $1)))"
        },
        {
          "fn_15 '.' SPACE": "(lam (lam (prev_dc_inv_10 SPACE $0 '.' $1)))"
        }
      ]
    }
  ]
}