{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T22.01.57/bench000_it1.json --max-arity=3 --threads=1 --iterations=3 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T22.01.57/out/stitch/2022-10-04_19-35-51/raw/bench000_it1.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T22.01.57/bench000_it1.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T22.01.57/out/stitch/2022-10-04_19-35-51/raw/bench000_it1.json",
    "iterations": 3,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 19126,
  "original": [
    "(lam (map (lam (if (char-eq? $0 '.') RPAREN $0)) $0))",
    "(lam (map (lam (if (char-eq? '.' $0) RPAREN $0)) $0))",
    "(lam (unfold $0 (lam (char-eq? (car $0) ',')) (lam (car $0)) (lam (cdr $0))))",
    "(lam (map (lam (index $0 $1)) (range (fold (cdr $0) 0 (lam (lam (+ (if (char-eq? $1 ',') 0 $0) 1)))))))",
    "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
    "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
    "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
    "(lam (map (lam (index $0 $1)) (range (- (length $0) 1))))",
    "(lam (map (lam (index $0 $1)) (range (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))))))",
    "(lam (map (lam (index $0 $1)) (range (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1))))",
    "(lam (cons (car $0) (cons LPAREN empty)))",
    "(lam (cons (index 0 $0) (cons LPAREN empty)))",
    "(lam (lam (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
    "(lam (lam (cons (car $1) (cons '.' (cons (index 0 $0) (cons '.' empty))))))",
    "(lam (lam (fold $1 $0 (lam (lam (cons $1 $0))))))",
    "(lam (lam (fold $1 (map (lam $0) $0) (lam (lam (cons $1 $0))))))",
    "(lam (lam (fold $1 $0 (lam (lam (cons $1 $0))))))",
    "(lam (lam (fold $1 (map (lam $0) $0) (lam (lam (cons $1 $0))))))",
    "(lam (fold STRING $0 (lam (lam (cons $1 $0)))))",
    "(lam (fold STRING (map (lam $0) $0) (lam (lam (cons $1 $0)))))"
  ],
  "invs": [
    {
      "body": "(lam (fold #0 $0 (lam (lam (cons $1 $0)))))",
      "dreamcoder": "#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0))))))",
      "arity": 1,
      "name": "fn_0",
      "rewritten": [
        "(lam (map (lam (if (char-eq? $0 '.') RPAREN $0)) $0))",
        "(lam (map (lam (if (char-eq? '.' $0) RPAREN $0)) $0))",
        "(lam (unfold $0 (lam (char-eq? (car $0) ',')) (lam (car $0)) (lam (cdr $0))))",
        "(lam (map (lam (index $0 $1)) (range (fold (cdr $0) 0 (lam (lam (+ (if (char-eq? $1 ',') 0 $0) 1)))))))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
        "(lam (map (lam (index $0 $1)) (range (- (length $0) 1))))",
        "(lam (map (lam (index $0 $1)) (range (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))))))",
        "(lam (map (lam (index $0 $1)) (range (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1))))",
        "(lam (cons (car $0) (cons LPAREN empty)))",
        "(lam (cons (index 0 $0) (cons LPAREN empty)))",
        "(lam (lam (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
        "(lam (lam (cons (car $1) (cons '.' (cons (index 0 $0) (cons '.' empty))))))",
        "(lam (fn_0 $0))",
        "(lam (lam (fold $1 (map (lam $0) $0) (lam (lam (cons $1 $0))))))",
        "(lam (fn_0 $0))",
        "(lam (lam (fold $1 (map (lam $0) $0) (lam (lam (cons $1 $0))))))",
        "(fn_0 STRING)",
        "(lam (fold STRING (map (lam $0) $0) (lam (lam (cons $1 $0)))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (if (char-eq? $0 '.') RPAREN $0)) $0))",
        "(lambda (map (lambda (if (char-eq? '.' $0) RPAREN $0)) $0))",
        "(lambda (unfold $0 (lambda (char-eq? (car $0) ',')) (lambda (car $0)) (lambda (cdr $0))))",
        "(lambda (map (lambda (index $0 $1)) (range (fold (cdr $0) 0 (lambda (lambda (+ (if (char-eq? $1 ',') 0 $0) 1)))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (- (length $0) 1))))",
        "(lambda (map (lambda (index $0 $1)) (range (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))))))",
        "(lambda (map (lambda (index $0 $1)) (range (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1))))",
        "(lambda (cons (car $0) (cons LPAREN empty)))",
        "(lambda (cons (index 0 $0) (cons LPAREN empty)))",
        "(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
        "(lambda (lambda (cons (car $1) (cons '.' (cons (index 0 $0) (cons '.' empty))))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0))",
        "(lambda (lambda (fold $1 (map (lambda $0) $0) (lambda (lambda (cons $1 $0))))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0))",
        "(lambda (lambda (fold $1 (map (lambda $0) $0) (lambda (lambda (cons $1 $0))))))",
        "(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING)",
        "(lambda (fold STRING (map (lambda $0) $0) (lambda (lambda (cons $1 $0)))))"
      ],
      "utility": 713,
      "expected_cost": 7381,
      "final_cost": 7381,
      "multiplier": 1.165424739195231,
      "multiplier_wrt_orig": 1.165424739195231,
      "num_uses": 3,
      "uses": [
        {
          "fn_0 $0": "(lam (fold $1 $0 (lam (lam (cons $1 $0)))))"
        },
        {
          "fn_0 STRING": "(lam (fold STRING $0 (lam (lam (cons $1 $0)))))"
        }
      ]
    },
    {
      "body": "(cons (car #2) (cons #1 #0))",
      "dreamcoder": "#(lambda (lambda (lambda (cons (car $0) (cons $1 $2)))))",
      "arity": 3,
      "name": "fn_1",
      "rewritten": [
        "(lam (map (lam (if (char-eq? $0 '.') RPAREN $0)) $0))",
        "(lam (map (lam (if (char-eq? '.' $0) RPAREN $0)) $0))",
        "(lam (unfold $0 (lam (char-eq? (car $0) ',')) (lam (car $0)) (lam (cdr $0))))",
        "(lam (map (lam (index $0 $1)) (range (fold (cdr $0) 0 (lam (lam (+ (if (char-eq? $1 ',') 0 $0) 1)))))))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
        "(lam (map (lam (index $0 $1)) (range (- (length $0) 1))))",
        "(lam (map (lam (index $0 $1)) (range (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))))))",
        "(lam (map (lam (index $0 $1)) (range (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1))))",
        "(lam (fn_1 empty LPAREN $0))",
        "(lam (cons (index 0 $0) (cons LPAREN empty)))",
        "(lam (lam (fn_1 (fn_1 empty '.' $0) '.' $1)))",
        "(lam (lam (fn_1 (cons (index 0 $0) (cons '.' empty)) '.' $1)))",
        "(lam (fn_0 $0))",
        "(lam (lam (fold $1 (map (lam $0) $0) (lam (lam (cons $1 $0))))))",
        "(lam (fn_0 $0))",
        "(lam (lam (fold $1 (map (lam $0) $0) (lam (lam (cons $1 $0))))))",
        "(fn_0 STRING)",
        "(lam (fold STRING (map (lam $0) $0) (lam (lam (cons $1 $0)))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (if (char-eq? $0 '.') RPAREN $0)) $0))",
        "(lambda (map (lambda (if (char-eq? '.' $0) RPAREN $0)) $0))",
        "(lambda (unfold $0 (lambda (char-eq? (car $0) ',')) (lambda (car $0)) (lambda (cdr $0))))",
        "(lambda (map (lambda (index $0 $1)) (range (fold (cdr $0) 0 (lambda (lambda (+ (if (char-eq? $1 ',') 0 $0) 1)))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (- (length $0) 1))))",
        "(lambda (map (lambda (index $0 $1)) (range (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))))))",
        "(lambda (map (lambda (index $0 $1)) (range (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1))))",
        "(lambda (#(lambda (lambda (lambda (cons (car $0) (cons $1 $2))))) empty LPAREN $0))",
        "(lambda (cons (index 0 $0) (cons LPAREN empty)))",
        "(lambda (lambda (#(lambda (lambda (lambda (cons (car $0) (cons $1 $2))))) (#(lambda (lambda (lambda (cons (car $0) (cons $1 $2))))) empty '.' $0) '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (cons (car $0) (cons $1 $2))))) (cons (index 0 $0) (cons '.' empty)) '.' $1)))",
        "(lambda (fn_0 $0))",
        "(lambda (lambda (fold $1 (map (lambda $0) $0) (lambda (lambda (cons $1 $0))))))",
        "(lambda (fn_0 $0))",
        "(lambda (lambda (fold $1 (map (lambda $0) $0) (lambda (lambda (cons $1 $0))))))",
        "(fn_0 STRING)",
        "(lambda (fold STRING (map (lambda $0) $0) (lambda (lambda (cons $1 $0)))))"
      ],
      "utility": 301,
      "expected_cost": 6775,
      "final_cost": 6775,
      "multiplier": 1.0894464944649447,
      "multiplier_wrt_orig": 1.2696678966789667,
      "num_uses": 4,
      "uses": [
        {
          "fn_1 empty '.' $0": "(cons (car $0) (cons '.' empty))"
        },
        {
          "fn_1 empty LPAREN $0": "(cons (car $0) (cons LPAREN empty))"
        },
        {
          "fn_1 (cons (car $0) (cons '.' empty)) '.' $1": "(cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))"
        },
        {
          "fn_1 (cons (index 0 $0) (cons '.' empty)) '.' $1": "(cons (car $1) (cons '.' (cons (index 0 $0) (cons '.' empty))))"
        }
      ]
    },
    {
      "body": "(lam (fn_0 $0))",
      "dreamcoder": "#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0))",
      "arity": 0,
      "name": "fn_2",
      "rewritten": [
        "(lam (map (lam (if (char-eq? $0 '.') RPAREN $0)) $0))",
        "(lam (map (lam (if (char-eq? '.' $0) RPAREN $0)) $0))",
        "(lam (unfold $0 (lam (char-eq? (car $0) ',')) (lam (car $0)) (lam (cdr $0))))",
        "(lam (map (lam (index $0 $1)) (range (fold (cdr $0) 0 (lam (lam (+ (if (char-eq? $1 ',') 0 $0) 1)))))))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
        "(lam (map (lam (index $0 $1)) (range (- (length $0) 1))))",
        "(lam (map (lam (index $0 $1)) (range (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))))))",
        "(lam (map (lam (index $0 $1)) (range (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1))))",
        "(lam (fn_1 empty LPAREN $0))",
        "(lam (cons (index 0 $0) (cons LPAREN empty)))",
        "(lam (lam (fn_1 (fn_1 empty '.' $0) '.' $1)))",
        "(lam (lam (fn_1 (cons (index 0 $0) (cons '.' empty)) '.' $1)))",
        "fn_2",
        "(lam (lam (fold $1 (map (lam $0) $0) (lam (lam (cons $1 $0))))))",
        "fn_2",
        "(lam (lam (fold $1 (map (lam $0) $0) (lam (lam (cons $1 $0))))))",
        "(fn_0 STRING)",
        "(lam (fold STRING (map (lam $0) $0) (lam (lam (cons $1 $0)))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (if (char-eq? $0 '.') RPAREN $0)) $0))",
        "(lambda (map (lambda (if (char-eq? '.' $0) RPAREN $0)) $0))",
        "(lambda (unfold $0 (lambda (char-eq? (car $0) ',')) (lambda (car $0)) (lambda (cdr $0))))",
        "(lambda (map (lambda (index $0 $1)) (range (fold (cdr $0) 0 (lambda (lambda (+ (if (char-eq? $1 ',') 0 $0) 1)))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (- (length $0) 1))))",
        "(lambda (map (lambda (index $0 $1)) (range (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))))))",
        "(lambda (map (lambda (index $0 $1)) (range (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1))))",
        "(lambda (fn_1 empty LPAREN $0))",
        "(lambda (cons (index 0 $0) (cons LPAREN empty)))",
        "(lambda (lambda (fn_1 (fn_1 empty '.' $0) '.' $1)))",
        "(lambda (lambda (fn_1 (cons (index 0 $0) (cons '.' empty)) '.' $1)))",
        "#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0))",
        "(lambda (lambda (fold $1 (map (lambda $0) $0) (lambda (lambda (cons $1 $0))))))",
        "#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0))",
        "(lambda (lambda (fold $1 (map (lambda $0) $0) (lambda (lambda (cons $1 $0))))))",
        "(fn_0 STRING)",
        "(lambda (fold STRING (map (lambda $0) $0) (lambda (lambda (cons $1 $0)))))"
      ],
      "utility": 2,
      "expected_cost": 6571,
      "final_cost": 6571,
      "multiplier": 1.031045502967585,
      "multiplier_wrt_orig": 1.3090853751331608,
      "num_uses": 2,
      "uses": [
        {
          "fn_2 ": "(lam (fn_0 $0))"
        }
      ]
    }
  ]
}