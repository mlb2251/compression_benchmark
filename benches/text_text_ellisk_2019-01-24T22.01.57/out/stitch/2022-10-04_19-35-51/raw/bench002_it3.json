{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T22.01.57/bench002_it3.json --max-arity=3 --threads=1 --iterations=3 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T22.01.57/out/stitch/2022-10-04_19-35-51/raw/bench002_it3.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T22.01.57/bench002_it3.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T22.01.57/out/stitch/2022-10-04_19-35-51/raw/bench002_it3.json",
    "iterations": 3,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 36804,
  "original": [
    "(lam (map (lam (if (char-eq? $0 '.') RPAREN $0)) $0))",
    "(lam (map (lam (if (char-eq? '.' $0) RPAREN $0)) $0))",
    "(lam (map (lam (if (char-eq? $0 '-') SPACE $0)) $0))",
    "(lam (map (lam (if (char-eq? '-' $0) SPACE $0)) $0))",
    "(lam (prev_dc_inv_3 $0 '.'))",
    "(lam (prev_dc_inv_3 $0 (fold (cdr $0) RPAREN (lam (lam '.')))))",
    "(lam (prev_dc_inv_3 $0 ','))",
    "(lam (prev_dc_inv_1 (fold (cdr $0) 1 (lam (lam (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
    "(lam (prev_dc_inv_3 $0 SPACE))",
    "(lam (prev_dc_inv_3 $0 (if (char-eq? (car $0) ',') RPAREN SPACE)))",
    "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
    "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
    "(lam (prev_dc_inv_1 (length (cdr $0)) $0))",
    "(lam (prev_dc_inv_1 (- (length $0) 1) $0))",
    "(lam (prev_dc_inv_1 (length (cdr (cdr (cdr $0)))) $0))",
    "(lam (prev_dc_inv_1 (- (length (cdr (cdr $0))) 1) $0))",
    "(lam (prev_dc_inv_1 (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))) $0))",
    "(lam (prev_dc_inv_1 (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
    "(lam (prev_dc_inv_0 $0 ','))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_1 1 $0) ','))",
    "(lam (prev_dc_inv_0 $0 LPAREN))",
    "(lam (cons (car $0) (map (lam LPAREN) (range 1))))",
    "(lam (lam (prev_dc_inv_4 $0 $1)))",
    "(lam (lam (prev_dc_inv_2 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 $1 '.'))))",
    "(lam (lam (prev_dc_inv_4 $0 $1)))",
    "(lam (lam (prev_dc_inv_4 $0 (prev_dc_inv_1 1 $1))))",
    "(lam (lam (prev_dc_inv_4 $0 $1)))",
    "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
    "(lam (prev_dc_inv_4 (cons (index (length (prev_dc_inv_3 (cons '.' $0) RPAREN)) $0) $0) $0))",
    "(lam (prev_dc_inv_4 (cons (index (length (prev_dc_inv_3 (prev_dc_inv_2 $0 $0) RPAREN)) (cdr $0)) $0) $0))",
    "(lam (lam (prev_dc_inv_2 $0 $1)))",
    "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_2 $0 $1)))",
    "(lam (lam (prev_dc_inv_2 (map (lam $0) $0) $1)))",
    "(lam (lam (prev_dc_inv_2 $0 $1)))",
    "(lam (lam (prev_dc_inv_2 (map (lam $0) $0) $1)))",
    "(lam (prev_dc_inv_2 $0 STRING))",
    "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
    "(lam (prev_dc_inv_2 $0 STRING))",
    "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
    "(lam (prev_dc_inv_2 (prev_dc_inv_3 $0 SPACE) STRING))",
    "(lam (prev_dc_inv_3 (prev_dc_inv_2 $0 STRING) SPACE))",
    "(lam (prev_dc_inv_2 (cons RPAREN empty) (cons LPAREN $0)))",
    "(lam (cons LPAREN (prev_dc_inv_2 (cons RPAREN empty) $0)))",
    "(lam (prev_dc_inv_2 (cons RPAREN empty) (cons LPAREN $0)))",
    "(lam (cons LPAREN (prev_dc_inv_2 (cons RPAREN empty) $0)))",
    "(lam (prev_dc_inv_2 (cons RPAREN empty) (cons LPAREN $0)))",
    "(lam (cons LPAREN (prev_dc_inv_2 (cons RPAREN empty) $0)))",
    "(lam (prev_dc_inv_2 (fold (cdr $0) empty (lam (lam (if (char-eq? (car $2) $1) STRING $0)))) $0))",
    "(lam (prev_dc_inv_2 (fold (cdr $0) empty (lam (lam (if (char-eq? (fold (cdr (cdr $2)) '-' (lam (lam (if (char-eq? $1 $3) SPACE $0)))) '-') STRING $0)))) $0))",
    "(lam (prev_dc_inv_2 (fold (cdr $0) empty (lam (lam (if (char-eq? (fold (cdr (cdr $2)) '-' (lam (lam (if (char-eq? $3 $1) SPACE $0)))) '-') STRING $0)))) $0))"
  ],
  "invs": [
    {
      "body": "(lam (prev_dc_inv_2 (cons RPAREN empty) (cons LPAREN $0)))",
      "dreamcoder": "#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0)))",
      "arity": 0,
      "name": "fn_5",
      "rewritten": [
        "(lam (map (lam (if (char-eq? $0 '.') RPAREN $0)) $0))",
        "(lam (map (lam (if (char-eq? '.' $0) RPAREN $0)) $0))",
        "(lam (map (lam (if (char-eq? $0 '-') SPACE $0)) $0))",
        "(lam (map (lam (if (char-eq? '-' $0) SPACE $0)) $0))",
        "(lam (prev_dc_inv_3 $0 '.'))",
        "(lam (prev_dc_inv_3 $0 (fold (cdr $0) RPAREN (lam (lam '.')))))",
        "(lam (prev_dc_inv_3 $0 ','))",
        "(lam (prev_dc_inv_1 (fold (cdr $0) 1 (lam (lam (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
        "(lam (prev_dc_inv_3 $0 SPACE))",
        "(lam (prev_dc_inv_3 $0 (if (char-eq? (car $0) ',') RPAREN SPACE)))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lam (prev_dc_inv_1 (length (cdr $0)) $0))",
        "(lam (prev_dc_inv_1 (- (length $0) 1) $0))",
        "(lam (prev_dc_inv_1 (length (cdr (cdr (cdr $0)))) $0))",
        "(lam (prev_dc_inv_1 (- (length (cdr (cdr $0))) 1) $0))",
        "(lam (prev_dc_inv_1 (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))) $0))",
        "(lam (prev_dc_inv_1 (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
        "(lam (prev_dc_inv_0 $0 ','))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_1 1 $0) ','))",
        "(lam (prev_dc_inv_0 $0 LPAREN))",
        "(lam (cons (car $0) (map (lam LPAREN) (range 1))))",
        "(lam (lam (prev_dc_inv_4 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 $1 '.'))))",
        "(lam (lam (prev_dc_inv_4 $0 $1)))",
        "(lam (lam (prev_dc_inv_4 $0 (prev_dc_inv_1 1 $1))))",
        "(lam (lam (prev_dc_inv_4 $0 $1)))",
        "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (prev_dc_inv_4 (cons (index (length (prev_dc_inv_3 (cons '.' $0) RPAREN)) $0) $0) $0))",
        "(lam (prev_dc_inv_4 (cons (index (length (prev_dc_inv_3 (prev_dc_inv_2 $0 $0) RPAREN)) (cdr $0)) $0) $0))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 (map (lam $0) $0) $1)))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 (map (lam $0) $0) $1)))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_3 $0 SPACE) STRING))",
        "(lam (prev_dc_inv_3 (prev_dc_inv_2 $0 STRING) SPACE))",
        "fn_5",
        "(lam (cons LPAREN (prev_dc_inv_2 (cons RPAREN empty) $0)))",
        "fn_5",
        "(lam (cons LPAREN (prev_dc_inv_2 (cons RPAREN empty) $0)))",
        "fn_5",
        "(lam (cons LPAREN (prev_dc_inv_2 (cons RPAREN empty) $0)))",
        "(lam (prev_dc_inv_2 (fold (cdr $0) empty (lam (lam (if (char-eq? (car $2) $1) STRING $0)))) $0))",
        "(lam (prev_dc_inv_2 (fold (cdr $0) empty (lam (lam (if (char-eq? (fold (cdr (cdr $2)) '-' (lam (lam (if (char-eq? $1 $3) SPACE $0)))) '-') STRING $0)))) $0))",
        "(lam (prev_dc_inv_2 (fold (cdr $0) empty (lam (lam (if (char-eq? (fold (cdr (cdr $2)) '-' (lam (lam (if (char-eq? $3 $1) SPACE $0)))) '-') STRING $0)))) $0))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (if (char-eq? $0 '.') RPAREN $0)) $0))",
        "(lambda (map (lambda (if (char-eq? '.' $0) RPAREN $0)) $0))",
        "(lambda (map (lambda (if (char-eq? $0 '-') SPACE $0)) $0))",
        "(lambda (map (lambda (if (char-eq? '-' $0) SPACE $0)) $0))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '.'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 (fold (cdr $0) RPAREN (lambda (lambda '.')))))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 ','))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (fold (cdr $0) 1 (lambda (lambda (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 (if (char-eq? (car $0) ',') RPAREN SPACE)))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (cdr $0)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (length $0) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (cdr (cdr (cdr $0)))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (length (cdr (cdr $0))) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $0) ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 LPAREN))",
        "(lambda (cons (car $0) (map (lambda LPAREN) (range 1))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $1))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 $1)))",
        "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (cons (index (length (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (cons '.' $0) RPAREN)) $0) $0) $0))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (cons (index (length (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) RPAREN)) (cdr $0)) $0) $0))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE) STRING))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING) SPACE))",
        "#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $0) empty (lambda (lambda (if (char-eq? (car $2) $1) STRING $0)))) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $0) empty (lambda (lambda (if (char-eq? (fold (cdr (cdr $2)) '-' (lambda (lambda (if (char-eq? $1 $3) SPACE $0)))) '-') STRING $0)))) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $0) empty (lambda (lambda (if (char-eq? (fold (cdr (cdr $2)) '-' (lambda (lambda (if (char-eq? $3 $1) SPACE $0)))) '-') STRING $0)))) $0))"
      ],
      "utility": 1114,
      "expected_cost": 14456,
      "final_cost": 14456,
      "multiplier": 1.1259684560044272,
      "multiplier_wrt_orig": 1.1259684560044272,
      "num_uses": 3,
      "uses": [
        {
          "fn_5 ": "(lam (prev_dc_inv_2 (cons RPAREN empty) (cons LPAREN $0)))"
        }
      ]
    },
    {
      "body": "(lam (lam (#0 $0 $1)))",
      "dreamcoder": "#(lambda (lambda (lambda ($2 $0 $1))))",
      "arity": 1,
      "name": "fn_6",
      "rewritten": [
        "(lam (map (lam (if (char-eq? $0 '.') RPAREN $0)) $0))",
        "(lam (map (lam (if (char-eq? '.' $0) RPAREN $0)) $0))",
        "(lam (map (lam (if (char-eq? $0 '-') SPACE $0)) $0))",
        "(lam (map (lam (if (char-eq? '-' $0) SPACE $0)) $0))",
        "(lam (prev_dc_inv_3 $0 '.'))",
        "(lam (prev_dc_inv_3 $0 (fold (cdr $0) RPAREN (lam (lam '.')))))",
        "(lam (prev_dc_inv_3 $0 ','))",
        "(lam (prev_dc_inv_1 (fold (cdr $0) 1 (lam (lam (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
        "(lam (prev_dc_inv_3 $0 SPACE))",
        "(lam (prev_dc_inv_3 $0 (if (char-eq? (car $0) ',') RPAREN SPACE)))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lam (prev_dc_inv_1 (length (cdr $0)) $0))",
        "(lam (prev_dc_inv_1 (- (length $0) 1) $0))",
        "(lam (prev_dc_inv_1 (length (cdr (cdr (cdr $0)))) $0))",
        "(lam (prev_dc_inv_1 (- (length (cdr (cdr $0))) 1) $0))",
        "(lam (prev_dc_inv_1 (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))) $0))",
        "(lam (prev_dc_inv_1 (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
        "(lam (prev_dc_inv_0 $0 ','))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_1 1 $0) ','))",
        "(lam (prev_dc_inv_0 $0 LPAREN))",
        "(lam (cons (car $0) (map (lam LPAREN) (range 1))))",
        "(fn_6 prev_dc_inv_4)",
        "(lam (lam (prev_dc_inv_2 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 $1 '.'))))",
        "(fn_6 prev_dc_inv_4)",
        "(lam (lam (prev_dc_inv_4 $0 (prev_dc_inv_1 1 $1))))",
        "(fn_6 prev_dc_inv_4)",
        "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (prev_dc_inv_4 (cons (index (length (prev_dc_inv_3 (cons '.' $0) RPAREN)) $0) $0) $0))",
        "(lam (prev_dc_inv_4 (cons (index (length (prev_dc_inv_3 (prev_dc_inv_2 $0 $0) RPAREN)) (cdr $0)) $0) $0))",
        "(fn_6 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
        "(fn_6 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 (map (lam $0) $0) $1)))",
        "(fn_6 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 (map (lam $0) $0) $1)))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_3 $0 SPACE) STRING))",
        "(lam (prev_dc_inv_3 (prev_dc_inv_2 $0 STRING) SPACE))",
        "fn_5",
        "(lam (cons LPAREN (prev_dc_inv_2 (cons RPAREN empty) $0)))",
        "fn_5",
        "(lam (cons LPAREN (prev_dc_inv_2 (cons RPAREN empty) $0)))",
        "fn_5",
        "(lam (cons LPAREN (prev_dc_inv_2 (cons RPAREN empty) $0)))",
        "(lam (prev_dc_inv_2 (fold (cdr $0) empty (lam (lam (if (char-eq? (car $2) $1) STRING $0)))) $0))",
        "(lam (prev_dc_inv_2 (fold (cdr $0) empty (lam (lam (if (char-eq? (fold (cdr (cdr $2)) '-' (lam (lam (if (char-eq? $1 $3) SPACE $0)))) '-') STRING $0)))) $0))",
        "(lam (prev_dc_inv_2 (fold (cdr $0) empty (lam (lam (if (char-eq? (fold (cdr (cdr $2)) '-' (lam (lam (if (char-eq? $3 $1) SPACE $0)))) '-') STRING $0)))) $0))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (if (char-eq? $0 '.') RPAREN $0)) $0))",
        "(lambda (map (lambda (if (char-eq? '.' $0) RPAREN $0)) $0))",
        "(lambda (map (lambda (if (char-eq? $0 '-') SPACE $0)) $0))",
        "(lambda (map (lambda (if (char-eq? '-' $0) SPACE $0)) $0))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '.'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 (fold (cdr $0) RPAREN (lambda (lambda '.')))))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 ','))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (fold (cdr $0) 1 (lambda (lambda (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 (if (char-eq? (car $0) ',') RPAREN SPACE)))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (cdr $0)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (length $0) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (cdr (cdr (cdr $0)))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (length (cdr (cdr $0))) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $0) ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 LPAREN))",
        "(lambda (cons (car $0) (map (lambda LPAREN) (range 1))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $1))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))))",
        "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (cons (index (length (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (cons '.' $0) RPAREN)) $0) $0) $0))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (cons (index (length (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) RPAREN)) (cdr $0)) $0) $0))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE) STRING))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING) SPACE))",
        "fn_5",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "fn_5",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "fn_5",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $0) empty (lambda (lambda (if (char-eq? (car $2) $1) STRING $0)))) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $0) empty (lambda (lambda (if (char-eq? (fold (cdr (cdr $2)) '-' (lambda (lambda (if (char-eq? $1 $3) SPACE $0)))) '-') STRING $0)))) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $0) empty (lambda (lambda (if (char-eq? (fold (cdr (cdr $2)) '-' (lambda (lambda (if (char-eq? $3 $1) SPACE $0)))) '-') STRING $0)))) $0))"
      ],
      "utility": 414,
      "expected_cost": 13838,
      "final_cost": 13838,
      "multiplier": 1.044659632894927,
      "multiplier_wrt_orig": 1.1762537939008528,
      "num_uses": 6,
      "uses": [
        {
          "fn_6 prev_dc_inv_2": "(lam (lam (prev_dc_inv_2 $0 $1)))"
        },
        {
          "fn_6 prev_dc_inv_4": "(lam (lam (prev_dc_inv_4 $0 $1)))"
        }
      ]
    },
    {
      "body": "(lam (map (lam (if (char-eq? #1 $0) #0 $0)) $0))",
      "dreamcoder": "#(lambda (lambda (lambda (map (lambda (if (char-eq? $2 $0) $3 $0)) $0))))",
      "arity": 2,
      "name": "fn_7",
      "rewritten": [
        "(lam (map (lam (if (char-eq? $0 '.') RPAREN $0)) $0))",
        "(fn_7 RPAREN '.')",
        "(lam (map (lam (if (char-eq? $0 '-') SPACE $0)) $0))",
        "(fn_7 SPACE '-')",
        "(lam (prev_dc_inv_3 $0 '.'))",
        "(lam (prev_dc_inv_3 $0 (fold (cdr $0) RPAREN (lam (lam '.')))))",
        "(lam (prev_dc_inv_3 $0 ','))",
        "(lam (prev_dc_inv_1 (fold (cdr $0) 1 (lam (lam (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
        "(lam (prev_dc_inv_3 $0 SPACE))",
        "(lam (prev_dc_inv_3 $0 (if (char-eq? (car $0) ',') RPAREN SPACE)))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lam (prev_dc_inv_1 (length (cdr $0)) $0))",
        "(lam (prev_dc_inv_1 (- (length $0) 1) $0))",
        "(lam (prev_dc_inv_1 (length (cdr (cdr (cdr $0)))) $0))",
        "(lam (prev_dc_inv_1 (- (length (cdr (cdr $0))) 1) $0))",
        "(lam (prev_dc_inv_1 (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))) $0))",
        "(lam (prev_dc_inv_1 (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
        "(lam (prev_dc_inv_0 $0 ','))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_1 1 $0) ','))",
        "(lam (prev_dc_inv_0 $0 LPAREN))",
        "(lam (cons (car $0) (map (lam LPAREN) (range 1))))",
        "(fn_6 prev_dc_inv_4)",
        "(lam (lam (prev_dc_inv_2 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 $1 '.'))))",
        "(fn_6 prev_dc_inv_4)",
        "(lam (lam (prev_dc_inv_4 $0 (prev_dc_inv_1 1 $1))))",
        "(fn_6 prev_dc_inv_4)",
        "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (prev_dc_inv_4 (cons (index (length (prev_dc_inv_3 (cons '.' $0) RPAREN)) $0) $0) $0))",
        "(lam (prev_dc_inv_4 (cons (index (length (prev_dc_inv_3 (prev_dc_inv_2 $0 $0) RPAREN)) (cdr $0)) $0) $0))",
        "(fn_6 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
        "(fn_6 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 (map (lam $0) $0) $1)))",
        "(fn_6 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 (map (lam $0) $0) $1)))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_3 $0 SPACE) STRING))",
        "(lam (prev_dc_inv_3 (prev_dc_inv_2 $0 STRING) SPACE))",
        "fn_5",
        "(lam (cons LPAREN (prev_dc_inv_2 (cons RPAREN empty) $0)))",
        "fn_5",
        "(lam (cons LPAREN (prev_dc_inv_2 (cons RPAREN empty) $0)))",
        "fn_5",
        "(lam (cons LPAREN (prev_dc_inv_2 (cons RPAREN empty) $0)))",
        "(lam (prev_dc_inv_2 (fold (cdr $0) empty (lam (lam (if (char-eq? (car $2) $1) STRING $0)))) $0))",
        "(lam (prev_dc_inv_2 (fold (cdr $0) empty (lam (lam (if (char-eq? (fold (cdr (cdr $2)) '-' (lam (lam (if (char-eq? $1 $3) SPACE $0)))) '-') STRING $0)))) $0))",
        "(lam (prev_dc_inv_2 (fold (cdr $0) empty (lam (lam (if (char-eq? (fold (cdr (cdr $2)) '-' (lam (lam (if (char-eq? $3 $1) SPACE $0)))) '-') STRING $0)))) $0))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (if (char-eq? $0 '.') RPAREN $0)) $0))",
        "(#(lambda (lambda (lambda (map (lambda (if (char-eq? $2 $0) $3 $0)) $0)))) RPAREN '.')",
        "(lambda (map (lambda (if (char-eq? $0 '-') SPACE $0)) $0))",
        "(#(lambda (lambda (lambda (map (lambda (if (char-eq? $2 $0) $3 $0)) $0)))) SPACE '-')",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 '.'))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 (fold (cdr $0) RPAREN (lambda (lambda '.')))))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 ','))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (fold (cdr $0) 1 (lambda (lambda (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 (if (char-eq? (car $0) ',') RPAREN SPACE)))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (cdr $0)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (length $0) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (cdr (cdr (cdr $0)))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (length (cdr (cdr $0))) 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $0) ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 LPAREN))",
        "(lambda (cons (car $0) (map (lambda LPAREN) (range 1))))",
        "(fn_6 #(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
        "(fn_6 #(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) $0 (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $1))))",
        "(fn_6 #(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))))",
        "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (cons (index (length (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (cons '.' $0) RPAREN)) $0) $0) $0))",
        "(lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (cons (index (length (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) RPAREN)) (cdr $0)) $0) $0))",
        "(fn_6 #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(fn_6 #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "(fn_6 #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $0 SPACE) STRING))",
        "(lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING) SPACE))",
        "fn_5",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "fn_5",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "fn_5",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $0) empty (lambda (lambda (if (char-eq? (car $2) $1) STRING $0)))) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $0) empty (lambda (lambda (if (char-eq? (fold (cdr (cdr $2)) '-' (lambda (lambda (if (char-eq? $1 $3) SPACE $0)))) '-') STRING $0)))) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $0) empty (lambda (lambda (if (char-eq? (fold (cdr (cdr $2)) '-' (lambda (lambda (if (char-eq? $3 $1) SPACE $0)))) '-') STRING $0)))) $0))"
      ],
      "utility": 405,
      "expected_cost": 12824,
      "final_cost": 12824,
      "multiplier": 1.0790704928259514,
      "multiplier_wrt_orig": 1.2692607610729882,
      "num_uses": 2,
      "uses": [
        {
          "fn_7 SPACE '-'": "(lam (map (lam (if (char-eq? '-' $0) SPACE $0)) $0))"
        },
        {
          "fn_7 RPAREN '.'": "(lam (map (lam (if (char-eq? '.' $0) RPAREN $0)) $0))"
        }
      ]
    }
  ]
}