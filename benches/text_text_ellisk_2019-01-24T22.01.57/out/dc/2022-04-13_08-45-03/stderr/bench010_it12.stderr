Stitch mode: none
Will write compression messages to cm_out_dir:  compressionMessages
Compression backend will run for most 20 iterations
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Total number of candidates: 55136
Constructed version spaces and coalesced candidates in 1.23162m.
Timing point -1 right before normalizing: 1.36578m.
Trimmed down the beam, have only 296 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 1.36584m.
Timing Comparison Point A (vspace+beam) (millis): 81950
Rewrote topK in 1.23769m.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 1.23769m.
sanity check for timing comparison, should be same as comparison point: 2.60353m.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 156211
Initial score: -1255.562259
Initial language score: 0.000000
Initial joint score: -1255.562259 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 6.57156s.
Best MDL score: -1254.835106 with (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $1 $0) $0))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty $0 $1) $0)))
Scored candidates with language and grammar in 6.31071s.
Best joint score: -1254.835106 with (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $1 $0) $0))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty $0 $1) $0)))
Timing point 3 (all scoring): 12.9211s.
Improved score to -1254.835106 (dScore=0.727152) w/ new primitive
	#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $1 $0) $0))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty $0 $1) $0))) : list(char) -> char -> list(char)
rewrote all of the frontiers in 49.5641s.
Timing point 4 (rewrite final frontiers): 49.5641s.
Completed one step of memory consolidation in 3.64543m.
New primitive is used 3 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $1 $0) $0))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty $0 $1) $0))) $0 '.'))
  (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $1 $0) $0))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty $0 $1) $0))) $0 ','))
  (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $1 $0) $0))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty $0 $1) $0))) $0 SPACE))
Total number of candidates: 54471
Constructed version spaces and coalesced candidates in 1.27851m.
Timing point -1 right before normalizing: 1.42069m.
Trimmed down the beam, have only 300 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 1.42072m.
Timing Comparison Point A (vspace+beam) (millis): 85243
Rewrote topK in 1.22552m.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 1.22553m.
sanity check for timing comparison, should be same as comparison point: 2.64625m.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 158774
Initial score: -1254.850145
Initial language score: 0.000000
Initial joint score: -1254.850145 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 6.75426s.
Best MDL score: -1258.271783 with (lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $1 $0) $1)))
No improvement possible with MDL.
Scored candidates with language and grammar in 6.98468s.
Best joint score: -1258.271783 with (lambda (lambda (#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))) (#(lambda (lambda (fold (#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0))))) $1 $0) (cdr $1) (lambda (lambda (cdr $0)))))) $1 $0) $1)))
Timing point 3 (all scoring): 13.7843s.
No improvement possible with joint score.
Completed one step of memory consolidation in 2.876m.
completed ocaml compression in 6.52173m.
	Command being timed: "/scratch/mlbowers/proj/stitch/experiments/compression benches/text_text_ellisk_2019-01-24T22.01.57/bench010_it12.json"
	User time (seconds): 47.24
	System time (seconds): 0.85
	Percent of CPU this job got: 12%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 6:31.38
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 1112896
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 1026433
	Voluntary context switches: 377
	Involuntary context switches: 4754
	Swaps: 0
	File system inputs: 0
	File system outputs: 216
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
