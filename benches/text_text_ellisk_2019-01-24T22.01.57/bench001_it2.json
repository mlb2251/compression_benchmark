{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.341695,
        "productions": [
            {
                "expression": "char-eq?",
                "logProbability": -0.056708
            },
            {
                "expression": "empty?",
                "logProbability": -0.152018
            },
            {
                "expression": "length",
                "logProbability": -0.157753
            },
            {
                "expression": "1",
                "logProbability": -0.169098
            },
            {
                "expression": "+",
                "logProbability": -0.20982
            },
            {
                "expression": "-",
                "logProbability": -0.214451
            },
            {
                "expression": "0",
                "logProbability": -0.216499
            },
            {
                "expression": "range",
                "logProbability": -0.314893
            },
            {
                "expression": "'.'",
                "logProbability": -0.330514
            },
            {
                "expression": "RPAREN",
                "logProbability": -0.361286
            },
            {
                "expression": "','",
                "logProbability": -0.393034
            },
            {
                "expression": "LPAREN",
                "logProbability": -0.393035
            },
            {
                "expression": "SPACE",
                "logProbability": -0.425823
            },
            {
                "expression": "'-'",
                "logProbability": -0.425824
            },
            {
                "expression": "cdr",
                "logProbability": -0.686667
            },
            {
                "expression": "STRING",
                "logProbability": -0.781749
            },
            {
                "expression": "cons",
                "logProbability": -0.816552
            },
            {
                "expression": "map",
                "logProbability": -0.846954
            },
            {
                "expression": "unfold",
                "logProbability": -0.849564
            },
            {
                "expression": "empty",
                "logProbability": -0.881095
            },
            {
                "expression": "car",
                "logProbability": -1.062926
            },
            {
                "expression": "if",
                "logProbability": -1.086392
            },
            {
                "expression": "index",
                "logProbability": -1.115401
            },
            {
                "expression": "fold",
                "logProbability": -1.118099
            },
            {
                "expression": "#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0))))))",
                "logProbability": -0.785788
            },
            {
                "expression": "#(lambda (lambda (map (lambda (index $0 $1)) (range $1))))",
                "logProbability": -0.815346
            },
            {
                "expression": "#(lambda (lambda (cons (car $1) (cons $0 empty))))",
                "logProbability": -0.816565
            }
        ]
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "Replace '.' w/ ')'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (if (char-eq? $0 '.') RPAREN $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (if (char-eq? '.' $0) RPAREN $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=0) word delimited by '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (unfold $0 (lambda (char-eq? '.' (car $0))) (lambda (car $0)) (lambda (cdr $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (unfold $0 (lambda (char-eq? (car $0) '.')) (lambda (car $0)) (lambda (cdr $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=0) word delimited by ','",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (unfold $0 (lambda (char-eq? (car $0) ',')) (lambda (car $0)) (lambda (cdr $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (fold (cdr $0) 1 (lambda (lambda (+ (if (char-eq? $1 ',') 0 $0) 1)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=0) word delimited by ' '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (unfold $0 (lambda (char-eq? (car $0) SPACE)) (lambda (car $0)) (lambda (cdr $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (unfold $0 (lambda (char-eq? (car $0) SPACE)) (lambda (car $0)) (lambda (cdr (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "drop first word delimited by ')'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) $2 $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? $1 RPAREN) (cdr $2) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Drop last 1 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (cdr $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (length $0) 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Drop last 3 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (length (cdr (cdr (cdr $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- (length (cdr (cdr $0))) 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first 5 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (index 1 (cdr (cdr (cdr (cdr (range (length $0))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ (index 1 (cdr (cdr (cdr (range (length $0)))))) 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first character and append ','",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) 1 $0) ','))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first character and append '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 LPAREN))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (car $0) (map (lambda LPAREN) (range 1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate separate words (I)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate separate words (IIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 2 strings (III)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 2 strings (IIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend 'Hornak'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "parentheses around a single word (IIIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "ensure suffix `Andria`",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fold (cdr $0) empty (lambda (lambda (if (char-eq? (car $2) $1) STRING $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 2,
        "num_learned": 2,
        "new_grammar": {
            "logVariable": -0.458916,
            "productions": [
                {
                    "expression": "char-eq?",
                    "logProbability": -7.2e-05
                },
                {
                    "expression": "empty?",
                    "logProbability": -0.095382
                },
                {
                    "expression": "length",
                    "logProbability": -0.136509
                },
                {
                    "expression": "1",
                    "logProbability": -0.151325
                },
                {
                    "expression": "-",
                    "logProbability": -0.205562
                },
                {
                    "expression": "+",
                    "logProbability": -0.214912
                },
                {
                    "expression": "0",
                    "logProbability": -0.231818
                },
                {
                    "expression": "RPAREN",
                    "logProbability": -0.333116
                },
                {
                    "expression": "'.'",
                    "logProbability": -0.363885
                },
                {
                    "expression": "','",
                    "logProbability": -0.363889
                },
                {
                    "expression": "LPAREN",
                    "logProbability": -0.364135
                },
                {
                    "expression": "range",
                    "logProbability": -0.365336
                },
                {
                    "expression": "SPACE",
                    "logProbability": -0.395884
                },
                {
                    "expression": "'-'",
                    "logProbability": -0.428674
                },
                {
                    "expression": "cdr",
                    "logProbability": -0.905278
                },
                {
                    "expression": "STRING",
                    "logProbability": -1.047115
                },
                {
                    "expression": "cons",
                    "logProbability": -1.104544
                },
                {
                    "expression": "empty",
                    "logProbability": -1.104547
                },
                {
                    "expression": "map",
                    "logProbability": -1.121199
                },
                {
                    "expression": "unfold",
                    "logProbability": -1.1613
                },
                {
                    "expression": "if",
                    "logProbability": -1.313243
                },
                {
                    "expression": "fold",
                    "logProbability": -1.344013
                },
                {
                    "expression": "index",
                    "logProbability": -1.375762
                },
                {
                    "expression": "car",
                    "logProbability": -1.375762
                },
                {
                    "expression": "#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0))))))",
                    "logProbability": -1.007147
                },
                {
                    "expression": "#(lambda (lambda (unfold $1 (lambda (char-eq? (car $0) $1)) (lambda (car $0)) (lambda (cdr $0)))))",
                    "logProbability": -1.016343
                },
                {
                    "expression": "#(lambda (lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))))",
                    "logProbability": -1.047117
                },
                {
                    "expression": "#(lambda (lambda (map (lambda (index $0 $1)) (range $1))))",
                    "logProbability": -1.06569
                },
                {
                    "expression": "#(lambda (lambda (cons (car $1) (cons $0 empty))))",
                    "logProbability": -1.094354
                }
            ]
        }
    }
}