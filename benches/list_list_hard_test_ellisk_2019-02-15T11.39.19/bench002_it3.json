{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.430224,
        "productions": [
            {
                "expression": "eq?",
                "logProbability": -0.218259
            },
            {
                "expression": "is-prime",
                "logProbability": -0.222732
            },
            {
                "expression": "is-square",
                "logProbability": -0.230424
            },
            {
                "expression": "gt?",
                "logProbability": -0.252595
            },
            {
                "expression": "empty?",
                "logProbability": -0.284845
            },
            {
                "expression": "cdr",
                "logProbability": -0.632697
            },
            {
                "expression": "map",
                "logProbability": -0.702527
            },
            {
                "expression": "cons",
                "logProbability": -0.734333
            },
            {
                "expression": "range",
                "logProbability": -0.777476
            },
            {
                "expression": "empty",
                "logProbability": -0.826421
            },
            {
                "expression": "unfold",
                "logProbability": -0.828985
            },
            {
                "expression": "0",
                "logProbability": -0.836298
            },
            {
                "expression": "1",
                "logProbability": -0.896748
            },
            {
                "expression": "+",
                "logProbability": -0.952975
            },
            {
                "expression": "length",
                "logProbability": -0.95618
            },
            {
                "expression": "mod",
                "logProbability": -0.958718
            },
            {
                "expression": "-",
                "logProbability": -1.019377
            },
            {
                "expression": "*",
                "logProbability": -1.023947
            },
            {
                "expression": "fold",
                "logProbability": -1.357429
            },
            {
                "expression": "index",
                "logProbability": -1.369233
            },
            {
                "expression": "car",
                "logProbability": -1.377228
            },
            {
                "expression": "if",
                "logProbability": -1.388482
            },
            {
                "expression": "#(lambda (lambda (map (lambda (index $0 $2)) (range $0))))",
                "logProbability": -0.733693
            },
            {
                "expression": "#(lambda (+ 1 (+ 1 $0)))",
                "logProbability": -0.815892
            },
            {
                "expression": "#(#(lambda (+ 1 (+ 1 $0))) 1)",
                "logProbability": -0.873627
            }
        ]
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "add-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (+ #(#(lambda (+ 1 (+ 1 $0))) 1) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (+ $0 #(#(lambda (+ 1 (+ 1 $0))) 1))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-index-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 (cdr (cdr (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 #(#(lambda (+ 1 (+ 1 $0))) 1)))) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (cdr (cdr $0)) 1) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-k with k=0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 (range 1) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (cons 0 empty) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-k with k=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 (cons (#(lambda (+ 1 (+ 1 $0))) #(#(lambda (+ 1 (+ 1 $0))) 1)) empty) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (cons (#(lambda (+ 1 (+ 1 $0))) (mod #(#(lambda (+ 1 (+ 1 $0))) 1) (#(lambda (+ 1 (+ 1 $0))) #(#(lambda (+ 1 (+ 1 $0))) 1)))) empty) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (eq? #(#(lambda (+ 1 (+ 1 $0))) 1) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (eq? $0 #(#(lambda (+ 1 (+ 1 $0))) 1))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=3 and n=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (index $0 (cons #(#(lambda (+ 1 (+ 1 $0))) 1) (range $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index $0 (cons #(#(lambda (+ 1 (+ 1 $0))) 1) (range #(#(lambda (+ 1 (+ 1 $0))) 1))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=5 and n=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (mod (#(lambda (+ 1 (+ 1 $0))) $0) #(#(lambda (+ 1 (+ 1 $0))) 1))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (mod (#(lambda (+ 1 (+ 1 $0))) $0) (#(lambda (+ 1 (+ 1 $0))) 1))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "count-head-in-tail",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold (cdr $0) 0 (lambda (lambda (+ $0 (if (eq? $1 (car $2)) 1 0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold (cdr $0) 0 (lambda (lambda (if (eq? $1 (car $2)) (+ $0 1) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "has-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (is-square (fold $0 #(#(lambda (+ 1 (+ 1 $0))) 1) (lambda (lambda (mod $0 $1))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (eq? (fold $0 #(#(lambda (+ 1 (+ 1 $0))) 1) (lambda (lambda (mod $0 $1)))) 0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "index-k with k=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (car (cdr (cdr (cdr (cdr $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (index 1 (cdr (cdr (cdr $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "is-mod-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (is-prime (+ 1 (#(lambda (+ 1 (+ 1 $0))) (index (length $0) (cons 0 $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (is-prime (fold $0 (+ 1 1) (lambda (lambda (- $0 (mod $1 $0)))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "is-primes",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 (is-square 0) (lambda (lambda (if $0 (is-prime $1) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (is-square 1) (lambda (lambda (if $0 (is-prime $1) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "kth-largest with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $0 $1) $0 $1)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 0 (lambda (lambda (if (gt? $1 $0) $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "modulo-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda 0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (length empty)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "modulo-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (mod $0 (#(lambda (+ 1 (+ 1 $0))) 0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (mod (#(lambda (+ 1 (+ 1 $0))) $0) (#(lambda (+ 1 (+ 1 $0))) 0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "modulo-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (mod $0 (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (mod $0 (+ #(#(lambda (+ 1 (+ 1 $0))) 1) 1))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "modulo-k with k=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (mod $0 (#(lambda (+ 1 (+ 1 $0))) #(#(lambda (+ 1 (+ 1 $0))) 1)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 empty (lambda (lambda (cons (mod $1 (#(lambda (+ 1 (+ 1 $0))) #(#(lambda (+ 1 (+ 1 $0))) 1))) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "mult-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (+ $0 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (* $0 (#(lambda (+ 1 (+ 1 $0))) 0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "mult-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (* #(#(lambda (+ 1 (+ 1 $0))) 1) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (* $0 #(#(lambda (+ 1 (+ 1 $0))) 1))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "pop",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (length (cdr $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (- (length $0) 1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "prepend-index-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cons (car $0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (index 0 $0) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "prepend-index-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cons (index #(#(lambda (+ 1 (+ 1 $0))) 1) $0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (car (cdr (cdr (cdr $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "product",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 1 (lambda (lambda (* $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "remove-index-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cons (car $0) (cons (car (cdr $0)) (cons (car (cdr (cdr $0))) (cdr (cdr (cdr (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (car $0) (cons (car (cdr $0)) (cons (index (#(lambda (+ 1 (+ 1 $0))) 0) $0) (cdr (cdr (cdr (cdr $0))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "replace-all-with-index-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (car $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index 0 $1)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "replace-all-with-index-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (index #(#(lambda (+ 1 (+ 1 $0))) 1) $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index (#(lambda (+ 1 (+ 1 $0))) 1) $1)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=1 and n=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ #(#(lambda (+ 1 (+ 1 $0))) 1) 1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=2 and n=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cdr (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 #(#(lambda (+ 1 (+ 1 $0))) 1))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (cdr $0) (#(lambda (+ 1 (+ 1 $0))) 0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=3 and n=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cdr (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (cdr $0) (#(lambda (+ 1 (+ 1 $0))) #(#(lambda (+ 1 (+ 1 $0))) 1)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (cdr (cdr $0)) (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=4 and n=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (cdr (cdr (cdr $0))) #(#(lambda (+ 1 (+ 1 $0))) 1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cdr (cdr (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (cdr $0) (#(lambda (+ 1 (+ 1 $0))) #(#(lambda (+ 1 (+ 1 $0))) 1))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=5 and n=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (index (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) $0)) $1)) (range (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) $0)) $1)) (range (#(lambda (+ 1 (+ 1 $0))) (+ 1 1)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "take-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(lambda (+ 1 (+ 1 $0))) 0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(lambda (+ 1 (+ 1 $0))) (length empty))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "take-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ #(#(lambda (+ 1 (+ 1 $0))) 1) 1)))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 3,
        "num_learned": 5,
        "new_grammar": {
            "logVariable": -0.606186,
            "productions": [
                {
                    "expression": "eq?",
                    "logProbability": -0.214271
                },
                {
                    "expression": "is-prime",
                    "logProbability": -0.219599
                },
                {
                    "expression": "is-square",
                    "logProbability": -0.226527
                },
                {
                    "expression": "gt?",
                    "logProbability": -0.248891
                },
                {
                    "expression": "empty?",
                    "logProbability": -0.282114
                },
                {
                    "expression": "0",
                    "logProbability": -1.049049
                },
                {
                    "expression": "1",
                    "logProbability": -1.121862
                },
                {
                    "expression": "map",
                    "logProbability": -1.133033
                },
                {
                    "expression": "+",
                    "logProbability": -1.188598
                },
                {
                    "expression": "length",
                    "logProbability": -1.248012
                },
                {
                    "expression": "*",
                    "logProbability": -1.251561
                },
                {
                    "expression": "mod",
                    "logProbability": -1.252499
                },
                {
                    "expression": "cdr",
                    "logProbability": -1.257749
                },
                {
                    "expression": "cons",
                    "logProbability": -1.310203
                },
                {
                    "expression": "-",
                    "logProbability": -1.311484
                },
                {
                    "expression": "range",
                    "logProbability": -1.319174
                },
                {
                    "expression": "empty",
                    "logProbability": -1.376269
                },
                {
                    "expression": "unfold",
                    "logProbability": -1.423351
                },
                {
                    "expression": "fold",
                    "logProbability": -1.820873
                },
                {
                    "expression": "index",
                    "logProbability": -1.829395
                },
                {
                    "expression": "if",
                    "logProbability": -1.881322
                },
                {
                    "expression": "car",
                    "logProbability": -1.88738
                },
                {
                    "expression": "#(#(lambda (+ 1 (+ 1 $0))) 1)",
                    "logProbability": -0.987492
                },
                {
                    "expression": "#(lambda (+ 1 (+ 1 $0)))",
                    "logProbability": -1.043989
                },
                {
                    "expression": "#(lambda (cdr (cdr $0)))",
                    "logProbability": -1.17421
                },
                {
                    "expression": "#(lambda (lambda (map (lambda (index $0 $2)) (range $0))))",
                    "logProbability": -1.275229
                },
                {
                    "expression": "#(lambda (cons (car $0)))",
                    "logProbability": -1.279358
                },
                {
                    "expression": "#(lambda (map (lambda (mod $0 (#(lambda (+ 1 (+ 1 $0))) $1)))))",
                    "logProbability": -1.319834
                },
                {
                    "expression": "#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0))))))",
                    "logProbability": -1.328041
                },
                {
                    "expression": "#(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0))))",
                    "logProbability": -1.328246
                }
            ]
        }
    }
}