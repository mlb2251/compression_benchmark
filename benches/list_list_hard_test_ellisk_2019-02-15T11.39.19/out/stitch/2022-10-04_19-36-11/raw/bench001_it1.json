{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.39.19/bench001_it1.json --max-arity=3 --threads=1 --iterations=2 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.39.19/out/stitch/2022-10-04_19-36-11/raw/bench001_it1.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.39.19/bench001_it1.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.39.19/out/stitch/2022-10-04_19-36-11/raw/bench001_it1.json",
    "iterations": 2,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 24374,
  "original": [
    "(lam (map (lam (eq? $0 (prev_dc_inv_0 1))) $0))",
    "(lam (map (lam (eq? (prev_dc_inv_0 1) $0)) $0))",
    "(lam (fold (cdr $0) 0 (lam (lam (+ $0 (if (eq? $1 (car $2)) 1 0))))))",
    "(lam (fold (cdr $0) 0 (lam (lam (if (eq? $1 (car $2)) (+ $0 1) $0)))))",
    "(lam (is-square (fold $0 (prev_dc_inv_0 1) (lam (lam (mod $0 $1))))))",
    "(lam (empty? (range (fold $0 (prev_dc_inv_0 1) (lam (lam (mod $0 $1)))))))",
    "(lam (car (cdr (cdr (cdr (cdr $0))))))",
    "(lam (index 1 (cdr (cdr (cdr $0)))))",
    "(lam (is-prime (+ 1 (prev_dc_inv_0 (index (length $0) (cons 0 $0))))))",
    "(lam (is-prime (fold $0 (+ 1 1) (lam (lam (- $0 (mod $1 $0)))))))",
    "(lam (fold $0 (is-square 1) (lam (lam (if $0 (is-prime $1) $0)))))",
    "(lam (fold $0 (is-square 0) (lam (lam (if $0 (is-prime $1) $0)))))",
    "(lam (fold $0 1 (lam (lam (if (gt? $0 $1) $0 $1)))))",
    "(lam (fold $0 1 (lam (lam (if (gt? $1 $0) $1 $0)))))",
    "(lam (map (lam (mod $0 (prev_dc_inv_0 (prev_dc_inv_0 1)))) $0))",
    "(lam (fold $0 empty (lam (lam (cons (mod $1 (prev_dc_inv_0 (prev_dc_inv_0 1))) $0)))))",
    "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
    "(lam (map (lam (index $0 $1)) (range (- (length $0) 1))))",
    "(lam (cons (car $0) $0))",
    "(lam (cons (index 0 $0) $0))",
    "(lam (cons (index (prev_dc_inv_0 1) $0) $0))",
    "(lam (cons (car (cdr (cdr (cdr $0)))) $0))",
    "(lam (map (lam (car $1)) $0))",
    "(lam (map (lam (index 0 $1)) $0))",
    "(lam (cdr (map (lam (index $0 $1)) (range (prev_dc_inv_0 1)))))",
    "(lam (map (lam (index $0 $1)) (cdr (range (prev_dc_inv_0 1)))))",
    "(lam (map (lam (index (prev_dc_inv_0 (prev_dc_inv_0 $0)) $1)) (range (prev_dc_inv_0 (prev_dc_inv_0 0)))))",
    "(lam (map (lam (index (prev_dc_inv_0 (prev_dc_inv_0 $0)) $1)) (range (prev_dc_inv_0 (+ 1 1)))))",
    "(lam (map (lam (index $0 $1)) (range (prev_dc_inv_0 0))))",
    "(lam (map (lam (index $0 $1)) (range (+ 1 1))))"
  ],
  "invs": [
    {
      "body": "(map (lam (#1 $0 #0)))",
      "dreamcoder": "#(lambda (lambda (map (lambda ($1 $0 $2)))))",
      "arity": 2,
      "name": "fn_1",
      "rewritten": [
        "(lam (fn_1 (prev_dc_inv_0 1) eq? $0))",
        "(lam (map (lam (eq? (prev_dc_inv_0 1) $0)) $0))",
        "(lam (fold (cdr $0) 0 (lam (lam (+ $0 (if (eq? $1 (car $2)) 1 0))))))",
        "(lam (fold (cdr $0) 0 (lam (lam (if (eq? $1 (car $2)) (+ $0 1) $0)))))",
        "(lam (is-square (fold $0 (prev_dc_inv_0 1) (lam (lam (mod $0 $1))))))",
        "(lam (empty? (range (fold $0 (prev_dc_inv_0 1) (lam (lam (mod $0 $1)))))))",
        "(lam (car (cdr (cdr (cdr (cdr $0))))))",
        "(lam (index 1 (cdr (cdr (cdr $0)))))",
        "(lam (is-prime (+ 1 (prev_dc_inv_0 (index (length $0) (cons 0 $0))))))",
        "(lam (is-prime (fold $0 (+ 1 1) (lam (lam (- $0 (mod $1 $0)))))))",
        "(lam (fold $0 (is-square 1) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (fold $0 (is-square 0) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (fold $0 1 (lam (lam (if (gt? $0 $1) $0 $1)))))",
        "(lam (fold $0 1 (lam (lam (if (gt? $1 $0) $1 $0)))))",
        "(lam (fn_1 (prev_dc_inv_0 (prev_dc_inv_0 1)) mod $0))",
        "(lam (fold $0 empty (lam (lam (cons (mod $1 (prev_dc_inv_0 (prev_dc_inv_0 1))) $0)))))",
        "(lam (fn_1 $0 index (range (length (cdr $0)))))",
        "(lam (fn_1 $0 index (range (- (length $0) 1))))",
        "(lam (cons (car $0) $0))",
        "(lam (cons (index 0 $0) $0))",
        "(lam (cons (index (prev_dc_inv_0 1) $0) $0))",
        "(lam (cons (car (cdr (cdr (cdr $0)))) $0))",
        "(lam (map (lam (car $1)) $0))",
        "(lam (map (lam (index 0 $1)) $0))",
        "(lam (cdr (fn_1 $0 index (range (prev_dc_inv_0 1)))))",
        "(lam (fn_1 $0 index (cdr (range (prev_dc_inv_0 1)))))",
        "(lam (map (lam (index (prev_dc_inv_0 (prev_dc_inv_0 $0)) $1)) (range (prev_dc_inv_0 (prev_dc_inv_0 0)))))",
        "(lam (map (lam (index (prev_dc_inv_0 (prev_dc_inv_0 $0)) $1)) (range (prev_dc_inv_0 (+ 1 1)))))",
        "(lam (fn_1 $0 index (range (prev_dc_inv_0 0))))",
        "(lam (fn_1 $0 index (range (+ 1 1))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) (#(lambda (+ 1 (+ 1 $0))) 1) eq? $0))",
        "(lambda (map (lambda (eq? (#(lambda (+ 1 (+ 1 $0))) 1) $0)) $0))",
        "(lambda (fold (cdr $0) 0 (lambda (lambda (+ $0 (if (eq? $1 (car $2)) 1 0))))))",
        "(lambda (fold (cdr $0) 0 (lambda (lambda (if (eq? $1 (car $2)) (+ $0 1) $0)))))",
        "(lambda (is-square (fold $0 (#(lambda (+ 1 (+ 1 $0))) 1) (lambda (lambda (mod $0 $1))))))",
        "(lambda (empty? (range (fold $0 (#(lambda (+ 1 (+ 1 $0))) 1) (lambda (lambda (mod $0 $1)))))))",
        "(lambda (car (cdr (cdr (cdr (cdr $0))))))",
        "(lambda (index 1 (cdr (cdr (cdr $0)))))",
        "(lambda (is-prime (+ 1 (#(lambda (+ 1 (+ 1 $0))) (index (length $0) (cons 0 $0))))))",
        "(lambda (is-prime (fold $0 (+ 1 1) (lambda (lambda (- $0 (mod $1 $0)))))))",
        "(lambda (fold $0 (is-square 1) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (fold $0 (is-square 0) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1)))))",
        "(lambda (fold $0 1 (lambda (lambda (if (gt? $1 $0) $1 $0)))))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 1)) mod $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (mod $1 (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 1))) $0)))))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index (range (length (cdr $0)))))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index (range (- (length $0) 1))))",
        "(lambda (cons (car $0) $0))",
        "(lambda (cons (index 0 $0) $0))",
        "(lambda (cons (index (#(lambda (+ 1 (+ 1 $0))) 1) $0) $0))",
        "(lambda (cons (car (cdr (cdr (cdr $0)))) $0))",
        "(lambda (map (lambda (car $1)) $0))",
        "(lambda (map (lambda (index 0 $1)) $0))",
        "(lambda (cdr (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index (range (#(lambda (+ 1 (+ 1 $0))) 1)))))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index (cdr (range (#(lambda (+ 1 (+ 1 $0))) 1)))))",
        "(lambda (map (lambda (index (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) $0)) $1)) (range (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0)))))",
        "(lambda (map (lambda (index (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) $0)) $1)) (range (#(lambda (+ 1 (+ 1 $0))) (+ 1 1)))))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index (range (#(lambda (+ 1 (+ 1 $0))) 0))))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index (range (+ 1 1))))"
      ],
      "utility": 306,
      "expected_cost": 11120,
      "final_cost": 11120,
      "multiplier": 1.045863309352518,
      "multiplier_wrt_orig": 1.045863309352518,
      "num_uses": 8,
      "uses": [
        {
          "fn_1 (prev_dc_inv_0 1) eq?": "(map (lam (eq? $0 (prev_dc_inv_0 1))))"
        },
        {
          "fn_1 $0 index": "(map (lam (index $0 $1)))"
        },
        {
          "fn_1 (prev_dc_inv_0 (prev_dc_inv_0 1)) mod": "(map (lam (mod $0 (prev_dc_inv_0 (prev_dc_inv_0 1)))))"
        }
      ]
    },
    {
      "body": "(prev_dc_inv_0 1)",
      "dreamcoder": "#(#(lambda (+ 1 (+ 1 $0))) 1)",
      "arity": 0,
      "name": "fn_2",
      "rewritten": [
        "(lam (fn_1 fn_2 eq? $0))",
        "(lam (map (lam (eq? fn_2 $0)) $0))",
        "(lam (fold (cdr $0) 0 (lam (lam (+ $0 (if (eq? $1 (car $2)) 1 0))))))",
        "(lam (fold (cdr $0) 0 (lam (lam (if (eq? $1 (car $2)) (+ $0 1) $0)))))",
        "(lam (is-square (fold $0 fn_2 (lam (lam (mod $0 $1))))))",
        "(lam (empty? (range (fold $0 fn_2 (lam (lam (mod $0 $1)))))))",
        "(lam (car (cdr (cdr (cdr (cdr $0))))))",
        "(lam (index 1 (cdr (cdr (cdr $0)))))",
        "(lam (is-prime (+ 1 (prev_dc_inv_0 (index (length $0) (cons 0 $0))))))",
        "(lam (is-prime (fold $0 (+ 1 1) (lam (lam (- $0 (mod $1 $0)))))))",
        "(lam (fold $0 (is-square 1) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (fold $0 (is-square 0) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (fold $0 1 (lam (lam (if (gt? $0 $1) $0 $1)))))",
        "(lam (fold $0 1 (lam (lam (if (gt? $1 $0) $1 $0)))))",
        "(lam (fn_1 (prev_dc_inv_0 fn_2) mod $0))",
        "(lam (fold $0 empty (lam (lam (cons (mod $1 (prev_dc_inv_0 fn_2)) $0)))))",
        "(lam (fn_1 $0 index (range (length (cdr $0)))))",
        "(lam (fn_1 $0 index (range (- (length $0) 1))))",
        "(lam (cons (car $0) $0))",
        "(lam (cons (index 0 $0) $0))",
        "(lam (cons (index fn_2 $0) $0))",
        "(lam (cons (car (cdr (cdr (cdr $0)))) $0))",
        "(lam (map (lam (car $1)) $0))",
        "(lam (map (lam (index 0 $1)) $0))",
        "(lam (cdr (fn_1 $0 index (range fn_2))))",
        "(lam (fn_1 $0 index (cdr (range fn_2))))",
        "(lam (map (lam (index (prev_dc_inv_0 (prev_dc_inv_0 $0)) $1)) (range (prev_dc_inv_0 (prev_dc_inv_0 0)))))",
        "(lam (map (lam (index (prev_dc_inv_0 (prev_dc_inv_0 $0)) $1)) (range (prev_dc_inv_0 (+ 1 1)))))",
        "(lam (fn_1 $0 index (range (prev_dc_inv_0 0))))",
        "(lam (fn_1 $0 index (range (+ 1 1))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (fn_1 #(#(lambda (+ 1 (+ 1 $0))) 1) eq? $0))",
        "(lambda (map (lambda (eq? #(#(lambda (+ 1 (+ 1 $0))) 1) $0)) $0))",
        "(lambda (fold (cdr $0) 0 (lambda (lambda (+ $0 (if (eq? $1 (car $2)) 1 0))))))",
        "(lambda (fold (cdr $0) 0 (lambda (lambda (if (eq? $1 (car $2)) (+ $0 1) $0)))))",
        "(lambda (is-square (fold $0 #(#(lambda (+ 1 (+ 1 $0))) 1) (lambda (lambda (mod $0 $1))))))",
        "(lambda (empty? (range (fold $0 #(#(lambda (+ 1 (+ 1 $0))) 1) (lambda (lambda (mod $0 $1)))))))",
        "(lambda (car (cdr (cdr (cdr (cdr $0))))))",
        "(lambda (index 1 (cdr (cdr (cdr $0)))))",
        "(lambda (is-prime (+ 1 (#(lambda (+ 1 (+ 1 $0))) (index (length $0) (cons 0 $0))))))",
        "(lambda (is-prime (fold $0 (+ 1 1) (lambda (lambda (- $0 (mod $1 $0)))))))",
        "(lambda (fold $0 (is-square 1) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (fold $0 (is-square 0) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1)))))",
        "(lambda (fold $0 1 (lambda (lambda (if (gt? $1 $0) $1 $0)))))",
        "(lambda (fn_1 (#(lambda (+ 1 (+ 1 $0))) #(#(lambda (+ 1 (+ 1 $0))) 1)) mod $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (mod $1 (#(lambda (+ 1 (+ 1 $0))) #(#(lambda (+ 1 (+ 1 $0))) 1))) $0)))))",
        "(lambda (fn_1 $0 index (range (length (cdr $0)))))",
        "(lambda (fn_1 $0 index (range (- (length $0) 1))))",
        "(lambda (cons (car $0) $0))",
        "(lambda (cons (index 0 $0) $0))",
        "(lambda (cons (index #(#(lambda (+ 1 (+ 1 $0))) 1) $0) $0))",
        "(lambda (cons (car (cdr (cdr (cdr $0)))) $0))",
        "(lambda (map (lambda (car $1)) $0))",
        "(lambda (map (lambda (index 0 $1)) $0))",
        "(lambda (cdr (fn_1 $0 index (range #(#(lambda (+ 1 (+ 1 $0))) 1)))))",
        "(lambda (fn_1 $0 index (cdr (range #(#(lambda (+ 1 (+ 1 $0))) 1)))))",
        "(lambda (map (lambda (index (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) $0)) $1)) (range (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0)))))",
        "(lambda (map (lambda (index (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) $0)) $1)) (range (#(lambda (+ 1 (+ 1 $0))) (+ 1 1)))))",
        "(lambda (fn_1 $0 index (range (#(lambda (+ 1 (+ 1 $0))) 0))))",
        "(lambda (fn_1 $0 index (range (+ 1 1))))"
      ],
      "utility": 304,
      "expected_cost": 10615,
      "final_cost": 10615,
      "multiplier": 1.0475741874705606,
      "multiplier_wrt_orig": 1.0956194065002356,
      "num_uses": 9,
      "uses": [
        {
          "fn_2 ": "(prev_dc_inv_0 1)"
        }
      ]
    }
  ]
}