{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.39.19/bench003_it4.json --max-arity=3 --threads=1 --iterations=1 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.39.19/out/stitch/2022-10-04_19-36-11/raw/bench003_it4.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.39.19/bench003_it4.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.39.19/out/stitch/2022-10-04_19-36-11/raw/bench003_it4.json",
    "iterations": 1,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 50250,
  "original": [
    "(lam (map (lam (+ prev_dc_inv_3 $0)) $0))",
    "(lam (map (lam (+ $0 prev_dc_inv_3)) $0))",
    "(lam (prev_dc_inv_5 $0 (prev_dc_inv_1 (prev_dc_inv_4 $0 prev_dc_inv_3))))",
    "(lam (prev_dc_inv_5 $0 (prev_dc_inv_4 (prev_dc_inv_1 $0) 1)))",
    "(lam (prev_dc_inv_5 $0 (prev_dc_inv_1 (cdr (prev_dc_inv_7 $0)))))",
    "(lam (prev_dc_inv_5 $0 (cdr (prev_dc_inv_1 (prev_dc_inv_7 $0)))))",
    "(lam (prev_dc_inv_5 $0 (range 1)))",
    "(lam (prev_dc_inv_5 $0 (cons 0 empty)))",
    "(lam (prev_dc_inv_5 $0 (cons (prev_dc_inv_0 prev_dc_inv_3) empty)))",
    "(lam (prev_dc_inv_5 $0 (cons (prev_dc_inv_0 (mod prev_dc_inv_3 (prev_dc_inv_0 prev_dc_inv_3))) empty)))",
    "(lam (map (lam (eq? prev_dc_inv_3 $0)) $0))",
    "(lam (map (lam (eq? $0 prev_dc_inv_3)) $0))",
    "(lam (map (lam (eq? $0 (prev_dc_inv_0 (prev_dc_inv_0 0)))) $0))",
    "(lam (map (lam (eq? (prev_dc_inv_0 (prev_dc_inv_0 0)) $0)) $0))",
    "(lam (map (lam (- 1 $0)) $0))",
    "(lam (map (lam (mod prev_dc_inv_3 (prev_dc_inv_0 $0))) $0))",
    "(lam (map (lam (index $0 (cons prev_dc_inv_3 (range $0)))) $0))",
    "(lam (map (lam (index $0 (cons prev_dc_inv_3 (range prev_dc_inv_3)))) $0))",
    "(lam (map (lam (mod (prev_dc_inv_0 $0) prev_dc_inv_3)) $0))",
    "(lam (map (lam (mod (prev_dc_inv_0 $0) (prev_dc_inv_0 1))) $0))",
    "(lam (fold (cdr $0) 0 (lam (lam (+ $0 (if (eq? $1 (car $2)) 1 0))))))",
    "(lam (fold (cdr $0) 0 (lam (lam (if (eq? $1 (car $2)) (+ $0 1) $0)))))",
    "(lam (prev_dc_inv_1 (cdr $0)))",
    "(lam (cdr (prev_dc_inv_1 $0)))",
    "(lam (is-square (fold $0 prev_dc_inv_3 (lam (lam (mod $0 $1))))))",
    "(lam (eq? (fold $0 prev_dc_inv_3 (lam (lam (mod $0 $1)))) 0))",
    "(lam (car (prev_dc_inv_1 $0)))",
    "(lam (index (prev_dc_inv_0 0) $0))",
    "(lam (car (prev_dc_inv_1 (prev_dc_inv_1 $0))))",
    "(lam (index 0 (prev_dc_inv_1 (prev_dc_inv_1 $0))))",
    "(lam (is-prime (+ 1 (prev_dc_inv_0 (index (length $0) (cons 0 $0))))))",
    "(lam (is-prime (fold $0 (+ 1 1) (lam (lam (- $0 (mod $1 $0)))))))",
    "(lam (fold $0 (is-square 0) (lam (lam (is-prime (if $0 $1 0))))))",
    "(lam (fold $0 (is-square 0) (lam (lam (if $0 (is-prime $1) $0)))))",
    "(lam (fold $0 0 (lam (lam (if (gt? $0 $1) $0 $1)))))",
    "(lam (fold $0 0 (lam (lam (if (gt? $1 $0) $1 $0)))))",
    "(lam (map (lam 0) $0))",
    "(lam (map (lam (length empty)) $0))",
    "(lam (prev_dc_inv_6 0 $0))",
    "(lam (prev_dc_inv_6 (length empty) $0))",
    "(lam (prev_dc_inv_6 (prev_dc_inv_0 0) $0))",
    "(lam (prev_dc_inv_6 (+ 1 1) $0))",
    "(lam (prev_dc_inv_6 prev_dc_inv_3 $0))",
    "(lam (fold $0 empty (lam (lam (cons (mod $1 (prev_dc_inv_0 prev_dc_inv_3)) $0)))))",
    "(lam (map (lam (+ $0 $0)) $0))",
    "(lam (map (lam (* $0 (prev_dc_inv_0 0))) $0))",
    "(lam (map (lam (* prev_dc_inv_3 $0)) $0))",
    "(lam (map (lam (* $0 prev_dc_inv_3)) $0))",
    "(lam (prev_dc_inv_4 $0 (length (cdr $0))))",
    "(lam (prev_dc_inv_4 $0 (- (length $0) 1)))",
    "(lam (prev_dc_inv_2 $0 $0))",
    "(lam (prev_dc_inv_2 (map (lam $0) $0) $0))",
    "(lam (cons (index prev_dc_inv_3 $0) $0))",
    "(lam (prev_dc_inv_2 (cdr (prev_dc_inv_1 $0)) $0))",
    "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
    "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
    "(lam (prev_dc_inv_2 $0 (prev_dc_inv_2 (cdr $0) (prev_dc_inv_2 (prev_dc_inv_1 $0) (prev_dc_inv_1 (prev_dc_inv_1 $0))))))",
    "(lam (prev_dc_inv_2 $0 (prev_dc_inv_2 (cdr $0) (cons (index (prev_dc_inv_0 0) $0) (prev_dc_inv_1 (prev_dc_inv_1 $0))))))",
    "(lam (map (lam (car $1)) $0))",
    "(lam (map (lam (index 0 $1)) $0))",
    "(lam (map (lam (index prev_dc_inv_3 $1)) $0))",
    "(lam (map (lam (index (prev_dc_inv_0 1) $1)) $0))",
    "(lam (prev_dc_inv_7 $0))",
    "(lam (prev_dc_inv_4 $0 (+ prev_dc_inv_3 1)))",
    "(lam (cdr (prev_dc_inv_4 $0 prev_dc_inv_3)))",
    "(lam (prev_dc_inv_4 (cdr $0) (prev_dc_inv_0 0)))",
    "(lam (prev_dc_inv_4 (cdr $0) (prev_dc_inv_0 prev_dc_inv_3)))",
    "(lam (cdr (prev_dc_inv_4 $0 (+ prev_dc_inv_3 prev_dc_inv_3))))",
    "(lam (prev_dc_inv_4 (prev_dc_inv_1 $0) prev_dc_inv_3))",
    "(lam (cdr (prev_dc_inv_7 (cdr $0))))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_1 $0)))",
    "(lam (prev_dc_inv_1 (prev_dc_inv_4 $0 (+ prev_dc_inv_3 prev_dc_inv_3))))",
    "(lam (prev_dc_inv_4 (cdr (prev_dc_inv_1 $0)) prev_dc_inv_3))",
    "(lam (prev_dc_inv_1 (prev_dc_inv_4 (cdr $0) (prev_dc_inv_0 prev_dc_inv_3))))",
    "(lam (map (lam (index (prev_dc_inv_0 (prev_dc_inv_0 $0)) $1)) (range (prev_dc_inv_0 (prev_dc_inv_0 0)))))",
    "(lam (prev_dc_inv_1 (map (lam (index (prev_dc_inv_0 $0) $1)) (range (prev_dc_inv_0 (prev_dc_inv_0 (prev_dc_inv_0 0)))))))",
    "(lam (prev_dc_inv_4 $0 (prev_dc_inv_0 0)))",
    "(lam (prev_dc_inv_4 $0 (+ 1 1)))",
    "(lam (prev_dc_inv_7 $0))",
    "(lam (prev_dc_inv_4 $0 (+ prev_dc_inv_3 1)))",
    "(lam (+ 1 (fold $0 prev_dc_inv_3 (lam (lam (if (gt? $0 $1) $0 $1))))))",
    "(lam (+ 1 (fold $0 prev_dc_inv_3 (lam (lam (if (gt? $1 $0) $1 $0))))))"
  ],
  "invs": [
    {
      "body": "(lam (map (lam (#1 $0 #0)) $0))",
      "dreamcoder": "#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0))))",
      "arity": 2,
      "name": "fn_8",
      "rewritten": [
        "(lam (map (lam (+ prev_dc_inv_3 $0)) $0))",
        "(fn_8 prev_dc_inv_3 +)",
        "(lam (prev_dc_inv_5 $0 (prev_dc_inv_1 (prev_dc_inv_4 $0 prev_dc_inv_3))))",
        "(lam (prev_dc_inv_5 $0 (prev_dc_inv_4 (prev_dc_inv_1 $0) 1)))",
        "(lam (prev_dc_inv_5 $0 (prev_dc_inv_1 (cdr (prev_dc_inv_7 $0)))))",
        "(lam (prev_dc_inv_5 $0 (cdr (prev_dc_inv_1 (prev_dc_inv_7 $0)))))",
        "(lam (prev_dc_inv_5 $0 (range 1)))",
        "(lam (prev_dc_inv_5 $0 (cons 0 empty)))",
        "(lam (prev_dc_inv_5 $0 (cons (prev_dc_inv_0 prev_dc_inv_3) empty)))",
        "(lam (prev_dc_inv_5 $0 (cons (prev_dc_inv_0 (mod prev_dc_inv_3 (prev_dc_inv_0 prev_dc_inv_3))) empty)))",
        "(lam (map (lam (eq? prev_dc_inv_3 $0)) $0))",
        "(fn_8 prev_dc_inv_3 eq?)",
        "(fn_8 (prev_dc_inv_0 (prev_dc_inv_0 0)) eq?)",
        "(lam (map (lam (eq? (prev_dc_inv_0 (prev_dc_inv_0 0)) $0)) $0))",
        "(lam (map (lam (- 1 $0)) $0))",
        "(lam (map (lam (mod prev_dc_inv_3 (prev_dc_inv_0 $0))) $0))",
        "(lam (map (lam (index $0 (cons prev_dc_inv_3 (range $0)))) $0))",
        "(fn_8 (cons prev_dc_inv_3 (range prev_dc_inv_3)) index)",
        "(lam (map (lam (mod (prev_dc_inv_0 $0) prev_dc_inv_3)) $0))",
        "(lam (map (lam (mod (prev_dc_inv_0 $0) (prev_dc_inv_0 1))) $0))",
        "(lam (fold (cdr $0) 0 (lam (lam (+ $0 (if (eq? $1 (car $2)) 1 0))))))",
        "(lam (fold (cdr $0) 0 (lam (lam (if (eq? $1 (car $2)) (+ $0 1) $0)))))",
        "(lam (prev_dc_inv_1 (cdr $0)))",
        "(lam (cdr (prev_dc_inv_1 $0)))",
        "(lam (is-square (fold $0 prev_dc_inv_3 (lam (lam (mod $0 $1))))))",
        "(lam (eq? (fold $0 prev_dc_inv_3 (lam (lam (mod $0 $1)))) 0))",
        "(lam (car (prev_dc_inv_1 $0)))",
        "(lam (index (prev_dc_inv_0 0) $0))",
        "(lam (car (prev_dc_inv_1 (prev_dc_inv_1 $0))))",
        "(lam (index 0 (prev_dc_inv_1 (prev_dc_inv_1 $0))))",
        "(lam (is-prime (+ 1 (prev_dc_inv_0 (index (length $0) (cons 0 $0))))))",
        "(lam (is-prime (fold $0 (+ 1 1) (lam (lam (- $0 (mod $1 $0)))))))",
        "(lam (fold $0 (is-square 0) (lam (lam (is-prime (if $0 $1 0))))))",
        "(lam (fold $0 (is-square 0) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (fold $0 0 (lam (lam (if (gt? $0 $1) $0 $1)))))",
        "(lam (fold $0 0 (lam (lam (if (gt? $1 $0) $1 $0)))))",
        "(lam (map (lam 0) $0))",
        "(lam (map (lam (length empty)) $0))",
        "(lam (prev_dc_inv_6 0 $0))",
        "(lam (prev_dc_inv_6 (length empty) $0))",
        "(lam (prev_dc_inv_6 (prev_dc_inv_0 0) $0))",
        "(lam (prev_dc_inv_6 (+ 1 1) $0))",
        "(lam (prev_dc_inv_6 prev_dc_inv_3 $0))",
        "(lam (fold $0 empty (lam (lam (cons (mod $1 (prev_dc_inv_0 prev_dc_inv_3)) $0)))))",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(fn_8 (prev_dc_inv_0 0) *)",
        "(lam (map (lam (* prev_dc_inv_3 $0)) $0))",
        "(fn_8 prev_dc_inv_3 *)",
        "(lam (prev_dc_inv_4 $0 (length (cdr $0))))",
        "(lam (prev_dc_inv_4 $0 (- (length $0) 1)))",
        "(lam (prev_dc_inv_2 $0 $0))",
        "(lam (prev_dc_inv_2 (map (lam $0) $0) $0))",
        "(lam (cons (index prev_dc_inv_3 $0) $0))",
        "(lam (prev_dc_inv_2 (cdr (prev_dc_inv_1 $0)) $0))",
        "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
        "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
        "(lam (prev_dc_inv_2 $0 (prev_dc_inv_2 (cdr $0) (prev_dc_inv_2 (prev_dc_inv_1 $0) (prev_dc_inv_1 (prev_dc_inv_1 $0))))))",
        "(lam (prev_dc_inv_2 $0 (prev_dc_inv_2 (cdr $0) (cons (index (prev_dc_inv_0 0) $0) (prev_dc_inv_1 (prev_dc_inv_1 $0))))))",
        "(lam (map (lam (car $1)) $0))",
        "(lam (map (lam (index 0 $1)) $0))",
        "(lam (map (lam (index prev_dc_inv_3 $1)) $0))",
        "(lam (map (lam (index (prev_dc_inv_0 1) $1)) $0))",
        "(lam (prev_dc_inv_7 $0))",
        "(lam (prev_dc_inv_4 $0 (+ prev_dc_inv_3 1)))",
        "(lam (cdr (prev_dc_inv_4 $0 prev_dc_inv_3)))",
        "(lam (prev_dc_inv_4 (cdr $0) (prev_dc_inv_0 0)))",
        "(lam (prev_dc_inv_4 (cdr $0) (prev_dc_inv_0 prev_dc_inv_3)))",
        "(lam (cdr (prev_dc_inv_4 $0 (+ prev_dc_inv_3 prev_dc_inv_3))))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_1 $0) prev_dc_inv_3))",
        "(lam (cdr (prev_dc_inv_7 (cdr $0))))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_1 $0)))",
        "(lam (prev_dc_inv_1 (prev_dc_inv_4 $0 (+ prev_dc_inv_3 prev_dc_inv_3))))",
        "(lam (prev_dc_inv_4 (cdr (prev_dc_inv_1 $0)) prev_dc_inv_3))",
        "(lam (prev_dc_inv_1 (prev_dc_inv_4 (cdr $0) (prev_dc_inv_0 prev_dc_inv_3))))",
        "(lam (map (lam (index (prev_dc_inv_0 (prev_dc_inv_0 $0)) $1)) (range (prev_dc_inv_0 (prev_dc_inv_0 0)))))",
        "(lam (prev_dc_inv_1 (map (lam (index (prev_dc_inv_0 $0) $1)) (range (prev_dc_inv_0 (prev_dc_inv_0 (prev_dc_inv_0 0)))))))",
        "(lam (prev_dc_inv_4 $0 (prev_dc_inv_0 0)))",
        "(lam (prev_dc_inv_4 $0 (+ 1 1)))",
        "(lam (prev_dc_inv_7 $0))",
        "(lam (prev_dc_inv_4 $0 (+ prev_dc_inv_3 1)))",
        "(lam (+ 1 (fold $0 prev_dc_inv_3 (lam (lam (if (gt? $0 $1) $0 $1))))))",
        "(lam (+ 1 (fold $0 prev_dc_inv_3 (lam (lam (if (gt? $1 $0) $1 $0))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (+ #(#(lambda (+ 1 (+ 1 $0))) 1) $0)) $0))",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) #(#(lambda (+ 1 (+ 1 $0))) 1) +)",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (#(lambda (cdr (cdr $0))) (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 #(#(lambda (+ 1 (+ 1 $0))) 1)))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (#(lambda (cdr (cdr $0))) $0) 1)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (#(lambda (cdr (cdr $0))) (cdr (#(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0)))) $0)))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cdr (#(lambda (cdr (cdr $0))) (#(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0)))) $0)))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (range 1)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cons 0 empty)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cons (#(lambda (+ 1 (+ 1 $0))) #(#(lambda (+ 1 (+ 1 $0))) 1)) empty)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cons (#(lambda (+ 1 (+ 1 $0))) (mod #(#(lambda (+ 1 (+ 1 $0))) 1) (#(lambda (+ 1 (+ 1 $0))) #(#(lambda (+ 1 (+ 1 $0))) 1)))) empty)))",
        "(lambda (map (lambda (eq? #(#(lambda (+ 1 (+ 1 $0))) 1) $0)) $0))",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) #(#(lambda (+ 1 (+ 1 $0))) 1) eq?)",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0)) eq?)",
        "(lambda (map (lambda (eq? (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0)) $0)) $0))",
        "(lambda (map (lambda (- 1 $0)) $0))",
        "(lambda (map (lambda (mod #(#(lambda (+ 1 (+ 1 $0))) 1) (#(lambda (+ 1 (+ 1 $0))) $0))) $0))",
        "(lambda (map (lambda (index $0 (cons #(#(lambda (+ 1 (+ 1 $0))) 1) (range $0)))) $0))",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) (cons #(#(lambda (+ 1 (+ 1 $0))) 1) (range #(#(lambda (+ 1 (+ 1 $0))) 1))) index)",
        "(lambda (map (lambda (mod (#(lambda (+ 1 (+ 1 $0))) $0) #(#(lambda (+ 1 (+ 1 $0))) 1))) $0))",
        "(lambda (map (lambda (mod (#(lambda (+ 1 (+ 1 $0))) $0) (#(lambda (+ 1 (+ 1 $0))) 1))) $0))",
        "(lambda (fold (cdr $0) 0 (lambda (lambda (+ $0 (if (eq? $1 (car $2)) 1 0))))))",
        "(lambda (fold (cdr $0) 0 (lambda (lambda (if (eq? $1 (car $2)) (+ $0 1) $0)))))",
        "(lambda (#(lambda (cdr (cdr $0))) (cdr $0)))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (is-square (fold $0 #(#(lambda (+ 1 (+ 1 $0))) 1) (lambda (lambda (mod $0 $1))))))",
        "(lambda (eq? (fold $0 #(#(lambda (+ 1 (+ 1 $0))) 1) (lambda (lambda (mod $0 $1)))) 0))",
        "(lambda (car (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (index (#(lambda (+ 1 (+ 1 $0))) 0) $0))",
        "(lambda (car (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (index 0 (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (is-prime (+ 1 (#(lambda (+ 1 (+ 1 $0))) (index (length $0) (cons 0 $0))))))",
        "(lambda (is-prime (fold $0 (+ 1 1) (lambda (lambda (- $0 (mod $1 $0)))))))",
        "(lambda (fold $0 (is-square 0) (lambda (lambda (is-prime (if $0 $1 0))))))",
        "(lambda (fold $0 (is-square 0) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (fold $0 0 (lambda (lambda (if (gt? $0 $1) $0 $1)))))",
        "(lambda (fold $0 0 (lambda (lambda (if (gt? $1 $0) $1 $0)))))",
        "(lambda (map (lambda 0) $0))",
        "(lambda (map (lambda (length empty)) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 (#(lambda (+ 1 (+ 1 $0))) $1))))) 0 $0))",
        "(lambda (#(lambda (map (lambda (mod $0 (#(lambda (+ 1 (+ 1 $0))) $1))))) (length empty) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 (#(lambda (+ 1 (+ 1 $0))) $1))))) (#(lambda (+ 1 (+ 1 $0))) 0) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 (#(lambda (+ 1 (+ 1 $0))) $1))))) (+ 1 1) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 (#(lambda (+ 1 (+ 1 $0))) $1))))) #(#(lambda (+ 1 (+ 1 $0))) 1) $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (mod $1 (#(lambda (+ 1 (+ 1 $0))) #(#(lambda (+ 1 (+ 1 $0))) 1))) $0)))))",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) (#(lambda (+ 1 (+ 1 $0))) 0) *)",
        "(lambda (map (lambda (* #(#(lambda (+ 1 (+ 1 $0))) 1) $0)) $0))",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) #(#(lambda (+ 1 (+ 1 $0))) 1) *)",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (length (cdr $0))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (- (length $0) 1)))",
        "(lambda (#(lambda (cons (car $0))) $0 $0))",
        "(lambda (#(lambda (cons (car $0))) (map (lambda $0) $0) $0))",
        "(lambda (cons (index #(#(lambda (+ 1 (+ 1 $0))) 1) $0) $0))",
        "(lambda (#(lambda (cons (car $0))) (cdr (#(lambda (cdr (cdr $0))) $0)) $0))",
        "(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))",
        "(lambda (fold $0 1 (lambda (lambda (* $1 $0)))))",
        "(lambda (#(lambda (cons (car $0))) $0 (#(lambda (cons (car $0))) (cdr $0) (#(lambda (cons (car $0))) (#(lambda (cdr (cdr $0))) $0) (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))))",
        "(lambda (#(lambda (cons (car $0))) $0 (#(lambda (cons (car $0))) (cdr $0) (cons (index (#(lambda (+ 1 (+ 1 $0))) 0) $0) (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))))",
        "(lambda (map (lambda (car $1)) $0))",
        "(lambda (map (lambda (index 0 $1)) $0))",
        "(lambda (map (lambda (index #(#(lambda (+ 1 (+ 1 $0))) 1) $1)) $0))",
        "(lambda (map (lambda (index (#(lambda (+ 1 (+ 1 $0))) 1) $1)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0)))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ #(#(lambda (+ 1 (+ 1 $0))) 1) 1)))",
        "(lambda (cdr (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 #(#(lambda (+ 1 (+ 1 $0))) 1))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (cdr $0) (#(lambda (+ 1 (+ 1 $0))) 0)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (cdr $0) (#(lambda (+ 1 (+ 1 $0))) #(#(lambda (+ 1 (+ 1 $0))) 1))))",
        "(lambda (cdr (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ #(#(lambda (+ 1 (+ 1 $0))) 1) #(#(lambda (+ 1 (+ 1 $0))) 1)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (#(lambda (cdr (cdr $0))) $0) #(#(lambda (+ 1 (+ 1 $0))) 1)))",
        "(lambda (cdr (#(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0)))) (cdr $0))))",
        "(lambda (#(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0)))) (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ #(#(lambda (+ 1 (+ 1 $0))) 1) #(#(lambda (+ 1 (+ 1 $0))) 1)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (cdr (#(lambda (cdr (cdr $0))) $0)) #(#(lambda (+ 1 (+ 1 $0))) 1)))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (cdr $0) (#(lambda (+ 1 (+ 1 $0))) #(#(lambda (+ 1 (+ 1 $0))) 1)))))",
        "(lambda (map (lambda (index (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) $0)) $1)) (range (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0)))))",
        "(lambda (#(lambda (cdr (cdr $0))) (map (lambda (index (#(lambda (+ 1 (+ 1 $0))) $0) $1)) (range (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0)))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(lambda (+ 1 (+ 1 $0))) 0)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ 1 1)))",
        "(lambda (#(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(lambda (+ 1 (+ 1 $0))) (#(lambda (+ 1 (+ 1 $0))) 0)))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ #(#(lambda (+ 1 (+ 1 $0))) 1) 1)))",
        "(lambda (+ 1 (fold $0 #(#(lambda (+ 1 (+ 1 $0))) 1) (lambda (lambda (if (gt? $0 $1) $0 $1))))))",
        "(lambda (+ 1 (fold $0 #(#(lambda (+ 1 (+ 1 $0))) 1) (lambda (lambda (if (gt? $1 $0) $1 $0))))))"
      ],
      "utility": 817,
      "expected_cost": 21929,
      "final_cost": 21929,
      "multiplier": 1.0512107255232797,
      "multiplier_wrt_orig": 1.0512107255232797,
      "num_uses": 8,
      "uses": [
        {
          "fn_8 (prev_dc_inv_0 0) *": "(lam (map (lam (* $0 (prev_dc_inv_0 0))) $0))"
        },
        {
          "fn_8 prev_dc_inv_3 *": "(lam (map (lam (* $0 prev_dc_inv_3)) $0))"
        },
        {
          "fn_8 #0 +": "(lam (map (lam (+ $0 $0)) $0))"
        },
        {
          "fn_8 prev_dc_inv_3 +": "(lam (map (lam (+ $0 prev_dc_inv_3)) $0))"
        },
        {
          "fn_8 (prev_dc_inv_0 (prev_dc_inv_0 0)) eq?": "(lam (map (lam (eq? $0 (prev_dc_inv_0 (prev_dc_inv_0 0)))) $0))"
        },
        {
          "fn_8 prev_dc_inv_3 eq?": "(lam (map (lam (eq? $0 prev_dc_inv_3)) $0))"
        },
        {
          "fn_8 (cons prev_dc_inv_3 (range #0)) index": "(lam (map (lam (index $0 (cons prev_dc_inv_3 (range $0)))) $0))"
        },
        {
          "fn_8 (cons prev_dc_inv_3 (range prev_dc_inv_3)) index": "(lam (map (lam (index $0 (cons prev_dc_inv_3 (range prev_dc_inv_3)))) $0))"
        }
      ]
    }
  ]
}