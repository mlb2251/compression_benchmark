Stitch mode: none
Will write compression messages to cm_out_dir:  compressionMessages
Compression backend will run for most 20 iterations
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Total number of candidates: 32083
Constructed version spaces and coalesced candidates in 27.2943s.
Timing point -1 right before normalizing: 31.6339s.
Trimmed down the beam, have only 300 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 31.6363s.
Timing Comparison Point A (vspace+beam) (millis): 31636
Rewrote topK in 29.4575s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 29.4579s.
sanity check for timing comparison, should be same as comparison point: 1.01824m.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 61094
Initial score: -1067.209510
Initial language score: 0.000000
Initial joint score: -1067.209510 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 4.43816s.
Best MDL score: -1057.800456 with (lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0))))))
Scored candidates with language and grammar in 4.24334s.
Best joint score: -1057.800456 with (lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0))))))
Timing point 3 (all scoring): 8.71192s.
Improved score to -1057.800456 (dScore=9.409054) w/ new primitive
	#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) : list(t0) -> (t0 -> bool) -> list(t0)
rewrote all of the frontiers in 17.2885s.
Timing point 4 (rewrite final frontiers): 17.2886s.
Completed one step of memory consolidation in 1.45199m.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? (mod $0 (#(lambda (+ 1 (+ 1 $0))) 0)) 0))))
  (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? $0 1))))
Total number of candidates: 29189
Constructed version spaces and coalesced candidates in 12.3638s.
Timing point -1 right before normalizing: 14.8162s.
Trimmed down the beam, have only 300 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 14.8191s.
Timing Comparison Point A (vspace+beam) (millis): 14819
Rewrote topK in 15.0207s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 15.0213s.
sanity check for timing comparison, should be same as comparison point: 29.8404s.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 29840
Initial score: -1057.986543
Initial language score: 0.000000
Initial joint score: -1057.986543 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 4.86753s.
Best MDL score: -1057.654831 with (lambda (gt? $0 1))
Scored candidates with language and grammar in 4.50945s.
Best joint score: -1057.654831 with (lambda (gt? $0 1))
Timing point 3 (all scoring): 9.41207s.
Improved score to -1057.654831 (dScore=0.331712) w/ new primitive
	#(lambda (gt? $0 1)) : int -> bool
rewrote all of the frontiers in 7.00549s.
Timing point 4 (rewrite final frontiers): 7.00554s.
Completed one step of memory consolidation in 46.2765s.
New primitive is used 4 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (map (lambda (#(lambda (gt? $0 1)) (#(lambda (+ 1 (+ 1 $0))) $0))) $0))
  (lambda (#(lambda (gt? $0 1)) (#(lambda (lambda (fold $1 0 (lambda (lambda (+ $0 (if (eq? $1 $2) 1 0))))))) $0 (car $0))))
  (lambda (#(lambda (gt? $0 1)) (#(lambda (lambda (fold $1 0 (lambda (lambda (+ $0 (if (eq? $1 $2) 1 0))))))) $0 (#(lambda (+ 1 (+ 1 $0))) #(#(lambda (+ 1 (+ 1 $0))) 1)))))
  (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (#(lambda (gt? $0 1)) $0))))
Total number of candidates: 28249
Constructed version spaces and coalesced candidates in 13.2233s.
Timing point -1 right before normalizing: 15.7475s.
Trimmed down the beam, have only 300 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 15.7497s.
Timing Comparison Point A (vspace+beam) (millis): 15749
Rewrote topK in 14.7066s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 14.707s.
sanity check for timing comparison, should be same as comparison point: 30.4567s.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 30456
Initial score: -1057.868471
Initial language score: 0.000000
Initial joint score: -1057.868471 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 5.05927s.
Best MDL score: -1058.432980 with (map (lambda (- 1 $0)))
No improvement possible with MDL.
Scored candidates with language and grammar in 4.27959s.
Best joint score: -1058.432980 with (map (lambda (- 1 $0)))
Timing point 3 (all scoring): 9.36878s.
No improvement possible with joint score.
Completed one step of memory consolidation in 39.8264s.
completed ocaml compression in 2.88738m.
	Command being timed: "/scratch/mlbowers/proj/stitch/experiments/compression benches/list_list_hard_test_ellisk_2019-02-15T11.39.19/bench008_it9.json"
	User time (seconds): 36.50
	System time (seconds): 0.59
	Percent of CPU this job got: 21%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 2:53.30
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 441380
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 578893
	Voluntary context switches: 451
	Involuntary context switches: 3740
	Swaps: 0
	File system inputs: 0
	File system outputs: 128
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
