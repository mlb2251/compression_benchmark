{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/bench002_it2.json --max-arity=3 --threads=1 --iterations=3 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/out/stitch/2022-10-04_19-35-46/raw/bench002_it2.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/bench002_it2.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/out/stitch/2022-10-04_19-35-46/raw/bench002_it2.json",
    "iterations": 3,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 18410,
  "original": [
    "(lam (map (lam (if (char-eq? $0 ',') LPAREN $0)) $0))",
    "(lam (map (lam (if (char-eq? ',' $0) LPAREN $0)) $0))",
    "(lam (map (lam (if (char-eq? $0 '-') ',' $0)) $0))",
    "(lam (map (lam (if (char-eq? '-' $0) ',' $0)) $0))",
    "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? '.' $1) $2 $0))))))",
    "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
    "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? RPAREN $1) $2 $0))))))",
    "(lam (lam (prev_dc_inv_1 $1 (cons SPACE $0))))",
    "(lam (lam (prev_dc_inv_1 $1 (cons SPACE (map (lam $0) $0)))))",
    "(lam (lam (prev_dc_inv_1 $1 (cons SPACE (cons SPACE $0)))))",
    "(lam (prev_dc_inv_0 $0 ','))",
    "(lam (cons (car $0) (map (lam ',') (range 1))))",
    "(lam (prev_dc_inv_0 $0 '-'))",
    "(lam (cons (car $0) (map (lam '-') (range 1))))",
    "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
    "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
    "(lam (lam (prev_dc_inv_1 $1 $0)))",
    "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_1 $1 $0)))",
    "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
    "(lam (prev_dc_inv_1 STRING $0))",
    "(lam (prev_dc_inv_1 (map (lam $0) STRING) $0))",
    "(lam (prev_dc_inv_1 $0 STRING))",
    "(lam (prev_dc_inv_1 $0 (map (lam $0) STRING)))",
    "(lam (prev_dc_inv_1 STRING $0))",
    "(lam (prev_dc_inv_1 (map (lam $0) STRING) $0))",
    "(lam (prev_dc_inv_1 STRING $0))",
    "(lam (prev_dc_inv_1 (map (lam $0) STRING) $0))",
    "(lam (prev_dc_inv_1 (cons LPAREN $0) (cons RPAREN empty)))",
    "(lam (cons LPAREN (prev_dc_inv_1 $0 (cons RPAREN empty))))"
  ],
  "invs": [
    {
      "body": "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? #0 $1) $2 $0))))))",
      "dreamcoder": "#(lambda (lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $3 $1) $2 $0)))))))",
      "arity": 1,
      "name": "fn_2",
      "rewritten": [
        "(lam (map (lam (if (char-eq? $0 ',') LPAREN $0)) $0))",
        "(lam (map (lam (if (char-eq? ',' $0) LPAREN $0)) $0))",
        "(lam (map (lam (if (char-eq? $0 '-') ',' $0)) $0))",
        "(lam (map (lam (if (char-eq? '-' $0) ',' $0)) $0))",
        "(fn_2 '.')",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(fn_2 RPAREN)",
        "(lam (lam (prev_dc_inv_1 $1 (cons SPACE $0))))",
        "(lam (lam (prev_dc_inv_1 $1 (cons SPACE (map (lam $0) $0)))))",
        "(lam (lam (prev_dc_inv_1 $1 (cons SPACE (cons SPACE $0)))))",
        "(lam (prev_dc_inv_0 $0 ','))",
        "(lam (cons (car $0) (map (lam ',') (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (prev_dc_inv_1 $1 $0)))",
        "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_1 $1 $0)))",
        "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
        "(lam (prev_dc_inv_1 STRING $0))",
        "(lam (prev_dc_inv_1 (map (lam $0) STRING) $0))",
        "(lam (prev_dc_inv_1 $0 STRING))",
        "(lam (prev_dc_inv_1 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_1 STRING $0))",
        "(lam (prev_dc_inv_1 (map (lam $0) STRING) $0))",
        "(lam (prev_dc_inv_1 STRING $0))",
        "(lam (prev_dc_inv_1 (map (lam $0) STRING) $0))",
        "(lam (prev_dc_inv_1 (cons LPAREN $0) (cons RPAREN empty)))",
        "(lam (cons LPAREN (prev_dc_inv_1 $0 (cons RPAREN empty))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (if (char-eq? $0 ',') LPAREN $0)) $0))",
        "(lambda (map (lambda (if (char-eq? ',' $0) LPAREN $0)) $0))",
        "(lambda (map (lambda (if (char-eq? $0 '-') ',' $0)) $0))",
        "(lambda (map (lambda (if (char-eq? '-' $0) ',' $0)) $0))",
        "(#(lambda (lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $3 $1) $2 $0))))))) '.')",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(#(lambda (lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $3 $1) $2 $0))))))) RPAREN)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons SPACE $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons SPACE (map (lambda $0) $0)))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons SPACE (cons SPACE $0)))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (cons (car $0) (map (lambda ',') (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) (cons RPAREN empty)))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cons RPAREN empty))))"
      ],
      "utility": 710,
      "expected_cost": 7176,
      "final_cost": 7176,
      "multiplier": 1.22603121516165,
      "multiplier_wrt_orig": 1.22603121516165,
      "num_uses": 2,
      "uses": [
        {
          "fn_2 '.'": "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? '.' $1) $2 $0))))))"
        },
        {
          "fn_2 RPAREN": "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? RPAREN $1) $2 $0))))))"
        }
      ]
    },
    {
      "body": "(lam (map (lam (if (char-eq? $0 #1) #0 $0)) $0))",
      "dreamcoder": "#(lambda (lambda (lambda (map (lambda (if (char-eq? $0 $2) $3 $0)) $0))))",
      "arity": 2,
      "name": "fn_3",
      "rewritten": [
        "(fn_3 LPAREN ',')",
        "(lam (map (lam (if (char-eq? ',' $0) LPAREN $0)) $0))",
        "(fn_3 ',' '-')",
        "(lam (map (lam (if (char-eq? '-' $0) ',' $0)) $0))",
        "(fn_2 '.')",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(fn_2 RPAREN)",
        "(lam (lam (prev_dc_inv_1 $1 (cons SPACE $0))))",
        "(lam (lam (prev_dc_inv_1 $1 (cons SPACE (map (lam $0) $0)))))",
        "(lam (lam (prev_dc_inv_1 $1 (cons SPACE (cons SPACE $0)))))",
        "(lam (prev_dc_inv_0 $0 ','))",
        "(lam (cons (car $0) (map (lam ',') (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (prev_dc_inv_1 $1 $0)))",
        "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_1 $1 $0)))",
        "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
        "(lam (prev_dc_inv_1 STRING $0))",
        "(lam (prev_dc_inv_1 (map (lam $0) STRING) $0))",
        "(lam (prev_dc_inv_1 $0 STRING))",
        "(lam (prev_dc_inv_1 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_1 STRING $0))",
        "(lam (prev_dc_inv_1 (map (lam $0) STRING) $0))",
        "(lam (prev_dc_inv_1 STRING $0))",
        "(lam (prev_dc_inv_1 (map (lam $0) STRING) $0))",
        "(lam (prev_dc_inv_1 (cons LPAREN $0) (cons RPAREN empty)))",
        "(lam (cons LPAREN (prev_dc_inv_1 $0 (cons RPAREN empty))))"
      ],
      "rewritten_dreamcoder": [
        "(#(lambda (lambda (lambda (map (lambda (if (char-eq? $0 $2) $3 $0)) $0)))) LPAREN ',')",
        "(lambda (map (lambda (if (char-eq? ',' $0) LPAREN $0)) $0))",
        "(#(lambda (lambda (lambda (map (lambda (if (char-eq? $0 $2) $3 $0)) $0)))) ',' '-')",
        "(lambda (map (lambda (if (char-eq? '-' $0) ',' $0)) $0))",
        "(fn_2 '.')",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(fn_2 RPAREN)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons SPACE $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons SPACE (map (lambda $0) $0)))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons SPACE (cons SPACE $0)))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (cons (car $0) (map (lambda ',') (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) (cons RPAREN empty)))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cons RPAREN empty))))"
      ],
      "utility": 405,
      "expected_cost": 6162,
      "final_cost": 6162,
      "multiplier": 1.1645569620253164,
      "multiplier_wrt_orig": 1.4277831872768583,
      "num_uses": 2,
      "uses": [
        {
          "fn_3 LPAREN ','": "(lam (map (lam (if (char-eq? $0 ',') LPAREN $0)) $0))"
        },
        {
          "fn_3 ',' '-'": "(lam (map (lam (if (char-eq? $0 '-') ',' $0)) $0))"
        }
      ]
    },
    {
      "body": "(lam (prev_dc_inv_1 #0 $0))",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
      "arity": 1,
      "name": "fn_4",
      "rewritten": [
        "(fn_3 LPAREN ',')",
        "(lam (map (lam (if (char-eq? ',' $0) LPAREN $0)) $0))",
        "(fn_3 ',' '-')",
        "(lam (map (lam (if (char-eq? '-' $0) ',' $0)) $0))",
        "(fn_2 '.')",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(fn_2 RPAREN)",
        "(lam (lam (prev_dc_inv_1 $1 (cons SPACE $0))))",
        "(lam (lam (prev_dc_inv_1 $1 (cons SPACE (map (lam $0) $0)))))",
        "(lam (lam (prev_dc_inv_1 $1 (cons SPACE (cons SPACE $0)))))",
        "(lam (prev_dc_inv_0 $0 ','))",
        "(lam (cons (car $0) (map (lam ',') (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (fn_4 $0))",
        "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
        "(lam (fn_4 $0))",
        "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
        "(fn_4 STRING)",
        "(fn_4 (map (lam $0) STRING))",
        "(lam (prev_dc_inv_1 $0 STRING))",
        "(lam (prev_dc_inv_1 $0 (map (lam $0) STRING)))",
        "(fn_4 STRING)",
        "(fn_4 (map (lam $0) STRING))",
        "(fn_4 STRING)",
        "(fn_4 (map (lam $0) STRING))",
        "(lam (prev_dc_inv_1 (cons LPAREN $0) (cons RPAREN empty)))",
        "(lam (cons LPAREN (prev_dc_inv_1 $0 (cons RPAREN empty))))"
      ],
      "rewritten_dreamcoder": [
        "(fn_3 LPAREN ',')",
        "(lambda (map (lambda (if (char-eq? ',' $0) LPAREN $0)) $0))",
        "(fn_3 ',' '-')",
        "(lambda (map (lambda (if (char-eq? '-' $0) ',' $0)) $0))",
        "(fn_2 '.')",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(fn_2 RPAREN)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons SPACE $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons SPACE (map (lambda $0) $0)))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons SPACE (cons SPACE $0)))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (cons (car $0) (map (lambda ',') (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0))) $0))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0))) $0))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0))) STRING)",
        "(#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0))) (map (lambda $0) STRING))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0))) STRING)",
        "(#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0))) (map (lambda $0) STRING))",
        "(#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0))) STRING)",
        "(#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0))) (map (lambda $0) STRING))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) (cons RPAREN empty)))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cons RPAREN empty))))"
      ],
      "utility": 307,
      "expected_cost": 5652,
      "final_cost": 5652,
      "multiplier": 1.0902335456475585,
      "multiplier_wrt_orig": 1.5566171266808209,
      "num_uses": 8,
      "uses": [
        {
          "fn_4 $0": "(lam (prev_dc_inv_1 $1 $0))"
        },
        {
          "fn_4 (map (lam $0) STRING)": "(lam (prev_dc_inv_1 (map (lam $0) STRING) $0))"
        },
        {
          "fn_4 STRING": "(lam (prev_dc_inv_1 STRING $0))"
        }
      ]
    }
  ]
}