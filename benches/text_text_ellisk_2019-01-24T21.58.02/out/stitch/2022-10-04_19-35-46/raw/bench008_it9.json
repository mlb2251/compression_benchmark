{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/bench008_it9.json --max-arity=3 --threads=1 --iterations=2 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/out/stitch/2022-10-04_19-35-46/raw/bench008_it9.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/bench008_it9.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/out/stitch/2022-10-04_19-35-46/raw/bench008_it9.json",
    "iterations": 2,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 73005,
  "original": [
    "(lam (prev_dc_inv_2 ',' LPAREN $0))",
    "(lam (prev_dc_inv_2 ',' LPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 '-' ',' $0))",
    "(lam (prev_dc_inv_2 '-' ',' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 LPAREN '.' $0))",
    "(lam (prev_dc_inv_2 LPAREN '.' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 ',' '.' $0))",
    "(lam (prev_dc_inv_2 ',' '.' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 LPAREN RPAREN $0))",
    "(lam (prev_dc_inv_11 (prev_dc_inv_2 LPAREN RPAREN $0) '.'))",
    "(lam (prev_dc_inv_2 '-' SPACE $0))",
    "(lam (prev_dc_inv_2 '-' SPACE (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 SPACE LPAREN $0))",
    "(lam (prev_dc_inv_2 SPACE LPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 $0 '.'))",
    "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
    "(lam (prev_dc_inv_7 $0 (fold (prev_dc_inv_5 $0 '.') $0 (lam (lam (cdr $0))))))",
    "(lam (prev_dc_inv_1 $0 (length (fold (prev_dc_inv_5 $0 '.') (range (length (cdr $0))) (lam (lam (cdr $0)))))))",
    "(lam (prev_dc_inv_11 $0 '.'))",
    "(lam (fold (prev_dc_inv_10 $0) $0 (lam (lam (fold (prev_dc_inv_5 $0 '.') $0 (lam (lam (cdr $2))))))))",
    "(lam (prev_dc_inv_5 $0 ','))",
    "(lam (prev_dc_inv_5 (cdr $0) ','))",
    "(lam (prev_dc_inv_5 $0 SPACE))",
    "(lam (prev_dc_inv_5 (cdr $0) SPACE))",
    "(lam (prev_dc_inv_11 $0 SPACE))",
    "(lam (prev_dc_inv_11 (cdr $0) SPACE))",
    "(lam (prev_dc_inv_5 $0 LPAREN))",
    "(lam (prev_dc_inv_5 (cdr $0) LPAREN))",
    "(lam (prev_dc_inv_5 $0 RPAREN))",
    "(lam (prev_dc_inv_14 $0 RPAREN))",
    "(lam (prev_dc_inv_13 (prev_dc_inv_10 (prev_dc_inv_5 $0 RPAREN)) RPAREN '.' LPAREN))",
    "(lam (prev_dc_inv_11 $0 RPAREN))",
    "(lam (fold (cdr $0) $0 (lam (lam (fold (prev_dc_inv_5 $0 RPAREN) $0 (lam (lam (cdr $2))))))))",
    "(lam (lam (prev_dc_inv_8 $0 $1 ',')))",
    "(lam (lam (prev_dc_inv_3 $1 (cons ',' $0))))",
    "(lam (lam (prev_dc_inv_8 $0 $1 SPACE)))",
    "(lam (lam (prev_dc_inv_8 $0 (map (lam $0) $1) SPACE)))",
    "(lam (lam (prev_dc_inv_8 $0 $1 LPAREN)))",
    "(lam (lam (prev_dc_inv_8 $0 (map (lam $0) $1) LPAREN)))",
    "(lam (lam (prev_dc_inv_8 $0 $1 RPAREN)))",
    "(lam (lam (prev_dc_inv_8 $0 (map (lam $0) $1) RPAREN)))",
    "(lam (lam (prev_dc_inv_8 $0 $1 '-')))",
    "(lam (lam (prev_dc_inv_3 $1 (cons '-' $0))))",
    "(lam (lam (prev_dc_inv_9 SPACE $0 $1 SPACE)))",
    "(lam (lam (prev_dc_inv_9 SPACE $0 $1 '.')))",
    "(lam (lam (prev_dc_inv_9 SPACE $0 (map (lam $0) $1) '.')))",
    "(lam (lam (prev_dc_inv_9 ',' $0 $1 LPAREN)))",
    "(lam (lam (prev_dc_inv_9 ',' $0 (map (lam $0) $1) LPAREN)))",
    "(lam (lam (prev_dc_inv_9 '.' $0 $1 '.')))",
    "(lam (lam (prev_dc_inv_3 $1 (cons '.' (cons '.' $0)))))",
    "(lam (lam (prev_dc_inv_9 '-' $0 $1 '.')))",
    "(lam (lam (prev_dc_inv_8 (cons '-' $0) $1 '.')))",
    "(lam (lam (prev_dc_inv_9 '-' $0 $1 SPACE)))",
    "(lam (lam (prev_dc_inv_8 (cons '-' $0) $1 SPACE)))",
    "(lam (prev_dc_inv_7 $0 $0))",
    "(lam (prev_dc_inv_1 $0 (- (length $0) 1)))",
    "(lam (prev_dc_inv_7 $0 (cdr $0)))",
    "(lam (prev_dc_inv_7 $0 (prev_dc_inv_7 $0 $0)))",
    "(lam (prev_dc_inv_7 $0 (cdr (cdr $0))))",
    "(lam (prev_dc_inv_7 $0 (prev_dc_inv_5 $0 (index 1 $0))))",
    "(lam (prev_dc_inv_7 $0 (prev_dc_inv_12 $0 $0)))",
    "(lam (prev_dc_inv_1 $0 (+ 1 (+ 1 1))))",
    "(lam (prev_dc_inv_1 $0 (+ 1 (+ 1 (+ 1 1)))))",
    "(lam (prev_dc_inv_3 (prev_dc_inv_0 $0 (index 1 $0)) (prev_dc_inv_0 (cdr (cdr $0)) (index 1 (cdr (cdr $0))))))",
    "(lam (prev_dc_inv_7 $0 (cdr (cdr (cdr (cdr $0))))))",
    "(lam (prev_dc_inv_7 $0 (range (- (length $0) (length (prev_dc_inv_12 $0 $0))))))",
    "(lam (prev_dc_inv_7 $0 (prev_dc_inv_10 (prev_dc_inv_12 $0 $0))))",
    "(lam (prev_dc_inv_1 $0 (+ (length (prev_dc_inv_12 $0 $0)) 1)))",
    "(lam (prev_dc_inv_13 $0 '.' '.' ','))",
    "(lam (prev_dc_inv_13 $0 '.' '-' ','))",
    "(lam (prev_dc_inv_13 (cons '.' (prev_dc_inv_5 $0 LPAREN)) LPAREN '-' '.'))",
    "(lam (prev_dc_inv_13 (cons '-' (prev_dc_inv_5 $0 LPAREN)) LPAREN '.' '-'))",
    "(lam (prev_dc_inv_14 $0 ','))",
    "(lam (prev_dc_inv_13 (prev_dc_inv_10 (prev_dc_inv_5 $0 ',')) ',' '.' LPAREN))",
    "(lam (prev_dc_inv_13 $0 '-' '-' RPAREN))",
    "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0 (fold (prev_dc_inv_5 $0 '-') $0 (lam (lam (cdr $0))))) RPAREN))",
    "(lam (prev_dc_inv_13 $0 RPAREN LPAREN '-'))",
    "(lam (prev_dc_inv_5 (prev_dc_inv_7 (prev_dc_inv_3 (prev_dc_inv_5 $0 RPAREN) (prev_dc_inv_2 '-' '.' $0)) $0) '.'))",
    "(lam (prev_dc_inv_0 $0 '.'))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_1 $0 1) '.'))",
    "(lam (prev_dc_inv_0 $0 ','))",
    "(lam (cons (car $0) (map (lam ',') (range 1))))",
    "(lam (prev_dc_inv_0 $0 SPACE))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_1 $0 1) SPACE))",
    "(lam (prev_dc_inv_0 $0 '-'))",
    "(lam (cons (car $0) (map (lam '-') (range 1))))",
    "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
    "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
    "(lam (prev_dc_inv_12 (prev_dc_inv_5 $0 '.') $0))",
    "(lam (prev_dc_inv_12 (prev_dc_inv_14 $0 '.') $0))",
    "(lam (lam (prev_dc_inv_12 $0 $1)))",
    "(lam (lam (prev_dc_inv_12 $0 (prev_dc_inv_1 $1 1))))",
    "(lam (lam (prev_dc_inv_12 $0 $1)))",
    "(lam (lam (prev_dc_inv_12 $0 (prev_dc_inv_1 $1 1))))",
    "(lam (prev_dc_inv_12 (prev_dc_inv_5 $0 LPAREN) $0))",
    "(lam (prev_dc_inv_12 (prev_dc_inv_5 (cdr $0) LPAREN) $0))",
    "(lam (lam (prev_dc_inv_12 $0 $1)))",
    "(lam (lam (prev_dc_inv_12 $0 (prev_dc_inv_1 $1 1))))",
    "(lam (prev_dc_inv_12 (prev_dc_inv_5 $0 '-') $0))",
    "(lam (prev_dc_inv_12 (prev_dc_inv_5 (cdr $0) '-') $0))",
    "(lam (lam (prev_dc_inv_3 $1 $0)))",
    "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_3 $1 $0)))",
    "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_3 $1 $0)))",
    "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_3 $1 $0)))",
    "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_3 $1 $0)))",
    "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_3 $1 $0)))",
    "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
    "(lam (prev_dc_inv_4 $0))",
    "(lam (prev_dc_inv_3 STRING $0))",
    "(lam (prev_dc_inv_4 $0))",
    "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_6 $0))",
    "(lam (prev_dc_inv_3 $0 STRING))",
    "(lam (prev_dc_inv_4 $0))",
    "(lam (prev_dc_inv_3 STRING $0))",
    "(lam (prev_dc_inv_6 $0))",
    "(lam (map (lam $0) (prev_dc_inv_6 $0)))",
    "(lam (prev_dc_inv_4 $0))",
    "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_6 $0))",
    "(lam (map (lam $0) (prev_dc_inv_6 $0)))",
    "(lam (prev_dc_inv_4 (prev_dc_inv_14 (cons SPACE $0) SPACE)))",
    "(lam (prev_dc_inv_14 (cons SPACE (prev_dc_inv_4 $0)) SPACE))",
    "(lam (prev_dc_inv_4 $0))",
    "(lam (prev_dc_inv_3 STRING $0))",
    "(lam (prev_dc_inv_6 $0))",
    "(lam (prev_dc_inv_11 (prev_dc_inv_6 $0) '.'))",
    "(lam (prev_dc_inv_4 (prev_dc_inv_14 (cons SPACE $0) SPACE)))",
    "(lam (prev_dc_inv_14 (cons SPACE (prev_dc_inv_4 $0)) SPACE))",
    "(lam (prev_dc_inv_4 $0))",
    "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_6 $0))",
    "(lam (map (lam $0) (prev_dc_inv_6 $0)))",
    "(lam (prev_dc_inv_10 $0))",
    "(lam (cons LPAREN (prev_dc_inv_8 empty $0 RPAREN)))",
    "(lam (prev_dc_inv_10 $0))",
    "(lam (cons LPAREN (prev_dc_inv_8 empty $0 RPAREN)))",
    "(lam (prev_dc_inv_10 $0))",
    "(lam (prev_dc_inv_10 (map (lam $0) $0)))"
  ],
  "invs": [
    {
      "body": "(lam (lam (#1 $0 $1 #0)))",
      "dreamcoder": "#(lambda (lambda (lambda (lambda ($2 $0 $1 $3)))))",
      "arity": 2,
      "name": "fn_15",
      "rewritten": [
        "(lam (prev_dc_inv_2 ',' LPAREN $0))",
        "(lam (prev_dc_inv_2 ',' LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 '-' ',' $0))",
        "(lam (prev_dc_inv_2 '-' ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 LPAREN '.' $0))",
        "(lam (prev_dc_inv_2 LPAREN '.' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 ',' '.' $0))",
        "(lam (prev_dc_inv_2 ',' '.' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 LPAREN RPAREN $0))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_2 LPAREN RPAREN $0) '.'))",
        "(lam (prev_dc_inv_2 '-' SPACE $0))",
        "(lam (prev_dc_inv_2 '-' SPACE (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 SPACE LPAREN $0))",
        "(lam (prev_dc_inv_2 SPACE LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 $0 '.'))",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(lam (prev_dc_inv_7 $0 (fold (prev_dc_inv_5 $0 '.') $0 (lam (lam (cdr $0))))))",
        "(lam (prev_dc_inv_1 $0 (length (fold (prev_dc_inv_5 $0 '.') (range (length (cdr $0))) (lam (lam (cdr $0)))))))",
        "(lam (prev_dc_inv_11 $0 '.'))",
        "(lam (fold (prev_dc_inv_10 $0) $0 (lam (lam (fold (prev_dc_inv_5 $0 '.') $0 (lam (lam (cdr $2))))))))",
        "(lam (prev_dc_inv_5 $0 ','))",
        "(lam (prev_dc_inv_5 (cdr $0) ','))",
        "(lam (prev_dc_inv_5 $0 SPACE))",
        "(lam (prev_dc_inv_5 (cdr $0) SPACE))",
        "(lam (prev_dc_inv_11 $0 SPACE))",
        "(lam (prev_dc_inv_11 (cdr $0) SPACE))",
        "(lam (prev_dc_inv_5 $0 LPAREN))",
        "(lam (prev_dc_inv_5 (cdr $0) LPAREN))",
        "(lam (prev_dc_inv_5 $0 RPAREN))",
        "(lam (prev_dc_inv_14 $0 RPAREN))",
        "(lam (prev_dc_inv_13 (prev_dc_inv_10 (prev_dc_inv_5 $0 RPAREN)) RPAREN '.' LPAREN))",
        "(lam (prev_dc_inv_11 $0 RPAREN))",
        "(lam (fold (cdr $0) $0 (lam (lam (fold (prev_dc_inv_5 $0 RPAREN) $0 (lam (lam (cdr $2))))))))",
        "(fn_15 ',' prev_dc_inv_8)",
        "(lam (lam (prev_dc_inv_3 $1 (cons ',' $0))))",
        "(fn_15 SPACE prev_dc_inv_8)",
        "(lam (lam (prev_dc_inv_8 $0 (map (lam $0) $1) SPACE)))",
        "(fn_15 LPAREN prev_dc_inv_8)",
        "(lam (lam (prev_dc_inv_8 $0 (map (lam $0) $1) LPAREN)))",
        "(fn_15 RPAREN prev_dc_inv_8)",
        "(lam (lam (prev_dc_inv_8 $0 (map (lam $0) $1) RPAREN)))",
        "(fn_15 '-' prev_dc_inv_8)",
        "(lam (lam (prev_dc_inv_3 $1 (cons '-' $0))))",
        "(fn_15 SPACE (prev_dc_inv_9 SPACE))",
        "(fn_15 '.' (prev_dc_inv_9 SPACE))",
        "(lam (lam (prev_dc_inv_9 SPACE $0 (map (lam $0) $1) '.')))",
        "(fn_15 LPAREN (prev_dc_inv_9 ','))",
        "(lam (lam (prev_dc_inv_9 ',' $0 (map (lam $0) $1) LPAREN)))",
        "(fn_15 '.' (prev_dc_inv_9 '.'))",
        "(lam (lam (prev_dc_inv_3 $1 (cons '.' (cons '.' $0)))))",
        "(fn_15 '.' (prev_dc_inv_9 '-'))",
        "(lam (lam (prev_dc_inv_8 (cons '-' $0) $1 '.')))",
        "(fn_15 SPACE (prev_dc_inv_9 '-'))",
        "(lam (lam (prev_dc_inv_8 (cons '-' $0) $1 SPACE)))",
        "(lam (prev_dc_inv_7 $0 $0))",
        "(lam (prev_dc_inv_1 $0 (- (length $0) 1)))",
        "(lam (prev_dc_inv_7 $0 (cdr $0)))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_7 $0 $0)))",
        "(lam (prev_dc_inv_7 $0 (cdr (cdr $0))))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_5 $0 (index 1 $0))))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_12 $0 $0)))",
        "(lam (prev_dc_inv_1 $0 (+ 1 (+ 1 1))))",
        "(lam (prev_dc_inv_1 $0 (+ 1 (+ 1 (+ 1 1)))))",
        "(lam (prev_dc_inv_3 (prev_dc_inv_0 $0 (index 1 $0)) (prev_dc_inv_0 (cdr (cdr $0)) (index 1 (cdr (cdr $0))))))",
        "(lam (prev_dc_inv_7 $0 (cdr (cdr (cdr (cdr $0))))))",
        "(lam (prev_dc_inv_7 $0 (range (- (length $0) (length (prev_dc_inv_12 $0 $0))))))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_10 (prev_dc_inv_12 $0 $0))))",
        "(lam (prev_dc_inv_1 $0 (+ (length (prev_dc_inv_12 $0 $0)) 1)))",
        "(lam (prev_dc_inv_13 $0 '.' '.' ','))",
        "(lam (prev_dc_inv_13 $0 '.' '-' ','))",
        "(lam (prev_dc_inv_13 (cons '.' (prev_dc_inv_5 $0 LPAREN)) LPAREN '-' '.'))",
        "(lam (prev_dc_inv_13 (cons '-' (prev_dc_inv_5 $0 LPAREN)) LPAREN '.' '-'))",
        "(lam (prev_dc_inv_14 $0 ','))",
        "(lam (prev_dc_inv_13 (prev_dc_inv_10 (prev_dc_inv_5 $0 ',')) ',' '.' LPAREN))",
        "(lam (prev_dc_inv_13 $0 '-' '-' RPAREN))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0 (fold (prev_dc_inv_5 $0 '-') $0 (lam (lam (cdr $0))))) RPAREN))",
        "(lam (prev_dc_inv_13 $0 RPAREN LPAREN '-'))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_7 (prev_dc_inv_3 (prev_dc_inv_5 $0 RPAREN) (prev_dc_inv_2 '-' '.' $0)) $0) '.'))",
        "(lam (prev_dc_inv_0 $0 '.'))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_1 $0 1) '.'))",
        "(lam (prev_dc_inv_0 $0 ','))",
        "(lam (cons (car $0) (map (lam ',') (range 1))))",
        "(lam (prev_dc_inv_0 $0 SPACE))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_1 $0 1) SPACE))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_5 $0 '.') $0))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_14 $0 '.') $0))",
        "(lam (lam (prev_dc_inv_12 $0 $1)))",
        "(lam (lam (prev_dc_inv_12 $0 (prev_dc_inv_1 $1 1))))",
        "(lam (lam (prev_dc_inv_12 $0 $1)))",
        "(lam (lam (prev_dc_inv_12 $0 (prev_dc_inv_1 $1 1))))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_5 $0 LPAREN) $0))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_5 (cdr $0) LPAREN) $0))",
        "(lam (lam (prev_dc_inv_12 $0 $1)))",
        "(lam (lam (prev_dc_inv_12 $0 (prev_dc_inv_1 $1 1))))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_5 $0 '-') $0))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_5 (cdr $0) '-') $0))",
        "(lam (lam (prev_dc_inv_3 $1 $0)))",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_3 $1 $0)))",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_3 $1 $0)))",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_3 $1 $0)))",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_3 $1 $0)))",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_3 $1 $0)))",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_3 STRING $0))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_3 $0 STRING))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_3 STRING $0))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (map (lam $0) (prev_dc_inv_6 $0)))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (map (lam $0) (prev_dc_inv_6 $0)))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_14 (cons SPACE $0) SPACE)))",
        "(lam (prev_dc_inv_14 (cons SPACE (prev_dc_inv_4 $0)) SPACE))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_3 STRING $0))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_6 $0) '.'))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_14 (cons SPACE $0) SPACE)))",
        "(lam (prev_dc_inv_14 (cons SPACE (prev_dc_inv_4 $0)) SPACE))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (map (lam $0) (prev_dc_inv_6 $0)))",
        "(lam (prev_dc_inv_10 $0))",
        "(lam (cons LPAREN (prev_dc_inv_8 empty $0 RPAREN)))",
        "(lam (prev_dc_inv_10 $0))",
        "(lam (cons LPAREN (prev_dc_inv_8 empty $0 RPAREN)))",
        "(lam (prev_dc_inv_10 $0))",
        "(lam (prev_dc_inv_10 (map (lam $0) $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN '.' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN '.' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' '.' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' '.' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 $2) $0 (lambda (lambda (cdr $2))))))))) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0) '.'))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '.'))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '.') $0 (lambda (lambda (cdr $0))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (length (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '.') (range (length (cdr $0))) (lambda (lambda (cdr $0)))))))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 $2) $0 (lambda (lambda (cdr $2))))))))) $0 '.'))",
        "(lambda (fold (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) $0) $0 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '.') $0 (lambda (lambda (cdr $2))))))))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 ','))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (cdr $0) ','))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (cdr $0) SPACE))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 $2) $0 (lambda (lambda (cdr $2))))))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 $2) $0 (lambda (lambda (cdr $2))))))))) (cdr $0) SPACE))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 LPAREN))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (cdr $0) LPAREN))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $1 $0)) $0 '-' LPAREN))) $0 RPAREN))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN)) RPAREN '.' LPAREN))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 $2) $0 (lambda (lambda (cdr $2))))))))) $0 RPAREN))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN) $0 (lambda (lambda (cdr $2))))))))",
        "(#(lambda (lambda (lambda (lambda ($2 $0 $1 $3))))) ',' #(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons ',' $0))))",
        "(#(lambda (lambda (lambda (lambda ($2 $0 $1 $3))))) SPACE #(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 (map (lambda $0) $1) SPACE)))",
        "(#(lambda (lambda (lambda (lambda ($2 $0 $1 $3))))) LPAREN #(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 (map (lambda $0) $1) LPAREN)))",
        "(#(lambda (lambda (lambda (lambda ($2 $0 $1 $3))))) RPAREN #(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 (map (lambda $0) $1) RPAREN)))",
        "(#(lambda (lambda (lambda (lambda ($2 $0 $1 $3))))) '-' #(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons '-' $0))))",
        "(#(lambda (lambda (lambda (lambda ($2 $0 $1 $3))))) SPACE (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) SPACE))",
        "(#(lambda (lambda (lambda (lambda ($2 $0 $1 $3))))) '.' (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) SPACE))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) SPACE $0 (map (lambda $0) $1) '.')))",
        "(#(lambda (lambda (lambda (lambda ($2 $0 $1 $3))))) LPAREN (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) ','))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) ',' $0 (map (lambda $0) $1) LPAREN)))",
        "(#(lambda (lambda (lambda (lambda ($2 $0 $1 $3))))) '.' (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) '.'))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons '.' (cons '.' $0)))))",
        "(#(lambda (lambda (lambda (lambda ($2 $0 $1 $3))))) '.' (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) '-'))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons '-' $0) $1 '.')))",
        "(#(lambda (lambda (lambda (lambda ($2 $0 $1 $3))))) SPACE (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) '-'))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons '-' $0) $1 SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (- (length $0) 1)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (cdr $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (cdr (cdr $0))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 (index 1 $0))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 $0)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ 1 (+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 (index 1 $0)) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (cdr (cdr $0)) (index 1 (cdr (cdr $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (cdr (cdr (cdr (cdr $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (range (- (length $0) (length (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 $0))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ (length (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 $0)) 1)))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) $0 '.' '.' ','))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) $0 '.' '-' ','))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (cons '.' (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 LPAREN)) LPAREN '-' '.'))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (cons '-' (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 LPAREN)) LPAREN '.' '-'))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $1 $0)) $0 '-' LPAREN))) $0 ','))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 ',')) ',' '.' LPAREN))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) $0 '-' '-' RPAREN))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '-') $0 (lambda (lambda (cdr $0))))) RPAREN))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) $0 RPAREN LPAREN '-'))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' '.' $0)) $0) '.'))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.'))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 1) '.'))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (cons (car $0) (map (lambda ',') (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 1) SPACE))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '.') $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $1 $0)) $0 '-' LPAREN))) $0 '.') $0))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 1))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 LPAREN) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (cdr $0) LPAREN) $0))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 1))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '-') $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (cdr $0) '-') $0))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (map (lambda $0) (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0)))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (map (lambda $0) (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0)))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $1 $0)) $0 '-' LPAREN))) (cons SPACE $0) SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $1 $0)) $0 '-' LPAREN))) (cons SPACE (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0)) SPACE))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 $2) $0 (lambda (lambda (cdr $2))))))))) (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) '.'))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $1 $0)) $0 '-' LPAREN))) (cons SPACE $0) SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $1 $0)) $0 '-' LPAREN))) (cons SPACE (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0)) SPACE))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (map (lambda $0) (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty $0 RPAREN)))",
        "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty $0 RPAREN)))",
        "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (map (lambda $0) $0)))"
      ],
      "utility": 928,
      "expected_cost": 27372,
      "final_cost": 27372,
      "multiplier": 1.0413926640362414,
      "multiplier_wrt_orig": 1.0413926640362414,
      "num_uses": 11,
      "uses": [
        {
          "fn_15 ',' prev_dc_inv_8": "(lam (lam (prev_dc_inv_8 $0 $1 ',')))"
        },
        {
          "fn_15 '-' prev_dc_inv_8": "(lam (lam (prev_dc_inv_8 $0 $1 '-')))"
        },
        {
          "fn_15 LPAREN prev_dc_inv_8": "(lam (lam (prev_dc_inv_8 $0 $1 LPAREN)))"
        },
        {
          "fn_15 RPAREN prev_dc_inv_8": "(lam (lam (prev_dc_inv_8 $0 $1 RPAREN)))"
        },
        {
          "fn_15 SPACE prev_dc_inv_8": "(lam (lam (prev_dc_inv_8 $0 $1 SPACE)))"
        },
        {
          "fn_15 LPAREN (prev_dc_inv_9 ',')": "(lam (lam (prev_dc_inv_9 ',' $0 $1 LPAREN)))"
        },
        {
          "fn_15 '.' (prev_dc_inv_9 '-')": "(lam (lam (prev_dc_inv_9 '-' $0 $1 '.')))"
        },
        {
          "fn_15 SPACE (prev_dc_inv_9 '-')": "(lam (lam (prev_dc_inv_9 '-' $0 $1 SPACE)))"
        },
        {
          "fn_15 '.' (prev_dc_inv_9 '.')": "(lam (lam (prev_dc_inv_9 '.' $0 $1 '.')))"
        },
        {
          "fn_15 '.' (prev_dc_inv_9 SPACE)": "(lam (lam (prev_dc_inv_9 SPACE $0 $1 '.')))"
        },
        {
          "fn_15 SPACE (prev_dc_inv_9 SPACE)": "(lam (lam (prev_dc_inv_9 SPACE $0 $1 SPACE)))"
        }
      ]
    },
    {
      "body": "(lam (lam (prev_dc_inv_3 $1 $0)))",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
      "arity": 0,
      "name": "fn_16",
      "rewritten": [
        "(lam (prev_dc_inv_2 ',' LPAREN $0))",
        "(lam (prev_dc_inv_2 ',' LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 '-' ',' $0))",
        "(lam (prev_dc_inv_2 '-' ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 LPAREN '.' $0))",
        "(lam (prev_dc_inv_2 LPAREN '.' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 ',' '.' $0))",
        "(lam (prev_dc_inv_2 ',' '.' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 LPAREN RPAREN $0))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_2 LPAREN RPAREN $0) '.'))",
        "(lam (prev_dc_inv_2 '-' SPACE $0))",
        "(lam (prev_dc_inv_2 '-' SPACE (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 SPACE LPAREN $0))",
        "(lam (prev_dc_inv_2 SPACE LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 $0 '.'))",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(lam (prev_dc_inv_7 $0 (fold (prev_dc_inv_5 $0 '.') $0 (lam (lam (cdr $0))))))",
        "(lam (prev_dc_inv_1 $0 (length (fold (prev_dc_inv_5 $0 '.') (range (length (cdr $0))) (lam (lam (cdr $0)))))))",
        "(lam (prev_dc_inv_11 $0 '.'))",
        "(lam (fold (prev_dc_inv_10 $0) $0 (lam (lam (fold (prev_dc_inv_5 $0 '.') $0 (lam (lam (cdr $2))))))))",
        "(lam (prev_dc_inv_5 $0 ','))",
        "(lam (prev_dc_inv_5 (cdr $0) ','))",
        "(lam (prev_dc_inv_5 $0 SPACE))",
        "(lam (prev_dc_inv_5 (cdr $0) SPACE))",
        "(lam (prev_dc_inv_11 $0 SPACE))",
        "(lam (prev_dc_inv_11 (cdr $0) SPACE))",
        "(lam (prev_dc_inv_5 $0 LPAREN))",
        "(lam (prev_dc_inv_5 (cdr $0) LPAREN))",
        "(lam (prev_dc_inv_5 $0 RPAREN))",
        "(lam (prev_dc_inv_14 $0 RPAREN))",
        "(lam (prev_dc_inv_13 (prev_dc_inv_10 (prev_dc_inv_5 $0 RPAREN)) RPAREN '.' LPAREN))",
        "(lam (prev_dc_inv_11 $0 RPAREN))",
        "(lam (fold (cdr $0) $0 (lam (lam (fold (prev_dc_inv_5 $0 RPAREN) $0 (lam (lam (cdr $2))))))))",
        "(fn_15 ',' prev_dc_inv_8)",
        "(lam (lam (prev_dc_inv_3 $1 (cons ',' $0))))",
        "(fn_15 SPACE prev_dc_inv_8)",
        "(lam (lam (prev_dc_inv_8 $0 (map (lam $0) $1) SPACE)))",
        "(fn_15 LPAREN prev_dc_inv_8)",
        "(lam (lam (prev_dc_inv_8 $0 (map (lam $0) $1) LPAREN)))",
        "(fn_15 RPAREN prev_dc_inv_8)",
        "(lam (lam (prev_dc_inv_8 $0 (map (lam $0) $1) RPAREN)))",
        "(fn_15 '-' prev_dc_inv_8)",
        "(lam (lam (prev_dc_inv_3 $1 (cons '-' $0))))",
        "(fn_15 SPACE (prev_dc_inv_9 SPACE))",
        "(fn_15 '.' (prev_dc_inv_9 SPACE))",
        "(lam (lam (prev_dc_inv_9 SPACE $0 (map (lam $0) $1) '.')))",
        "(fn_15 LPAREN (prev_dc_inv_9 ','))",
        "(lam (lam (prev_dc_inv_9 ',' $0 (map (lam $0) $1) LPAREN)))",
        "(fn_15 '.' (prev_dc_inv_9 '.'))",
        "(lam (lam (prev_dc_inv_3 $1 (cons '.' (cons '.' $0)))))",
        "(fn_15 '.' (prev_dc_inv_9 '-'))",
        "(lam (lam (prev_dc_inv_8 (cons '-' $0) $1 '.')))",
        "(fn_15 SPACE (prev_dc_inv_9 '-'))",
        "(lam (lam (prev_dc_inv_8 (cons '-' $0) $1 SPACE)))",
        "(lam (prev_dc_inv_7 $0 $0))",
        "(lam (prev_dc_inv_1 $0 (- (length $0) 1)))",
        "(lam (prev_dc_inv_7 $0 (cdr $0)))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_7 $0 $0)))",
        "(lam (prev_dc_inv_7 $0 (cdr (cdr $0))))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_5 $0 (index 1 $0))))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_12 $0 $0)))",
        "(lam (prev_dc_inv_1 $0 (+ 1 (+ 1 1))))",
        "(lam (prev_dc_inv_1 $0 (+ 1 (+ 1 (+ 1 1)))))",
        "(lam (prev_dc_inv_3 (prev_dc_inv_0 $0 (index 1 $0)) (prev_dc_inv_0 (cdr (cdr $0)) (index 1 (cdr (cdr $0))))))",
        "(lam (prev_dc_inv_7 $0 (cdr (cdr (cdr (cdr $0))))))",
        "(lam (prev_dc_inv_7 $0 (range (- (length $0) (length (prev_dc_inv_12 $0 $0))))))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_10 (prev_dc_inv_12 $0 $0))))",
        "(lam (prev_dc_inv_1 $0 (+ (length (prev_dc_inv_12 $0 $0)) 1)))",
        "(lam (prev_dc_inv_13 $0 '.' '.' ','))",
        "(lam (prev_dc_inv_13 $0 '.' '-' ','))",
        "(lam (prev_dc_inv_13 (cons '.' (prev_dc_inv_5 $0 LPAREN)) LPAREN '-' '.'))",
        "(lam (prev_dc_inv_13 (cons '-' (prev_dc_inv_5 $0 LPAREN)) LPAREN '.' '-'))",
        "(lam (prev_dc_inv_14 $0 ','))",
        "(lam (prev_dc_inv_13 (prev_dc_inv_10 (prev_dc_inv_5 $0 ',')) ',' '.' LPAREN))",
        "(lam (prev_dc_inv_13 $0 '-' '-' RPAREN))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0 (fold (prev_dc_inv_5 $0 '-') $0 (lam (lam (cdr $0))))) RPAREN))",
        "(lam (prev_dc_inv_13 $0 RPAREN LPAREN '-'))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_7 (prev_dc_inv_3 (prev_dc_inv_5 $0 RPAREN) (prev_dc_inv_2 '-' '.' $0)) $0) '.'))",
        "(lam (prev_dc_inv_0 $0 '.'))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_1 $0 1) '.'))",
        "(lam (prev_dc_inv_0 $0 ','))",
        "(lam (cons (car $0) (map (lam ',') (range 1))))",
        "(lam (prev_dc_inv_0 $0 SPACE))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_1 $0 1) SPACE))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_5 $0 '.') $0))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_14 $0 '.') $0))",
        "(lam (lam (prev_dc_inv_12 $0 $1)))",
        "(lam (lam (prev_dc_inv_12 $0 (prev_dc_inv_1 $1 1))))",
        "(lam (lam (prev_dc_inv_12 $0 $1)))",
        "(lam (lam (prev_dc_inv_12 $0 (prev_dc_inv_1 $1 1))))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_5 $0 LPAREN) $0))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_5 (cdr $0) LPAREN) $0))",
        "(lam (lam (prev_dc_inv_12 $0 $1)))",
        "(lam (lam (prev_dc_inv_12 $0 (prev_dc_inv_1 $1 1))))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_5 $0 '-') $0))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_5 (cdr $0) '-') $0))",
        "fn_16",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "fn_16",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "fn_16",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "fn_16",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "fn_16",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "fn_16",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_3 STRING $0))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_3 $0 STRING))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_3 STRING $0))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (map (lam $0) (prev_dc_inv_6 $0)))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (map (lam $0) (prev_dc_inv_6 $0)))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_14 (cons SPACE $0) SPACE)))",
        "(lam (prev_dc_inv_14 (cons SPACE (prev_dc_inv_4 $0)) SPACE))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_3 STRING $0))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_6 $0) '.'))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_14 (cons SPACE $0) SPACE)))",
        "(lam (prev_dc_inv_14 (cons SPACE (prev_dc_inv_4 $0)) SPACE))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (map (lam $0) (prev_dc_inv_6 $0)))",
        "(lam (prev_dc_inv_10 $0))",
        "(lam (cons LPAREN (prev_dc_inv_8 empty $0 RPAREN)))",
        "(lam (prev_dc_inv_10 $0))",
        "(lam (cons LPAREN (prev_dc_inv_8 empty $0 RPAREN)))",
        "(lam (prev_dc_inv_10 $0))",
        "(lam (prev_dc_inv_10 (map (lam $0) $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN '.' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN '.' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' '.' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' '.' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 $2) $0 (lambda (lambda (cdr $2))))))))) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0) '.'))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '.'))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '.') $0 (lambda (lambda (cdr $0))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (length (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '.') (range (length (cdr $0))) (lambda (lambda (cdr $0)))))))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 $2) $0 (lambda (lambda (cdr $2))))))))) $0 '.'))",
        "(lambda (fold (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) $0) $0 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '.') $0 (lambda (lambda (cdr $2))))))))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 ','))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (cdr $0) ','))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (cdr $0) SPACE))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 $2) $0 (lambda (lambda (cdr $2))))))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 $2) $0 (lambda (lambda (cdr $2))))))))) (cdr $0) SPACE))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 LPAREN))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (cdr $0) LPAREN))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $1 $0)) $0 '-' LPAREN))) $0 RPAREN))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN)) RPAREN '.' LPAREN))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 $2) $0 (lambda (lambda (cdr $2))))))))) $0 RPAREN))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN) $0 (lambda (lambda (cdr $2))))))))",
        "(fn_15 ',' #(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons ',' $0))))",
        "(fn_15 SPACE #(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 (map (lambda $0) $1) SPACE)))",
        "(fn_15 LPAREN #(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 (map (lambda $0) $1) LPAREN)))",
        "(fn_15 RPAREN #(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 (map (lambda $0) $1) RPAREN)))",
        "(fn_15 '-' #(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons '-' $0))))",
        "(fn_15 SPACE (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) SPACE))",
        "(fn_15 '.' (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) SPACE))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) SPACE $0 (map (lambda $0) $1) '.')))",
        "(fn_15 LPAREN (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) ','))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) ',' $0 (map (lambda $0) $1) LPAREN)))",
        "(fn_15 '.' (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) '.'))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons '.' (cons '.' $0)))))",
        "(fn_15 '.' (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) '-'))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons '-' $0) $1 '.')))",
        "(fn_15 SPACE (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons $1 $0)))) '-'))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons '-' $0) $1 SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (- (length $0) 1)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (cdr $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (cdr (cdr $0))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 (index 1 $0))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 $0)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ 1 (+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 (index 1 $0)) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (cdr (cdr $0)) (index 1 (cdr (cdr $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (cdr (cdr (cdr (cdr $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (range (- (length $0) (length (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 $0))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ (length (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 $0)) 1)))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) $0 '.' '.' ','))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) $0 '.' '-' ','))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (cons '.' (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 LPAREN)) LPAREN '-' '.'))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (cons '-' (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 LPAREN)) LPAREN '.' '-'))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $1 $0)) $0 '-' LPAREN))) $0 ','))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 ',')) ',' '.' LPAREN))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) $0 '-' '-' RPAREN))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) $0 (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '-') $0 (lambda (lambda (cdr $0))))) RPAREN))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) $0 RPAREN LPAREN '-'))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' '.' $0)) $0) '.'))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.'))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 1) '.'))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (cons (car $0) (map (lambda ',') (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 1) SPACE))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '.') $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $1 $0)) $0 '-' LPAREN))) $0 '.') $0))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 1))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 LPAREN) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (cdr $0) LPAREN) $0))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) $0 (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 1))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '-') $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.')))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (cdr $0) '-') $0))",
        "#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (map (lambda $0) (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0)))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (map (lambda $0) (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0)))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $1 $0)) $0 '-' LPAREN))) (cons SPACE $0) SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $1 $0)) $0 '-' LPAREN))) (cons SPACE (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0)) SPACE))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 $2) $0 (lambda (lambda (cdr $2))))))))) (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) '.'))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $1 $0)) $0 '-' LPAREN))) (cons SPACE $0) SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 (length (cdr $0))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $2 $1)) $2) $2))))) (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $1 $0)) $0 '-' LPAREN))) (cons SPACE (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0)) SPACE))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (map (lambda $0) (#(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty $0 RPAREN)))",
        "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty $0 RPAREN)))",
        "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (map (lambda $0) $0)))"
      ],
      "utility": 920,
      "expected_cost": 26148,
      "final_cost": 26148,
      "multiplier": 1.046810463515374,
      "multiplier_wrt_orig": 1.0901407373412881,
      "num_uses": 6,
      "uses": [
        {
          "fn_16 ": "(lam (lam (prev_dc_inv_3 $1 $0)))"
        }
      ]
    }
  ]
}