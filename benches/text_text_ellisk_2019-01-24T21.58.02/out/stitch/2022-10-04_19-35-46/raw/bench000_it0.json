{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/bench000_it0.json --max-arity=3 --threads=1 --iterations=1 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/out/stitch/2022-10-04_19-35-46/raw/bench000_it0.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/bench000_it0.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/out/stitch/2022-10-04_19-35-46/raw/bench000_it0.json",
    "iterations": 1,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 7387,
  "original": [
    "(lam (map (lam (if (char-eq? $0 '-') ',' $0)) $0))",
    "(lam (map (lam (if (char-eq? '-' $0) ',' $0)) $0))",
    "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? RPAREN $1) $2 $0))))))",
    "(lam (lam (fold $1 (cons SPACE (cons SPACE $0)) (lam (lam (cons $1 $0))))))",
    "(lam (lam (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
    "(lam (lam (cons (car $1) (cons '.' (cons (index 0 $0) (cons '.' empty))))))",
    "(lam (fold $0 STRING (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (map (lam $0) STRING) (lam (lam (cons $1 $0)))))"
  ],
  "invs": [
    {
      "body": "(fold #1 #0 (lam (lam (cons $1 $0))))",
      "dreamcoder": "#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0))))))",
      "arity": 2,
      "name": "fn_0",
      "rewritten": [
        "(lam (map (lam (if (char-eq? $0 '-') ',' $0)) $0))",
        "(lam (map (lam (if (char-eq? '-' $0) ',' $0)) $0))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? RPAREN $1) $2 $0))))))",
        "(lam (lam (fn_0 (cons SPACE (cons SPACE $0)) $1)))",
        "(lam (lam (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
        "(lam (lam (cons (car $1) (cons '.' (cons (index 0 $0) (cons '.' empty))))))",
        "(lam (fn_0 STRING $0))",
        "(lam (fn_0 (map (lam $0) STRING) $0))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (if (char-eq? $0 '-') ',' $0)) $0))",
        "(lambda (map (lambda (if (char-eq? '-' $0) ',' $0)) $0))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? RPAREN $1) $2 $0))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons SPACE (cons SPACE $0)) $1)))",
        "(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
        "(lambda (lambda (cons (car $1) (cons '.' (cons (index 0 $0) (cons '.' empty))))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))"
      ],
      "utility": 203,
      "expected_cost": 3944,
      "final_cost": 3944,
      "multiplier": 1.1546653144016228,
      "multiplier_wrt_orig": 1.1546653144016228,
      "num_uses": 3,
      "uses": [
        {
          "fn_0 (map (lam $0) STRING) $0": "(fold $0 (map (lam $0) STRING) (lam (lam (cons $1 $0))))"
        },
        {
          "fn_0 STRING $0": "(fold $0 STRING (lam (lam (cons $1 $0))))"
        },
        {
          "fn_0 (cons SPACE (cons SPACE $0)) $1": "(fold $1 (cons SPACE (cons SPACE $0)) (lam (lam (cons $1 $0))))"
        }
      ]
    }
  ]
}