{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/bench003_it4.json --max-arity=3 --threads=1 --iterations=3 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/out/stitch/2022-10-04_19-35-46/raw/bench003_it4.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/bench003_it4.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.58.02/out/stitch/2022-10-04_19-35-46/raw/bench003_it4.json",
    "iterations": 3,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 36415,
  "original": [
    "(lam (prev_dc_inv_1 ',' LPAREN $0))",
    "(lam (prev_dc_inv_1 ',' LPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_1 '-' ',' $0))",
    "(lam (prev_dc_inv_1 '-' ',' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_1 '-' SPACE $0))",
    "(lam (map (lam $0) (prev_dc_inv_1 '-' SPACE $0)))",
    "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
    "(lam (map (lam $0) (prev_dc_inv_1 SPACE LPAREN $0)))",
    "(lam (prev_dc_inv_4 $0 '.'))",
    "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
    "(lam (prev_dc_inv_4 $0 ','))",
    "(lam (prev_dc_inv_4 (cdr $0) ','))",
    "(lam (prev_dc_inv_4 $0 RPAREN))",
    "(lam (fold $0 $0 (lam (lam (fold (prev_dc_inv_4 $0 RPAREN) $0 (lam (lam (cdr $2))))))))",
    "(lam (fold (cdr $0) $0 (lam (lam (fold (prev_dc_inv_4 $0 RPAREN) $0 (lam (lam (cdr $2))))))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons SPACE $0))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons SPACE (map (lam $0) $0)))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons LPAREN $0))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons LPAREN (map (lam $0) $0)))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons RPAREN $0))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons RPAREN (map (lam $0) $0)))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons SPACE (cons SPACE $0)))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons '.' (cons SPACE $0)))))",
    "(lam (lam (prev_dc_inv_2 (map (lam $0) $1) (cons '.' (cons SPACE $0)))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons LPAREN (cons ',' $0)))))",
    "(lam (lam (prev_dc_inv_2 (map (lam $0) $1) (cons LPAREN (cons ',' $0)))))",
    "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
    "(lam (map (lam (index $0 $1)) (range (- (length $0) 1))))",
    "(lam (map (lam (index $0 $1)) (range (length (cdr (cdr (cdr $0)))))))",
    "(lam (map (lam (index $0 $1)) (range (length (cdr (prev_dc_inv_4 $0 (index 1 $0)))))))",
    "(lam (map (lam (index $0 $1)) (range (+ 1 (+ 1 (+ 1 1))))))",
    "(lam (prev_dc_inv_2 (prev_dc_inv_0 $0 (index 1 $0)) (prev_dc_inv_0 (cdr (cdr $0)) (index 1 (cdr (cdr $0))))))",
    "(lam (prev_dc_inv_0 $0 ','))",
    "(lam (cons (car $0) (map (lam ',') (range 1))))",
    "(lam (prev_dc_inv_0 $0 '-'))",
    "(lam (cons (car $0) (map (lam '-') (range 1))))",
    "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
    "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
    "(lam (prev_dc_inv_2 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 (prev_dc_inv_4 $0 LPAREN) '.')))",
    "(lam (cons (car $0) (cons '.' (prev_dc_inv_0 (prev_dc_inv_4 $0 LPAREN) '.'))))",
    "(lam (lam (prev_dc_inv_2 $1 $0)))",
    "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_2 $1 $0)))",
    "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_2 $1 $0)))",
    "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_2 $1 $0)))",
    "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
    "(lam (prev_dc_inv_3 $0))",
    "(lam (prev_dc_inv_2 STRING $0))",
    "(lam (prev_dc_inv_3 $0))",
    "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 $0 STRING))",
    "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
    "(lam (prev_dc_inv_3 $0))",
    "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_3 $0))",
    "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 (cons LPAREN $0) (cons RPAREN empty)))",
    "(lam (cons LPAREN (prev_dc_inv_2 $0 (cons RPAREN empty))))"
  ],
  "invs": [
    {
      "body": "(lam (lam (prev_dc_inv_2 $1 (cons #1 (#0 $0)))))",
      "dreamcoder": "#(lambda (lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $2 ($3 $0)))))))",
      "arity": 2,
      "name": "fn_5",
      "rewritten": [
        "(lam (prev_dc_inv_1 ',' LPAREN $0))",
        "(lam (prev_dc_inv_1 ',' LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 '-' ',' $0))",
        "(lam (prev_dc_inv_1 '-' ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 '-' SPACE $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 '-' SPACE $0)))",
        "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 SPACE LPAREN $0)))",
        "(lam (prev_dc_inv_4 $0 '.'))",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(lam (prev_dc_inv_4 $0 ','))",
        "(lam (prev_dc_inv_4 (cdr $0) ','))",
        "(lam (prev_dc_inv_4 $0 RPAREN))",
        "(lam (fold $0 $0 (lam (lam (fold (prev_dc_inv_4 $0 RPAREN) $0 (lam (lam (cdr $2))))))))",
        "(lam (fold (cdr $0) $0 (lam (lam (fold (prev_dc_inv_4 $0 RPAREN) $0 (lam (lam (cdr $2))))))))",
        "(lam (lam (prev_dc_inv_2 $1 (cons SPACE $0))))",
        "(fn_5 (map (lam $0)) SPACE)",
        "(lam (lam (prev_dc_inv_2 $1 (cons LPAREN $0))))",
        "(fn_5 (map (lam $0)) LPAREN)",
        "(lam (lam (prev_dc_inv_2 $1 (cons RPAREN $0))))",
        "(fn_5 (map (lam $0)) RPAREN)",
        "(fn_5 (cons SPACE) SPACE)",
        "(fn_5 (cons SPACE) '.')",
        "(lam (lam (prev_dc_inv_2 (map (lam $0) $1) (cons '.' (cons SPACE $0)))))",
        "(fn_5 (cons ',') LPAREN)",
        "(lam (lam (prev_dc_inv_2 (map (lam $0) $1) (cons LPAREN (cons ',' $0)))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
        "(lam (map (lam (index $0 $1)) (range (- (length $0) 1))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr (cdr (cdr $0)))))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr (prev_dc_inv_4 $0 (index 1 $0)))))))",
        "(lam (map (lam (index $0 $1)) (range (+ 1 (+ 1 (+ 1 1))))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_0 $0 (index 1 $0)) (prev_dc_inv_0 (cdr (cdr $0)) (index 1 (cdr (cdr $0))))))",
        "(lam (prev_dc_inv_0 $0 ','))",
        "(lam (cons (car $0) (map (lam ',') (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 (prev_dc_inv_4 $0 LPAREN) '.')))",
        "(lam (cons (car $0) (cons '.' (prev_dc_inv_0 (prev_dc_inv_4 $0 LPAREN) '.'))))",
        "(lam (lam (prev_dc_inv_2 $1 $0)))",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_2 $1 $0)))",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_2 $1 $0)))",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_2 $1 $0)))",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_2 STRING $0))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 (cons LPAREN $0) (cons RPAREN empty)))",
        "(lam (cons LPAREN (prev_dc_inv_2 $0 (cons RPAREN empty))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0)))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '.'))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 ','))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (cdr $0) ','))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN))",
        "(lambda (fold $0 $0 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN) $0 (lambda (lambda (cdr $2))))))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN) $0 (lambda (lambda (cdr $2))))))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons SPACE $0))))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $2 ($3 $0))))))) (map (lambda $0)) SPACE)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons LPAREN $0))))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $2 ($3 $0))))))) (map (lambda $0)) LPAREN)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons RPAREN $0))))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $2 ($3 $0))))))) (map (lambda $0)) RPAREN)",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $2 ($3 $0))))))) (cons SPACE) SPACE)",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $2 ($3 $0))))))) (cons SPACE) '.')",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $1) (cons '.' (cons SPACE $0)))))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $2 ($3 $0))))))) (cons ',') LPAREN)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $1) (cons LPAREN (cons ',' $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (- (length $0) 1))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr (cdr (cdr $0)))))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 (index 1 $0)))))))",
        "(lambda (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 1))))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 (index 1 $0)) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (cdr (cdr $0)) (index 1 (cdr (cdr $0))))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (cons (car $0) (map (lambda ',') (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 LPAREN) '.')))",
        "(lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 LPAREN) '.'))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) (cons RPAREN empty)))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cons RPAREN empty))))"
      ],
      "utility": 814,
      "expected_cost": 14351,
      "final_cost": 14351,
      "multiplier": 1.0850811790119155,
      "multiplier_wrt_orig": 1.0850811790119155,
      "num_uses": 6,
      "uses": [
        {
          "fn_5 (cons SPACE) '.'": "(lam (lam (prev_dc_inv_2 $1 (cons '.' (cons SPACE $0)))))"
        },
        {
          "fn_5 (cons ',') LPAREN": "(lam (lam (prev_dc_inv_2 $1 (cons LPAREN (cons ',' $0)))))"
        },
        {
          "fn_5 (map (lam $0)) LPAREN": "(lam (lam (prev_dc_inv_2 $1 (cons LPAREN (map (lam $0) $0)))))"
        },
        {
          "fn_5 (map (lam $0)) RPAREN": "(lam (lam (prev_dc_inv_2 $1 (cons RPAREN (map (lam $0) $0)))))"
        },
        {
          "fn_5 (cons SPACE) SPACE": "(lam (lam (prev_dc_inv_2 $1 (cons SPACE (cons SPACE $0)))))"
        },
        {
          "fn_5 (map (lam $0)) SPACE": "(lam (lam (prev_dc_inv_2 $1 (cons SPACE (map (lam $0) $0)))))"
        }
      ]
    },
    {
      "body": "(lam (lam (prev_dc_inv_2 $1 $0)))",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
      "arity": 0,
      "name": "fn_6",
      "rewritten": [
        "(lam (prev_dc_inv_1 ',' LPAREN $0))",
        "(lam (prev_dc_inv_1 ',' LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 '-' ',' $0))",
        "(lam (prev_dc_inv_1 '-' ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 '-' SPACE $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 '-' SPACE $0)))",
        "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 SPACE LPAREN $0)))",
        "(lam (prev_dc_inv_4 $0 '.'))",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(lam (prev_dc_inv_4 $0 ','))",
        "(lam (prev_dc_inv_4 (cdr $0) ','))",
        "(lam (prev_dc_inv_4 $0 RPAREN))",
        "(lam (fold $0 $0 (lam (lam (fold (prev_dc_inv_4 $0 RPAREN) $0 (lam (lam (cdr $2))))))))",
        "(lam (fold (cdr $0) $0 (lam (lam (fold (prev_dc_inv_4 $0 RPAREN) $0 (lam (lam (cdr $2))))))))",
        "(lam (lam (prev_dc_inv_2 $1 (cons SPACE $0))))",
        "(fn_5 (map (lam $0)) SPACE)",
        "(lam (lam (prev_dc_inv_2 $1 (cons LPAREN $0))))",
        "(fn_5 (map (lam $0)) LPAREN)",
        "(lam (lam (prev_dc_inv_2 $1 (cons RPAREN $0))))",
        "(fn_5 (map (lam $0)) RPAREN)",
        "(fn_5 (cons SPACE) SPACE)",
        "(fn_5 (cons SPACE) '.')",
        "(lam (lam (prev_dc_inv_2 (map (lam $0) $1) (cons '.' (cons SPACE $0)))))",
        "(fn_5 (cons ',') LPAREN)",
        "(lam (lam (prev_dc_inv_2 (map (lam $0) $1) (cons LPAREN (cons ',' $0)))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
        "(lam (map (lam (index $0 $1)) (range (- (length $0) 1))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr (cdr (cdr $0)))))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr (prev_dc_inv_4 $0 (index 1 $0)))))))",
        "(lam (map (lam (index $0 $1)) (range (+ 1 (+ 1 (+ 1 1))))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_0 $0 (index 1 $0)) (prev_dc_inv_0 (cdr (cdr $0)) (index 1 (cdr (cdr $0))))))",
        "(lam (prev_dc_inv_0 $0 ','))",
        "(lam (cons (car $0) (map (lam ',') (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 (prev_dc_inv_4 $0 LPAREN) '.')))",
        "(lam (cons (car $0) (cons '.' (prev_dc_inv_0 (prev_dc_inv_4 $0 LPAREN) '.'))))",
        "fn_6",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "fn_6",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "fn_6",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "fn_6",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_2 STRING $0))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 (cons LPAREN $0) (cons RPAREN empty)))",
        "(lam (cons LPAREN (prev_dc_inv_2 $0 (cons RPAREN empty))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0)))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '.'))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 ','))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (cdr $0) ','))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN))",
        "(lambda (fold $0 $0 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN) $0 (lambda (lambda (cdr $2))))))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN) $0 (lambda (lambda (cdr $2))))))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons SPACE $0))))",
        "(fn_5 (map (lambda $0)) SPACE)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons LPAREN $0))))",
        "(fn_5 (map (lambda $0)) LPAREN)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons RPAREN $0))))",
        "(fn_5 (map (lambda $0)) RPAREN)",
        "(fn_5 (cons SPACE) SPACE)",
        "(fn_5 (cons SPACE) '.')",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $1) (cons '.' (cons SPACE $0)))))",
        "(fn_5 (cons ',') LPAREN)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $1) (cons LPAREN (cons ',' $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (- (length $0) 1))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr (cdr (cdr $0)))))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 (index 1 $0)))))))",
        "(lambda (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 1))))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 (index 1 $0)) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (cdr (cdr $0)) (index 1 (cdr (cdr $0))))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (cons (car $0) (map (lambda ',') (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 LPAREN) '.')))",
        "(lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 LPAREN) '.'))))",
        "#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) (cons RPAREN empty)))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cons RPAREN empty))))"
      ],
      "utility": 512,
      "expected_cost": 13535,
      "final_cost": 13535,
      "multiplier": 1.0602881418544514,
      "multiplier_wrt_orig": 1.1504987070557813,
      "num_uses": 4,
      "uses": [
        {
          "fn_6 ": "(lam (lam (prev_dc_inv_2 $1 $0)))"
        }
      ]
    },
    {
      "body": "(#1 (#1 (#1 #0)))",
      "dreamcoder": "#(lambda (lambda ($0 ($0 ($0 $1)))))",
      "arity": 2,
      "name": "fn_7",
      "rewritten": [
        "(lam (prev_dc_inv_1 ',' LPAREN $0))",
        "(lam (prev_dc_inv_1 ',' LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 '-' ',' $0))",
        "(lam (prev_dc_inv_1 '-' ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 '-' SPACE $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 '-' SPACE $0)))",
        "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 SPACE LPAREN $0)))",
        "(lam (prev_dc_inv_4 $0 '.'))",
        "(lam (fold (cdr $0) $0 (lam (lam (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(lam (prev_dc_inv_4 $0 ','))",
        "(lam (prev_dc_inv_4 (cdr $0) ','))",
        "(lam (prev_dc_inv_4 $0 RPAREN))",
        "(lam (fold $0 $0 (lam (lam (fold (prev_dc_inv_4 $0 RPAREN) $0 (lam (lam (cdr $2))))))))",
        "(lam (fold (cdr $0) $0 (lam (lam (fold (prev_dc_inv_4 $0 RPAREN) $0 (lam (lam (cdr $2))))))))",
        "(lam (lam (prev_dc_inv_2 $1 (cons SPACE $0))))",
        "(fn_5 (map (lam $0)) SPACE)",
        "(lam (lam (prev_dc_inv_2 $1 (cons LPAREN $0))))",
        "(fn_5 (map (lam $0)) LPAREN)",
        "(lam (lam (prev_dc_inv_2 $1 (cons RPAREN $0))))",
        "(fn_5 (map (lam $0)) RPAREN)",
        "(fn_5 (cons SPACE) SPACE)",
        "(fn_5 (cons SPACE) '.')",
        "(lam (lam (prev_dc_inv_2 (map (lam $0) $1) (cons '.' (cons SPACE $0)))))",
        "(fn_5 (cons ',') LPAREN)",
        "(lam (lam (prev_dc_inv_2 (map (lam $0) $1) (cons LPAREN (cons ',' $0)))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
        "(lam (map (lam (index $0 $1)) (range (- (length $0) 1))))",
        "(lam (map (lam (index $0 $1)) (range (length (fn_7 $0 cdr)))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr (prev_dc_inv_4 $0 (index 1 $0)))))))",
        "(lam (map (lam (index $0 $1)) (range (fn_7 1 (+ 1)))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_0 $0 (index 1 $0)) (prev_dc_inv_0 (cdr (cdr $0)) (index 1 (cdr (cdr $0))))))",
        "(lam (prev_dc_inv_0 $0 ','))",
        "(lam (cons (car $0) (map (lam ',') (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (cons (index 0 $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 (prev_dc_inv_4 $0 LPAREN) '.')))",
        "(lam (cons (car $0) (cons '.' (prev_dc_inv_0 (prev_dc_inv_4 $0 LPAREN) '.'))))",
        "fn_6",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "fn_6",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "fn_6",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "fn_6",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_2 STRING $0))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 (cons LPAREN $0) (cons RPAREN empty)))",
        "(lam (cons LPAREN (prev_dc_inv_2 $0 (cons RPAREN empty))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0)))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 '.'))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? '.' $1) (cdr $2) $0))))))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 ','))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) (cdr $0) ','))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN))",
        "(lambda (fold $0 $0 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN) $0 (lambda (lambda (cdr $2))))))))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 RPAREN) $0 (lambda (lambda (cdr $2))))))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons SPACE $0))))",
        "(fn_5 (map (lambda $0)) SPACE)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons LPAREN $0))))",
        "(fn_5 (map (lambda $0)) LPAREN)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons RPAREN $0))))",
        "(fn_5 (map (lambda $0)) RPAREN)",
        "(fn_5 (cons SPACE) SPACE)",
        "(fn_5 (cons SPACE) '.')",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $1) (cons '.' (cons SPACE $0)))))",
        "(fn_5 (cons ',') LPAREN)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $1) (cons LPAREN (cons ',' $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (- (length $0) 1))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (#(lambda (lambda ($0 ($0 ($0 $1))))) $0 cdr)))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 (index 1 $0)))))))",
        "(lambda (map (lambda (index $0 $1)) (range (#(lambda (lambda ($0 ($0 ($0 $1))))) 1 (+ 1)))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 (index 1 $0)) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (cdr (cdr $0)) (index 1 (cdr (cdr $0))))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (cons (car $0) (map (lambda ',') (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (cons (index 0 $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 LPAREN) '.')))",
        "(lambda (cons (car $0) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $2 $1) $3 $0))))))) $0 LPAREN) '.'))))",
        "fn_6",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "fn_6",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "fn_6",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "fn_6",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) (cons RPAREN empty)))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cons RPAREN empty))))"
      ],
      "utility": 401,
      "expected_cost": 13131,
      "final_cost": 13131,
      "multiplier": 1.0307668875180869,
      "multiplier_wrt_orig": 1.185895971365471,
      "num_uses": 2,
      "uses": [
        {
          "fn_7 1 (+ 1)": "(+ 1 (+ 1 (+ 1 1)))"
        },
        {
          "fn_7 $0 cdr": "(cdr (cdr (cdr $0)))"
        }
      ]
    }
  ]
}