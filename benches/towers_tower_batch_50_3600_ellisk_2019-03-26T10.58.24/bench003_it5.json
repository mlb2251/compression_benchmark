{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.700117,
        "productions": [
            {
                "expression": "6",
                "logProbability": -0.802709
            },
            {
                "expression": "4",
                "logProbability": -0.823833
            },
            {
                "expression": "2",
                "logProbability": -1.127904
            },
            {
                "expression": "3",
                "logProbability": -1.161702
            },
            {
                "expression": "5",
                "logProbability": -1.16249
            },
            {
                "expression": "7",
                "logProbability": -1.185599
            },
            {
                "expression": "8",
                "logProbability": -1.233089
            },
            {
                "expression": "1",
                "logProbability": -1.374403
            },
            {
                "expression": "reverseHand",
                "logProbability": -1.38453
            },
            {
                "expression": "moveHand",
                "logProbability": -1.532861
            },
            {
                "expression": "tower_loopM",
                "logProbability": -1.550321
            },
            {
                "expression": "1x3",
                "logProbability": -1.620629
            },
            {
                "expression": "tower_embed",
                "logProbability": -1.664271
            },
            {
                "expression": "3x1",
                "logProbability": -1.668086
            },
            {
                "expression": "#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3)))))))",
                "logProbability": -1.317278
            },
            {
                "expression": "#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0))))))))",
                "logProbability": -1.34086
            },
            {
                "expression": "#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0))))))",
                "logProbability": -1.521117
            },
            {
                "expression": "#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2))))))",
                "logProbability": -1.522126
            },
            {
                "expression": "#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1))))",
                "logProbability": -1.582434
            },
            {
                "expression": "#(lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $1 $0)) $0)))",
                "logProbability": -1.61656
            },
            {
                "expression": "#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8)))))))",
                "logProbability": -1.636337
            },
            {
                "expression": "#(lambda (lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) $0 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 2 4 (moveHand 6 (reverseHand (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 4 $1)))))))",
                "logProbability": -1.636337
            },
            {
                "expression": "#(lambda (tower_loopM $0 (lambda (lambda (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 1 8 (reverseHand $0)))))))",
                "logProbability": -1.636337
            },
            {
                "expression": "#(lambda (tower_loopM $0 (lambda (lambda (moveHand 4 (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) (reverseHand $0)))))))",
                "logProbability": -1.636338
            }
        ],
        "continuationType": {
            "constructor": "tower",
            "arguments": []
        }
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "arch leg 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 6))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 6 1 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "arch leg 4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 8 1 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "arch leg 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 4 (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) (reverseHand $0))))))) 1 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "arch leg 7",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (tower_loopM 4 (lambda (lambda (1x3 (moveHand 4 (reverseHand $0))))) (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (tower_loopM 4 (lambda (lambda (moveHand 4 (1x3 (reverseHand $0))))) (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "h row 4, spacing 7",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (tower_loopM 4 (lambda (lambda (3x1 (moveHand 7 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (tower_loopM 4 (lambda (lambda (moveHand 7 (3x1 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "v row 5, spacing 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (tower_loopM 5 (lambda (lambda (1x3 (moveHand 3 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (tower_loopM 5 (lambda (lambda (moveHand 3 (1x3 $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (2) of arch 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $1 $0)) $0))) $0 2))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 2 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (2) of arch 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $1 $0)) $0))) $0 6))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 6 2 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (3) of arch 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 3 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 2 3 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (3) of arch 2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 4 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 4 3 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (3) of arch 4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 8 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 8 3 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (4) of arch 2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 4 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 4 4 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (4) of arch 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 6 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 6 4 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (4) of arch 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 4 (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) (reverseHand $0))))))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 4 (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) (reverseHand $0))))))) 4 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (5) of arch 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 5 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 2 5 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (5) of arch 2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 4 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 4 5 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (6) of arch 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 6 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 2 6 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (6) of arch 2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 4 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 4 6 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (6) of arch 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 6 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 6 6 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (7) of arch 2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 4 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 4 7 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (7) of arch 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 6 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 6 7 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (7) of arch 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 4 (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) (reverseHand $0))))))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 4 (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) (reverseHand $0))))))) 6 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "arch stack 6",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (tower_loopM 6 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (tower_loopM 1 (lambda (lambda (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 6 $1 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "aqueduct: 4x4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 8 4 (reverseHand (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 4 6 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (tower_embed (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 8 4 $0)) (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 2 4 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "aqueduct: 4x5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 1 8 (reverseHand $0))))))) 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 1 8 (reverseHand $0))))))) 4 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "aqueduct: 5x5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 1 8 (reverseHand $0))))))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 1 8 (reverseHand $0))))))) 5 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "aqueduct: 6x3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 6 6 (reverseHand (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 6 6 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (tower_embed (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 6 6 $0)) (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 2 6 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (3) of arch, spaced 7",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 3 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 3 7 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bridge (4) of arch, spaced 8",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 4 8 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 4 8 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "arch pyramid 4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) $0 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 2 4 (moveHand 6 (reverseHand (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 4 $1))))))) $0 4))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) $0 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 2 4 (moveHand 6 (reverseHand (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 4 $1))))))) (reverseHand $0) 4))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "arch pyramid 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) $0 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 2 4 (moveHand 6 (reverseHand (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 4 $1))))))) $0 6))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) $0 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 2 4 (moveHand 6 (reverseHand (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 4 $1))))))) (reverseHand $0) 6))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "H pyramid 4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (tower_loopM 4 (lambda (lambda (moveHand 6 (tower_embed (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 4 1 $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (tower_loopM 4 (lambda (lambda (moveHand 6 (tower_embed (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 4 1 (reverseHand $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "arch 1/2 pyramid 6",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (tower_loopM 6 (lambda (lambda (moveHand 6 (tower_embed (lambda (reverseHand (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) $2 3 $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "arch 1/2 pyramid 7",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (tower_loopM 7 (lambda (lambda (moveHand 6 (tower_embed (lambda (reverseHand (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) $2 3 $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (tower_loopM 6 (lambda (lambda (moveHand 6 (tower_embed (lambda (reverseHand (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) $2 3 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2)))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "brickwall, 3x2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 3 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 3 4 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "brickwall, 4x1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 4 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 4 2 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "brickwall, 4x3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 4 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 4 6 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "brickwall, 5x1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 5 2 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 5 2 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "brickwall, 5x3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 5 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 5 6 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "brickwall, 5x4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 5 8 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 5 8 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "brickwall, 6x2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 6 4 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 6 4 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "brickwall, 6x3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 6 6 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 6 6 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "brickwall, 6x5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 6 4 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 6 6 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 6 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 6 4 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "L staircase 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (reverseHand (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 3 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 2 (#(lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $1 $0)) $0))) $0 2)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "L staircase 4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (reverseHand (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 4 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (reverseHand (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 4 (reverseHand $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "L staircase 7",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (reverseHand (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 7 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (reverseHand (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 7 (reverseHand $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "R staircase 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 3 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 3 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "R staircase 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 5 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 5 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "R staircase 7",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 7 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 7 (reverseHand $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "2 pyramid on top of 2x5 bricks",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 5 4 (reverseHand (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 2 2 (#(lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $1 $0)) $0))) $0 2)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 5 4 (reverseHand (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 2 2 (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 2 6 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "4 tower on top of 1x3 bricks",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "tower",
                        "arguments": []
                    },
                    {
                        "constructor": "tower",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 3 2 (reverseHand (moveHand 7 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) 3 2 (reverseHand (moveHand 1 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 8 1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 5,
        "num_learned": 1,
        "new_grammar": {
            "logVariable": -0.702615,
            "productions": [
                {
                    "expression": "6",
                    "logProbability": -0.798167
                },
                {
                    "expression": "4",
                    "logProbability": -0.841867
                },
                {
                    "expression": "2",
                    "logProbability": -1.154677
                },
                {
                    "expression": "5",
                    "logProbability": -1.173288
                },
                {
                    "expression": "3",
                    "logProbability": -1.174175
                },
                {
                    "expression": "7",
                    "logProbability": -1.174664
                },
                {
                    "expression": "8",
                    "logProbability": -1.25779
                },
                {
                    "expression": "1",
                    "logProbability": -1.387767
                },
                {
                    "expression": "reverseHand",
                    "logProbability": -1.403427
                },
                {
                    "expression": "moveHand",
                    "logProbability": -1.557413
                },
                {
                    "expression": "tower_loopM",
                    "logProbability": -1.576823
                },
                {
                    "expression": "1x3",
                    "logProbability": -1.648379
                },
                {
                    "expression": "tower_embed",
                    "logProbability": -1.691154
                },
                {
                    "expression": "3x1",
                    "logProbability": -1.694925
                },
                {
                    "expression": "#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3)))))))",
                    "logProbability": -1.346339
                },
                {
                    "expression": "#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0))))))))",
                    "logProbability": -1.367712
                },
                {
                    "expression": "#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2))))))",
                    "logProbability": -1.546228
                },
                {
                    "expression": "#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0))))))",
                    "logProbability": -1.548515
                },
                {
                    "expression": "#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1))))",
                    "logProbability": -1.610202
                },
                {
                    "expression": "#(lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $1 $0)) $0)))",
                    "logProbability": -1.64347
                },
                {
                    "expression": "#(lambda (tower_loopM $0 (lambda (lambda (moveHand 4 (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) (reverseHand $0)))))))",
                    "logProbability": -1.660727
                },
                {
                    "expression": "#(lambda (lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) $0 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 $3))))))) 2 4 (moveHand 6 (reverseHand (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 2))) $0)))))) 4 $1)))))))",
                    "logProbability": -1.662009
                },
                {
                    "expression": "#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8)))))))",
                    "logProbability": -1.662913
                },
                {
                    "expression": "#(lambda (tower_loopM $0 (lambda (lambda (#(lambda (1x3 (moveHand 4 (reverseHand (1x3 (moveHand 2 (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) $0 8))))))) (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) 1 8 (reverseHand $0)))))))",
                    "logProbability": -1.663176
                },
                {
                    "expression": "#(lambda (tower_loopM $0 (lambda (lambda (moveHand 6 (tower_embed (lambda (reverseHand (#(lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (tower_embed (lambda (moveHand 2 (1x3 $0))) (reverseHand $0)))) (3x1 $1)))) (moveHand $2 $0) 2)))))) $2 3 $0))) $0))))))",
                    "logProbability": -1.663176
                }
            ],
            "continuationType": {
                "constructor": "tower",
                "arguments": []
            }
        }
    }
}