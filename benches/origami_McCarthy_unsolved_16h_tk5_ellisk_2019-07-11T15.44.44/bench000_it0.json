{
    "verbose": false,
    "arity": 4,
    "topK": 5,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.0,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": 0.0,
        "productions": [
            {
                "expression": "empty?",
                "logProbability": 0.0
            },
            {
                "expression": "eq?",
                "logProbability": 0.0
            },
            {
                "expression": "gt?",
                "logProbability": 0.0
            },
            {
                "expression": "cdr",
                "logProbability": 0.0
            },
            {
                "expression": "0",
                "logProbability": 0.0
            },
            {
                "expression": "cons",
                "logProbability": 0.0
            },
            {
                "expression": "+",
                "logProbability": 0.0
            },
            {
                "expression": "1",
                "logProbability": 0.0
            },
            {
                "expression": "empty",
                "logProbability": 0.0
            },
            {
                "expression": "-",
                "logProbability": 0.0
            },
            {
                "expression": "car",
                "logProbability": 0.0
            },
            {
                "expression": "if",
                "logProbability": 0.0
            },
            {
                "expression": "fix1",
                "logProbability": 0.0
            }
        ]
    },
    "iterations": 10,
    "frontiers": [
        {
            "name": "length int",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) 0 (+ ($1 (cdr $0)) 1))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) 0 (+ 1 ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (+ (if (empty? (cdr $0)) 0 ($1 (cdr $0))) 1)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (+ 1 (if (empty? (cdr $0)) 0 ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? (cdr $0)) 1 (+ 1 ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "countdown",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "int",
                        "arguments": []
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (eq? $0 0) empty (cons (+ 1 $0) ($1 (- $0 1))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (eq? 0 $0) empty (cons (+ $0 1) ($1 (- $0 1))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (eq? 0 $0) empty (cons (+ 1 $0) ($1 (- $0 1))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (gt? $0 0) (cons (+ $0 1) ($1 (- $0 1))) empty)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (gt? $0 0) (cons (+ 1 $0) ($1 (- $0 1))) empty)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "weird count",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "int",
                        "arguments": []
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (eq? $0 0) empty (cons (- 0 $0) ($1 (+ 1 $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (eq? 0 $0) empty (cons (- 0 $0) ($1 (+ $0 1))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (eq? 0 $0) empty (cons (- 0 $0) ($1 (+ 1 $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (gt? 0 $0) (cons (- 0 $0) ($1 (+ $0 1))) empty)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (gt? 0 $0) (cons (- 0 $0) ($1 (+ 1 $0))) empty)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "take every other",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) empty (cons (car $0) ($1 (cdr (cdr $0)))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) $0 (cons (car $0) ($1 (cdr (cdr $0)))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? (if (empty? $0) empty $0)) empty (cons (car $0) ($1 (cdr (cdr $0)))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "drop last element",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? (cdr $0)) empty (cons (car $0) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (cons (car $0) (if (empty? (cdr (cdr $0))) empty ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? (cdr $0)) (cdr $0) (cons (car $0) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (cdr (if (empty? (cdr $0)) $0 (cons 0 (cons (car $0) ($1 (cdr $0))))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (cdr (if (empty? (cdr $0)) $0 (cons 1 (cons (car $0) ($1 (cdr $0))))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "stutter",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) empty (cons (car $0) (cons (car $0) ($1 (cdr $0)))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) $0 (cons (car $0) (cons (car $0) ($1 (cdr $0)))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (cons (car $0) (cons (car $0) (if (empty? (cdr $0)) empty ($1 (cdr $0)))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "sum",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) 0 (+ ($1 (cdr $0)) (car $0)))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) 0 (+ (car $0) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (+ (car $0) (if (empty? (cdr $0)) 0 ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (+ (if (empty? (cdr $0)) 0 ($1 (cdr $0))) (car $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? (cdr $0)) (car $0) (+ ($1 (cdr $0)) (car $0)))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append constant 0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) (cons 0 empty) (cons (car $0) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) (cons 0 $0) (cons (car $0) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (cons (car $0) (if (empty? (cdr $0)) (cons 0 empty) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) (cons (- 1 1) empty) (cons (car $0) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (cons (if (empty? $0) 0 (car $0)) (if (empty? $0) empty ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "map double",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) empty (cons (+ (car $0) (car $0)) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) $0 (cons (+ (car $0) (car $0)) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (cons (+ (car $0) (car $0)) (if (empty? (cdr $0)) empty ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "map increment",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) empty (cons (+ (car $0) 1) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) empty (cons (+ 1 (car $0)) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) $0 (cons (+ (car $0) 1) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) $0 (cons (+ 1 (car $0)) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (cons (+ (car $0) 1) (if (empty? (cdr $0)) empty ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "map negation",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) empty (cons (- 0 (car $0)) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) $0 (cons (- 0 (car $0)) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (cons (- 0 (car $0)) (if (empty? (cdr $0)) empty ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) empty (cons (- 1 (+ (car $0) 1)) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fix1 $0 (lambda (lambda (if (empty? $0) empty (cons (- 1 (+ 1 (car $0))) ($1 (cdr $0))))))))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 0,
        "num_learned": 3,
        "new_grammar": {
            "logVariable": -0.451291,
            "productions": [
                {
                    "expression": "empty?",
                    "logProbability": -0.287665
                },
                {
                    "expression": "eq?",
                    "logProbability": -0.318449
                },
                {
                    "expression": "gt?",
                    "logProbability": -0.382961
                },
                {
                    "expression": "cdr",
                    "logProbability": -0.73292
                },
                {
                    "expression": "0",
                    "logProbability": -0.762532
                },
                {
                    "expression": "cons",
                    "logProbability": -0.76616
                },
                {
                    "expression": "+",
                    "logProbability": -0.786387
                },
                {
                    "expression": "1",
                    "logProbability": -0.811091
                },
                {
                    "expression": "empty",
                    "logProbability": -0.826784
                },
                {
                    "expression": "-",
                    "logProbability": -0.873605
                },
                {
                    "expression": "car",
                    "logProbability": -1.307116
                },
                {
                    "expression": "if",
                    "logProbability": -1.33884
                },
                {
                    "expression": "fix1",
                    "logProbability": -1.33884
                },
                {
                    "expression": "#(lambda (lambda (lambda (lambda (fix1 $3 (lambda (lambda (if ($2 $0) empty (cons ($3 $0) ($1 ($4 $0)))))))))))",
                    "logProbability": -0.766205
                },
                {
                    "expression": "#(lambda (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $1 (lambda (lambda (cons ($2 $0) $1))) empty)))",
                    "logProbability": -0.796036
                },
                {
                    "expression": "#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0)))))))))",
                    "logProbability": -1.276344
                }
            ]
        }
    }
}