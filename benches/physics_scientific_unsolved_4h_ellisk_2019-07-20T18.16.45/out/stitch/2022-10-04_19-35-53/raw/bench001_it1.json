{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/physics_scientific_unsolved_4h_ellisk_2019-07-20T18.16.45/bench001_it1.json --max-arity=3 --threads=1 --iterations=5 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/physics_scientific_unsolved_4h_ellisk_2019-07-20T18.16.45/out/stitch/2022-10-04_19-35-53/raw/bench001_it1.json",
  "args": {
    "file": "compression_benchmark/benches/physics_scientific_unsolved_4h_ellisk_2019-07-20T18.16.45/bench001_it1.json",
    "out": "compression_benchmark/benches/physics_scientific_unsolved_4h_ellisk_2019-07-20T18.16.45/out/stitch/2022-10-04_19-35-53/raw/bench001_it1.json",
    "iterations": 5,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 145854,
  "original": [
    "(lam (lam (zip $0 $1 (lam (lam (+. $0 $1))))))",
    "(lam (lam (zip $0 $1 (lam (lam (+. $1 $0))))))",
    "(lam (lam (zip $1 $0 (lam (lam (+. $0 $1))))))",
    "(lam (lam (zip $1 $0 (lam (lam (+. $1 $0))))))",
    "(lam (lam (map (lam $0) (zip $0 $1 (lam (lam (+. $0 $1)))))))",
    "(lam (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1)))",
    "(lam (power (prev_dc_inv_7 $0 $0) (prev_dc_inv_1 1)))",
    "(lam (power (prev_dc_inv_5 $0) (prev_dc_inv_1 (prev_dc_inv_0 1))))",
    "(lam (power (prev_dc_inv_5 (map (lam $0) $0)) (prev_dc_inv_1 1)))",
    "(lam (power (prev_dc_inv_7 $0 $0) (prev_dc_inv_1 (prev_dc_inv_0 1))))",
    "(lam (prev_dc_inv_3 (power (prev_dc_inv_3 (-. (*. $0 $0) (prev_dc_inv_1 1)) $0) (prev_dc_inv_1 1)) pi))",
    "(lam (lam (power (prev_dc_inv_5 (cons $0 (cons $1 empty))) (prev_dc_inv_1 1))))",
    "(lam (lam (power (prev_dc_inv_5 (cons $1 (cons $0 empty))) (prev_dc_inv_1 1))))",
    "(lam (lam (power (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $0 empty)))) (prev_dc_inv_1 1))))",
    "(lam (lam (power (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $1 empty)))) (prev_dc_inv_1 1))))",
    "(lam (lam (power (prev_dc_inv_5 (cons $1 (cons $0 (prev_dc_inv_2 $0 empty)))) (prev_dc_inv_1 1))))",
    "(lam (lam (*. $1 (/. $1 $0))))",
    "(lam (lam (*. (/. $1 $0) $1)))",
    "(lam (lam (/. (*. $1 $1) $0)))",
    "(lam (lam (/. $1 (/. $0 $1))))",
    "(lam (lam (prev_dc_inv_3 (prev_dc_inv_3 $1 $0) $1)))",
    "(lam (lam (*. $0 (*. $0 $1))))",
    "(lam (lam (*. $0 (*. $1 $0))))",
    "(lam (lam (*. $1 (*. $0 $0))))",
    "(lam (lam (*. (*. $0 $0) $1)))",
    "(lam (lam (*. (*. $0 $1) $0)))",
    "(lam (lam (/. (prev_dc_inv_7 $0 $1) (prev_dc_inv_4 $1))))",
    "(lam (lam (/. (prev_dc_inv_7 $1 $0) (prev_dc_inv_4 $1))))",
    "(lam (lam (prev_dc_inv_7 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $0) $1)))",
    "(lam (lam (prev_dc_inv_7 $0 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $1))))",
    "(lam (lam (prev_dc_inv_7 $1 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $0))))",
    "(lam (lam (/. $1 $0)))",
    "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
    "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
    "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
    "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
    "(lam (lam (/. $1 $0)))",
    "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
    "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
    "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
    "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
    "(lam (lam (*. $0 (*. $1 $1))))",
    "(lam (lam (*. $1 (*. $0 $1))))",
    "(lam (lam (*. $1 (*. $1 $0))))",
    "(lam (lam (*. (*. $0 $1) $1)))",
    "(lam (lam (*. (*. $1 $0) $1)))",
    "(lam (lam (*. $1 (/. $1 $0))))",
    "(lam (lam (*. (/. $1 $0) $1)))",
    "(lam (lam (/. (*. $1 $1) $0)))",
    "(lam (lam (/. $1 (/. $0 $1))))",
    "(lam (lam (prev_dc_inv_3 (prev_dc_inv_3 $1 $0) $1)))",
    "(lam (prev_dc_inv_3 (-. pi (prev_dc_inv_0 pi)) $0))",
    "(lam (/. $0 (prev_dc_inv_1 (-. pi (prev_dc_inv_0 pi)))))",
    "(lam (/. $0 (power (prev_dc_inv_3 $0 $0) (prev_dc_inv_1 1))))",
    "(lam (*. $0 (power (prev_dc_inv_1 1) (prev_dc_inv_1 1))))",
    "(lam (*. (power (prev_dc_inv_1 1) (prev_dc_inv_1 1)) $0))",
    "(lam (lam (*. $0 (prev_dc_inv_1 (*. $0 $1)))))",
    "(lam (lam (*. $0 (prev_dc_inv_1 (*. $1 $0)))))",
    "(lam (lam (*. $0 (*. $0 (prev_dc_inv_1 $1)))))",
    "(lam (lam (*. $0 (*. $1 (prev_dc_inv_1 $0)))))",
    "(lam (lam (*. $1 (prev_dc_inv_1 (*. $0 $0)))))",
    "(lam (lam (prev_dc_inv_1 (*. $0 $1))))",
    "(lam (lam (prev_dc_inv_1 (*. $1 $0))))",
    "(lam (lam (*. $0 (prev_dc_inv_1 $1))))",
    "(lam (lam (*. $1 (prev_dc_inv_1 $0))))",
    "(lam (lam (*. (prev_dc_inv_1 $0) $1)))",
    "(lam (lam (/. $1 (prev_dc_inv_3 $1 $0))))",
    "(lam (lam (*. $1 (prev_dc_inv_1 (/. $1 $0)))))",
    "(lam (lam (*. $1 (/. (prev_dc_inv_1 $1) $0))))",
    "(lam (lam (*. (prev_dc_inv_1 (/. $1 $0)) $1)))",
    "(lam (lam (*. (/. (prev_dc_inv_1 $1) $0) $1)))",
    "(lam (prev_dc_inv_0 $0))",
    "(lam (/. 1 $0))",
    "(lam (/. $0 (*. $0 $0)))",
    "(lam (/. (/. $0 $0) $0))",
    "(lam (*. 1 (prev_dc_inv_0 $0)))",
    "(lam (prev_dc_inv_1 $0))",
    "(lam (-. $0 (prev_dc_inv_1 $0)))",
    "(lam (/. $0 (prev_dc_inv_3 $0 $0)))",
    "(lam (*. $0 (prev_dc_inv_1 1)))",
    "(lam (*. (prev_dc_inv_1 1) $0))",
    "(lam (lam (prev_dc_inv_7 $0 $1)))",
    "(lam (lam (prev_dc_inv_7 $1 $0)))",
    "(lam (lam (prev_dc_inv_7 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_7 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1)))",
    "(lam (lam (prev_dc_inv_7 $0 $1)))",
    "(lam (lam (prev_dc_inv_7 $1 $0)))",
    "(lam (lam (prev_dc_inv_7 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_7 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1)))",
    "(lam (lam (lam (lam (lam (*. $4 (-. (*. $0 $3) (*. $1 $2))))))))",
    "(lam (lam (lam (lam (lam (*. $4 (-. (*. $0 $3) (*. $2 $1))))))))",
    "(lam (lam (lam (lam (lam (*. $4 (-. (*. $3 $0) (*. $1 $2))))))))",
    "(lam (lam (lam (lam (lam (*. $4 (-. (*. $3 $0) (*. $2 $1))))))))",
    "(lam (lam (lam (lam (lam (*. (-. (*. $0 $3) (*. $1 $2)) $4))))))",
    "(lam (lam (lam (lam (-. (*. $0 $3) (*. $1 $2))))))",
    "(lam (lam (lam (lam (-. (*. $0 $3) (*. $2 $1))))))",
    "(lam (lam (lam (lam (-. (*. $3 $0) (*. $1 $2))))))",
    "(lam (lam (lam (lam (-. (*. $3 $0) (*. $2 $1))))))",
    "(lam (lam (lam (lam (-. (/. $0 (prev_dc_inv_0 $3)) (*. $1 $2))))))",
    "(lam (lam (lam (+. $2 (*. $0 $1)))))",
    "(lam (lam (lam (+. $2 (*. $1 $0)))))",
    "(lam (lam (lam (+. (*. $0 $1) $2))))",
    "(lam (lam (lam (+. (*. $1 $0) $2))))",
    "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
    "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $0 $1)))))))))",
    "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $1 $0)))))))))",
    "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $0 (prev_dc_inv_1 $1)))))))))",
    "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $1 (prev_dc_inv_1 $0)))))))))",
    "(lam (lam (lam (lam (+. $3 (*. (+. $2 (*. $0 (prev_dc_inv_1 $1))) $0))))))",
    "(lam (lam (prev_dc_inv_2 $1 $0)))",
    "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
    "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
    "(lam (lam (map (lam (*. $0 $2)) $0)))",
    "(lam (lam (map (lam (*. $2 $0)) $0)))",
    "(lam (lam (prev_dc_inv_2 $1 $0)))",
    "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
    "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
    "(lam (lam (map (lam (*. $0 $2)) $0)))",
    "(lam (lam (map (lam (*. $2 $0)) $0)))",
    "(lam (lam (prev_dc_inv_1 (*. $1 (prev_dc_inv_5 $0)))))",
    "(lam (lam (prev_dc_inv_1 (*. (prev_dc_inv_5 $0) $1))))",
    "(lam (lam (*. $1 (prev_dc_inv_1 (prev_dc_inv_5 $0)))))",
    "(lam (lam (*. (prev_dc_inv_1 $1) (prev_dc_inv_5 $0))))",
    "(lam (lam (*. (prev_dc_inv_1 (prev_dc_inv_5 $0)) $1)))",
    "(lam (lam (*. $0 (prev_dc_inv_1 (*. $0 $1)))))",
    "(lam (lam (*. $0 (prev_dc_inv_1 (*. $1 $0)))))",
    "(lam (lam (*. $0 (*. $0 (prev_dc_inv_1 $1)))))",
    "(lam (lam (*. $0 (*. $1 (prev_dc_inv_1 $0)))))",
    "(lam (lam (*. $1 (prev_dc_inv_1 (*. $0 $0)))))",
    "(lam (lam (prev_dc_inv_2 $1 $0)))",
    "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
    "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
    "(lam (lam (map (lam (*. $0 $2)) $0)))",
    "(lam (lam (map (lam (*. $2 $0)) $0)))",
    "(lam (lam (prev_dc_inv_2 $1 $0)))",
    "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
    "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
    "(lam (lam (map (lam (*. $0 $2)) $0)))",
    "(lam (lam (map (lam (*. $2 $0)) $0)))",
    "(lam (lam (/. $1 $0)))",
    "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
    "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
    "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
    "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
    "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $0 $1)))))))))",
    "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $1 $0)))))))))",
    "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $0 (prev_dc_inv_1 $1)))))))))",
    "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $1 (prev_dc_inv_1 $0)))))))))",
    "(lam (lam (lam (lam (+. $3 (*. (+. $2 (*. $0 (prev_dc_inv_1 $1))) $0))))))",
    "(lam (lam (lam (+. $2 (*. $0 $1)))))",
    "(lam (lam (lam (+. $2 (*. $1 $0)))))",
    "(lam (lam (lam (+. (*. $0 $1) $2))))",
    "(lam (lam (lam (+. (*. $1 $0) $2))))",
    "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
    "(lam (prev_dc_inv_3 $0 pi))",
    "(lam (/. pi (prev_dc_inv_1 $0)))",
    "(lam (*. (prev_dc_inv_0 (prev_dc_inv_1 $0)) pi))",
    "(lam (*. pi (prev_dc_inv_0 (prev_dc_inv_1 $0))))",
    "(lam (*. 1 (prev_dc_inv_3 $0 pi)))",
    "(lam (lam (prev_dc_inv_3 (power (/. $0 $1) (prev_dc_inv_1 1)) pi)))",
    "(lam (lam (*. $1 (prev_dc_inv_3 (power (*. $0 $1) (prev_dc_inv_1 1)) pi))))",
    "(lam (lam (*. $1 (prev_dc_inv_3 (power (*. $1 $0) (prev_dc_inv_1 1)) pi))))",
    "(lam (lam (*. (prev_dc_inv_3 (power (*. $0 $1) (prev_dc_inv_1 1)) pi) $1)))",
    "(lam (lam (*. (prev_dc_inv_3 (power (*. $1 $0) (prev_dc_inv_1 1)) pi) $1)))",
    "(lam (lam (prev_dc_inv_3 (power (/. $0 $1) (prev_dc_inv_1 1)) pi)))",
    "(lam (lam (*. $1 (prev_dc_inv_3 (power (*. $0 $1) (prev_dc_inv_1 1)) pi))))",
    "(lam (lam (*. $1 (prev_dc_inv_3 (power (*. $1 $0) (prev_dc_inv_1 1)) pi))))",
    "(lam (lam (*. (prev_dc_inv_3 (power (*. $0 $1) (prev_dc_inv_1 1)) pi) $1)))",
    "(lam (lam (*. (prev_dc_inv_3 (power (*. $1 $0) (prev_dc_inv_1 1)) pi) $1)))",
    "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $1 (/. $2 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $0) $0))))",
    "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $2 (/. $1 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $0) $0))))",
    "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $1 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $2 $0) $0))))",
    "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $2 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $1 $0) $0))))",
    "(lam (lam (lam (prev_dc_inv_2 (/. (prev_dc_inv_6 $1 $2 $0) (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $0))))",
    "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $1 (/. $2 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $0) $0))))",
    "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $2 (/. $1 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $0) $0))))",
    "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $1 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $2 $0) $0))))",
    "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $2 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $1 $0) $0))))",
    "(lam (lam (lam (prev_dc_inv_2 (/. (prev_dc_inv_6 $1 $2 $0) (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $0))))",
    "(lam (lam (lam (prev_dc_inv_6 $1 $2 $0))))",
    "(lam (lam (lam (prev_dc_inv_6 $2 $1 $0))))",
    "(lam (lam (lam (prev_dc_inv_6 $1 $2 (map (lam $0) $0)))))",
    "(lam (lam (lam (prev_dc_inv_6 $2 $1 (map (lam $0) $0)))))",
    "(lam (lam (lam (*. (/. $1 (prev_dc_inv_5 $0)) $2))))",
    "(lam (lam (lam (prev_dc_inv_6 $1 $2 $0))))",
    "(lam (lam (lam (prev_dc_inv_6 $2 $1 $0))))",
    "(lam (lam (lam (prev_dc_inv_6 $1 $2 (map (lam $0) $0)))))",
    "(lam (lam (lam (prev_dc_inv_6 $2 $1 (map (lam $0) $0)))))",
    "(lam (lam (lam (*. $1 (/. $2 (prev_dc_inv_5 $0))))))",
    "(lam (lam (*. $0 (*. $1 (-. 0 $0)))))",
    "(lam (lam (*. $0 (*. (-. 0 $0) $1))))",
    "(lam (lam (*. $0 (-. 0 (*. $0 $1)))))",
    "(lam (lam (*. $0 (-. 0 (*. $1 $0)))))",
    "(lam (lam (*. $1 (*. $0 (-. 0 $0)))))",
    "(lam (lam (*. $0 $1)))",
    "(lam (lam (*. $1 $0)))",
    "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
    "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
    "(lam (lam (*. $0 (*. $1 1))))",
    "(lam (lam (*. $0 $1)))",
    "(lam (lam (*. $1 $0)))",
    "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
    "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
    "(lam (lam (*. $0 (*. $1 1))))",
    "(lam (prev_dc_inv_0 $0))",
    "(lam (/. 1 $0))",
    "(lam (/. $0 (*. $0 $0)))",
    "(lam (/. (/. $0 $0) $0))",
    "(lam (*. 1 (prev_dc_inv_0 $0)))",
    "(lam (prev_dc_inv_0 $0))",
    "(lam (/. 1 $0))",
    "(lam (/. $0 (*. $0 $0)))",
    "(lam (/. (/. $0 $0) $0))",
    "(lam (*. 1 (prev_dc_inv_0 $0)))",
    "(lam (lam (/. $1 $0)))",
    "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
    "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
    "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
    "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
    "(lam (prev_dc_inv_4 $0))",
    "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_4 (prev_dc_inv_2 1 $0)))",
    "(lam (*. (prev_dc_inv_4 $0) 1))",
    "(lam (*. 1 (prev_dc_inv_4 $0)))",
    "(lam (prev_dc_inv_4 $0))",
    "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_4 (prev_dc_inv_2 1 $0)))",
    "(lam (*. (prev_dc_inv_4 $0) 1))",
    "(lam (*. 1 (prev_dc_inv_4 $0)))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) $0))))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_4 (zip $0 $0 (lam (lam (prev_dc_inv_0 $0)))))))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_4 (zip $0 $0 (lam (lam (prev_dc_inv_0 $1)))))))",
    "(lam (/. 1 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) $0))))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) (map (lam $0) $0)))))",
    "(lam (*. $0 (*. $0 pi)))",
    "(lam (*. $0 (*. pi $0)))",
    "(lam (*. (*. $0 $0) pi))",
    "(lam (*. (*. $0 pi) $0))",
    "(lam (*. (*. pi $0) $0))",
    "(lam (lam (prev_dc_inv_5 (cons $0 (cons $1 empty)))))",
    "(lam (lam (prev_dc_inv_5 (cons $1 (cons $0 empty)))))",
    "(lam (lam (+. (*. $0 $0) (*. $1 $1))))",
    "(lam (lam (+. (*. $1 $1) (*. $0 $0))))",
    "(lam (lam (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $0 empty))))))"
  ],
  "invs": [
    {
      "body": "(lam (lam (#0 $1 $0)))",
      "dreamcoder": "#(lambda (lambda (lambda ($2 $1 $0))))",
      "arity": 1,
      "name": "fn_8",
      "rewritten": [
        "(lam (lam (zip $0 $1 (lam (lam (+. $0 $1))))))",
        "(lam (lam (zip $0 $1 (fn_8 +.))))",
        "(lam (lam (zip $1 $0 (lam (lam (+. $0 $1))))))",
        "(lam (lam (zip $1 $0 (fn_8 +.))))",
        "(lam (lam (map (lam $0) (zip $0 $1 (lam (lam (+. $0 $1)))))))",
        "(lam (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1)))",
        "(lam (power (prev_dc_inv_7 $0 $0) (prev_dc_inv_1 1)))",
        "(lam (power (prev_dc_inv_5 $0) (prev_dc_inv_1 (prev_dc_inv_0 1))))",
        "(lam (power (prev_dc_inv_5 (map (lam $0) $0)) (prev_dc_inv_1 1)))",
        "(lam (power (prev_dc_inv_7 $0 $0) (prev_dc_inv_1 (prev_dc_inv_0 1))))",
        "(lam (prev_dc_inv_3 (power (prev_dc_inv_3 (-. (*. $0 $0) (prev_dc_inv_1 1)) $0) (prev_dc_inv_1 1)) pi))",
        "(lam (lam (power (prev_dc_inv_5 (cons $0 (cons $1 empty))) (prev_dc_inv_1 1))))",
        "(lam (lam (power (prev_dc_inv_5 (cons $1 (cons $0 empty))) (prev_dc_inv_1 1))))",
        "(lam (lam (power (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $0 empty)))) (prev_dc_inv_1 1))))",
        "(lam (lam (power (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $1 empty)))) (prev_dc_inv_1 1))))",
        "(lam (lam (power (prev_dc_inv_5 (cons $1 (cons $0 (prev_dc_inv_2 $0 empty)))) (prev_dc_inv_1 1))))",
        "(lam (lam (*. $1 (/. $1 $0))))",
        "(lam (lam (*. (/. $1 $0) $1)))",
        "(lam (lam (/. (*. $1 $1) $0)))",
        "(lam (lam (/. $1 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 (prev_dc_inv_3 $1 $0) $1)))",
        "(lam (lam (*. $0 (*. $0 $1))))",
        "(lam (lam (*. $0 (*. $1 $0))))",
        "(lam (lam (*. $1 (*. $0 $0))))",
        "(lam (lam (*. (*. $0 $0) $1)))",
        "(lam (lam (*. (*. $0 $1) $0)))",
        "(lam (lam (/. (prev_dc_inv_7 $0 $1) (prev_dc_inv_4 $1))))",
        "(lam (lam (/. (prev_dc_inv_7 $1 $0) (prev_dc_inv_4 $1))))",
        "(lam (lam (prev_dc_inv_7 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $0) $1)))",
        "(lam (lam (prev_dc_inv_7 $0 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $0))))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(lam (lam (*. $0 (*. $1 $1))))",
        "(lam (lam (*. $1 (*. $0 $1))))",
        "(lam (lam (*. $1 (*. $1 $0))))",
        "(lam (lam (*. (*. $0 $1) $1)))",
        "(lam (lam (*. (*. $1 $0) $1)))",
        "(lam (lam (*. $1 (/. $1 $0))))",
        "(lam (lam (*. (/. $1 $0) $1)))",
        "(lam (lam (/. (*. $1 $1) $0)))",
        "(lam (lam (/. $1 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 (prev_dc_inv_3 $1 $0) $1)))",
        "(lam (prev_dc_inv_3 (-. pi (prev_dc_inv_0 pi)) $0))",
        "(lam (/. $0 (prev_dc_inv_1 (-. pi (prev_dc_inv_0 pi)))))",
        "(lam (/. $0 (power (prev_dc_inv_3 $0 $0) (prev_dc_inv_1 1))))",
        "(lam (*. $0 (power (prev_dc_inv_1 1) (prev_dc_inv_1 1))))",
        "(lam (*. (power (prev_dc_inv_1 1) (prev_dc_inv_1 1)) $0))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $0 $1)))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $1 $0)))))",
        "(lam (lam (*. $0 (*. $0 (prev_dc_inv_1 $1)))))",
        "(lam (lam (*. $0 (*. $1 (prev_dc_inv_1 $0)))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (*. $0 $0)))))",
        "(lam (lam (prev_dc_inv_1 (*. $0 $1))))",
        "(lam (lam (prev_dc_inv_1 (*. $1 $0))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 $1))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 $0))))",
        "(lam (lam (*. (prev_dc_inv_1 $0) $1)))",
        "(lam (lam (/. $1 (prev_dc_inv_3 $1 $0))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (/. $1 $0)))))",
        "(lam (lam (*. $1 (/. (prev_dc_inv_1 $1) $0))))",
        "(lam (lam (*. (prev_dc_inv_1 (/. $1 $0)) $1)))",
        "(lam (lam (*. (/. (prev_dc_inv_1 $1) $0) $1)))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (-. $0 (prev_dc_inv_1 $0)))",
        "(lam (/. $0 (prev_dc_inv_3 $0 $0)))",
        "(lam (*. $0 (prev_dc_inv_1 1)))",
        "(lam (*. (prev_dc_inv_1 1) $0))",
        "(lam (lam (prev_dc_inv_7 $0 $1)))",
        "(fn_8 prev_dc_inv_7)",
        "(lam (lam (prev_dc_inv_7 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1)))",
        "(lam (lam (prev_dc_inv_7 $0 $1)))",
        "(fn_8 prev_dc_inv_7)",
        "(lam (lam (prev_dc_inv_7 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1)))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $0 $3) (*. $1 $2))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $0 $3) (*. $2 $1))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $3 $0) (*. $1 $2))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $3 $0) (*. $2 $1))))))))",
        "(lam (lam (lam (lam (lam (*. (-. (*. $0 $3) (*. $1 $2)) $4))))))",
        "(lam (lam (lam (lam (-. (*. $0 $3) (*. $1 $2))))))",
        "(lam (lam (lam (lam (-. (*. $0 $3) (*. $2 $1))))))",
        "(lam (lam (lam (lam (-. (*. $3 $0) (*. $1 $2))))))",
        "(lam (lam (lam (lam (-. (*. $3 $0) (*. $2 $1))))))",
        "(lam (lam (lam (lam (-. (/. $0 (prev_dc_inv_0 $3)) (*. $1 $2))))))",
        "(lam (lam (lam (+. $2 (*. $0 $1)))))",
        "(lam (lam (lam (+. $2 (*. $1 $0)))))",
        "(lam (lam (lam (+. (*. $0 $1) $2))))",
        "(lam (lam (lam (+. (*. $1 $0) $2))))",
        "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $0 $1)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $0 (prev_dc_inv_1 $1)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $1 (prev_dc_inv_1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. (+. $2 (*. $0 (prev_dc_inv_1 $1))) $0))))))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(lam (lam (prev_dc_inv_1 (*. $1 (prev_dc_inv_5 $0)))))",
        "(lam (lam (prev_dc_inv_1 (*. (prev_dc_inv_5 $0) $1))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (prev_dc_inv_5 $0)))))",
        "(lam (lam (*. (prev_dc_inv_1 $1) (prev_dc_inv_5 $0))))",
        "(lam (lam (*. (prev_dc_inv_1 (prev_dc_inv_5 $0)) $1)))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $0 $1)))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $1 $0)))))",
        "(lam (lam (*. $0 (*. $0 (prev_dc_inv_1 $1)))))",
        "(lam (lam (*. $0 (*. $1 (prev_dc_inv_1 $0)))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (*. $0 $0)))))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $0 $1)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $0 (prev_dc_inv_1 $1)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $1 (prev_dc_inv_1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. (+. $2 (*. $0 (prev_dc_inv_1 $1))) $0))))))",
        "(lam (lam (lam (+. $2 (*. $0 $1)))))",
        "(lam (lam (lam (+. $2 (*. $1 $0)))))",
        "(lam (lam (lam (+. (*. $0 $1) $2))))",
        "(lam (lam (lam (+. (*. $1 $0) $2))))",
        "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
        "(lam (prev_dc_inv_3 $0 pi))",
        "(lam (/. pi (prev_dc_inv_1 $0)))",
        "(lam (*. (prev_dc_inv_0 (prev_dc_inv_1 $0)) pi))",
        "(lam (*. pi (prev_dc_inv_0 (prev_dc_inv_1 $0))))",
        "(lam (*. 1 (prev_dc_inv_3 $0 pi)))",
        "(lam (lam (prev_dc_inv_3 (power (/. $0 $1) (prev_dc_inv_1 1)) pi)))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (power (*. $0 $1) (prev_dc_inv_1 1)) pi))))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (power (*. $1 $0) (prev_dc_inv_1 1)) pi))))",
        "(lam (lam (*. (prev_dc_inv_3 (power (*. $0 $1) (prev_dc_inv_1 1)) pi) $1)))",
        "(lam (lam (*. (prev_dc_inv_3 (power (*. $1 $0) (prev_dc_inv_1 1)) pi) $1)))",
        "(lam (lam (prev_dc_inv_3 (power (/. $0 $1) (prev_dc_inv_1 1)) pi)))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (power (*. $0 $1) (prev_dc_inv_1 1)) pi))))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (power (*. $1 $0) (prev_dc_inv_1 1)) pi))))",
        "(lam (lam (*. (prev_dc_inv_3 (power (*. $0 $1) (prev_dc_inv_1 1)) pi) $1)))",
        "(lam (lam (*. (prev_dc_inv_3 (power (*. $1 $0) (prev_dc_inv_1 1)) pi) $1)))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $1 (/. $2 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $2 (/. $1 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $1 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $2 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $2 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $1 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (/. (prev_dc_inv_6 $1 $2 $0) (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $1 (/. $2 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $2 (/. $1 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $1 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $2 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $2 (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $1 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (/. (prev_dc_inv_6 $1 $2 $0) (power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))) $0))))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 $0))))",
        "(lam (fn_8 (prev_dc_inv_6 $0)))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 (map (lam $0) $0)))))",
        "(lam (lam (lam (prev_dc_inv_6 $2 $1 (map (lam $0) $0)))))",
        "(lam (lam (lam (*. (/. $1 (prev_dc_inv_5 $0)) $2))))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 $0))))",
        "(lam (fn_8 (prev_dc_inv_6 $0)))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 (map (lam $0) $0)))))",
        "(lam (lam (lam (prev_dc_inv_6 $2 $1 (map (lam $0) $0)))))",
        "(lam (lam (lam (*. $1 (/. $2 (prev_dc_inv_5 $0))))))",
        "(lam (lam (*. $0 (*. $1 (-. 0 $0)))))",
        "(lam (lam (*. $0 (*. (-. 0 $0) $1))))",
        "(lam (lam (*. $0 (-. 0 (*. $0 $1)))))",
        "(lam (lam (*. $0 (-. 0 (*. $1 $0)))))",
        "(lam (lam (*. $1 (*. $0 (-. 0 $0)))))",
        "(lam (lam (*. $0 $1)))",
        "(fn_8 *.)",
        "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
        "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. $0 (*. $1 1))))",
        "(lam (lam (*. $0 $1)))",
        "(fn_8 *.)",
        "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
        "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. $0 (*. $1 1))))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_2 1 $0)))",
        "(lam (*. (prev_dc_inv_4 $0) 1))",
        "(lam (*. 1 (prev_dc_inv_4 $0)))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_2 1 $0)))",
        "(lam (*. (prev_dc_inv_4 $0) 1))",
        "(lam (*. 1 (prev_dc_inv_4 $0)))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) $0))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (zip $0 $0 (lam (lam (prev_dc_inv_0 $0)))))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (zip $0 $0 (lam (lam (prev_dc_inv_0 $1)))))))",
        "(lam (/. 1 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) $0))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) (map (lam $0) $0)))))",
        "(lam (*. $0 (*. $0 pi)))",
        "(lam (*. $0 (*. pi $0)))",
        "(lam (*. (*. $0 $0) pi))",
        "(lam (*. (*. $0 pi) $0))",
        "(lam (*. (*. pi $0) $0))",
        "(lam (lam (prev_dc_inv_5 (cons $0 (cons $1 empty)))))",
        "(lam (lam (prev_dc_inv_5 (cons $1 (cons $0 empty)))))",
        "(lam (lam (+. (*. $0 $0) (*. $1 $1))))",
        "(lam (lam (+. (*. $1 $1) (*. $0 $0))))",
        "(lam (lam (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $0 empty))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1))))))",
        "(lambda (lambda (zip $0 $1 (#(lambda (lambda (lambda ($2 $1 $0)))) +.))))",
        "(lambda (lambda (zip $1 $0 (lambda (lambda (+. $0 $1))))))",
        "(lambda (lambda (zip $1 $0 (#(lambda (lambda (lambda ($2 $1 $0)))) +.))))",
        "(lambda (lambda (map (lambda $0) (zip $0 $1 (lambda (lambda (+. $0 $1)))))))",
        "(lambda (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) 1)))",
        "(lambda (power (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0) (#(lambda (/. $0 (+. 1. 1.))) 1)))",
        "(lambda (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (/. 1. $0)) 1))))",
        "(lambda (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (map (lambda $0) $0)) (#(lambda (/. $0 (+. 1. 1.))) 1)))",
        "(lambda (power (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0) (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (/. 1. $0)) 1))))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (power (#(lambda (lambda (/. (+. $0 $0) $1))) (-. (*. $0 $0) (#(lambda (/. $0 (+. 1. 1.))) 1)) $0) (#(lambda (/. $0 (+. 1. 1.))) 1)) pi))",
        "(lambda (lambda (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 empty))) (#(lambda (/. $0 (+. 1. 1.))) 1))))",
        "(lambda (lambda (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 empty))) (#(lambda (/. $0 (+. 1. 1.))) 1))))",
        "(lambda (lambda (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $0 empty)))) (#(lambda (/. $0 (+. 1. 1.))) 1))))",
        "(lambda (lambda (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $1 empty)))) (#(lambda (/. $0 (+. 1. 1.))) 1))))",
        "(lambda (lambda (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 (#(lambda (map (lambda (*. $0 $1)))) $0 empty)))) (#(lambda (/. $0 (+. 1. 1.))) 1))))",
        "(lambda (lambda (*. $1 (/. $1 $0))))",
        "(lambda (lambda (*. (/. $1 $0) $1)))",
        "(lambda (lambda (/. (*. $1 $1) $0)))",
        "(lambda (lambda (/. $1 (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0) $1)))",
        "(lambda (lambda (*. $0 (*. $0 $1))))",
        "(lambda (lambda (*. $0 (*. $1 $0))))",
        "(lambda (lambda (*. $1 (*. $0 $0))))",
        "(lambda (lambda (*. (*. $0 $0) $1)))",
        "(lambda (lambda (*. (*. $0 $1) $0)))",
        "(lambda (lambda (/. (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1))))",
        "(lambda (lambda (/. (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 $0) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $0))))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (lambda (*. $0 (*. $1 $1))))",
        "(lambda (lambda (*. $1 (*. $0 $1))))",
        "(lambda (lambda (*. $1 (*. $1 $0))))",
        "(lambda (lambda (*. (*. $0 $1) $1)))",
        "(lambda (lambda (*. (*. $1 $0) $1)))",
        "(lambda (lambda (*. $1 (/. $1 $0))))",
        "(lambda (lambda (*. (/. $1 $0) $1)))",
        "(lambda (lambda (/. (*. $1 $1) $0)))",
        "(lambda (lambda (/. $1 (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0) $1)))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (-. pi (#(lambda (/. 1. $0)) pi)) $0))",
        "(lambda (/. $0 (#(lambda (/. $0 (+. 1. 1.))) (-. pi (#(lambda (/. 1. $0)) pi)))))",
        "(lambda (/. $0 (power (#(lambda (lambda (/. (+. $0 $0) $1))) $0 $0) (#(lambda (/. $0 (+. 1. 1.))) 1))))",
        "(lambda (*. $0 (power (#(lambda (/. $0 (+. 1. 1.))) 1) (#(lambda (/. $0 (+. 1. 1.))) 1))))",
        "(lambda (*. (power (#(lambda (/. $0 (+. 1. 1.))) 1) (#(lambda (/. $0 (+. 1. 1.))) 1)) $0))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))",
        "(lambda (lambda (*. $0 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))",
        "(lambda (lambda (*. $0 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $0)))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) $0) $1)))",
        "(lambda (lambda (/. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (/. $1 $0)))))",
        "(lambda (lambda (*. $1 (/. (#(lambda (/. $0 (+. 1. 1.))) $1) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) (/. $1 $0)) $1)))",
        "(lambda (lambda (*. (/. (#(lambda (/. $0 (+. 1. 1.))) $1) $0) $1)))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(lambda (#(lambda (/. $0 (+. 1. 1.))) $0))",
        "(lambda (-. $0 (#(lambda (/. $0 (+. 1. 1.))) $0)))",
        "(lambda (/. $0 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 $0)))",
        "(lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) 1)))",
        "(lambda (*. (#(lambda (/. $0 (+. 1. 1.))) 1) $0))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) #(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) #(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $0 $3) (*. $1 $2))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $0 $3) (*. $2 $1))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $3 $0) (*. $1 $2))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $3 $0) (*. $2 $1))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. (-. (*. $0 $3) (*. $1 $2)) $4))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $0 $3) (*. $1 $2))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $0 $3) (*. $2 $1))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $3 $0) (*. $1 $2))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $3 $0) (*. $2 $1))))))",
        "(lambda (lambda (lambda (lambda (-. (/. $0 (#(lambda (/. 1. $0)) $3)) (*. $1 $2))))))",
        "(lambda (lambda (lambda (+. $2 (*. $0 $1)))))",
        "(lambda (lambda (lambda (+. $2 (*. $1 $0)))))",
        "(lambda (lambda (lambda (+. (*. $0 $1) $2))))",
        "(lambda (lambda (lambda (+. (*. $1 $0) $2))))",
        "(lambda (lambda (lambda (+. $2 (/. $0 (#(lambda (/. 1. $0)) $1))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))) $0))))))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) $1))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)) $1)))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))",
        "(lambda (lambda (*. $0 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))",
        "(lambda (lambda (*. $0 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $0)))))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))) $0))))))",
        "(lambda (lambda (lambda (+. $2 (*. $0 $1)))))",
        "(lambda (lambda (lambda (+. $2 (*. $1 $0)))))",
        "(lambda (lambda (lambda (+. (*. $0 $1) $2))))",
        "(lambda (lambda (lambda (+. (*. $1 $0) $2))))",
        "(lambda (lambda (lambda (+. $2 (/. $0 (#(lambda (/. 1. $0)) $1))))))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 pi))",
        "(lambda (/. pi (#(lambda (/. $0 (+. 1. 1.))) $0)))",
        "(lambda (*. (#(lambda (/. 1. $0)) (#(lambda (/. $0 (+. 1. 1.))) $0)) pi))",
        "(lambda (*. pi (#(lambda (/. 1. $0)) (#(lambda (/. $0 (+. 1. 1.))) $0))))",
        "(lambda (*. 1 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 pi)))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (power (/. $0 $1) (#(lambda (/. $0 (+. 1. 1.))) 1)) pi)))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (power (*. $0 $1) (#(lambda (/. $0 (+. 1. 1.))) 1)) pi))))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (power (*. $1 $0) (#(lambda (/. $0 (+. 1. 1.))) 1)) pi))))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (power (*. $0 $1) (#(lambda (/. $0 (+. 1. 1.))) 1)) pi) $1)))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (power (*. $1 $0) (#(lambda (/. $0 (+. 1. 1.))) 1)) pi) $1)))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (power (/. $0 $1) (#(lambda (/. $0 (+. 1. 1.))) 1)) pi)))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (power (*. $0 $1) (#(lambda (/. $0 (+. 1. 1.))) 1)) pi))))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (power (*. $1 $0) (#(lambda (/. $0 (+. 1. 1.))) 1)) pi))))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (power (*. $0 $1) (#(lambda (/. $0 (+. 1. 1.))) 1)) pi) $1)))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (power (*. $1 $0) (#(lambda (/. $0 (+. 1. 1.))) 1)) pi) $1)))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 (/. $2 (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) 1))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 (/. $1 (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) 1))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $1 (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) 1))) $2 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $2 (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) 1))) $1 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (/. (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0) (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) 1))) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 (/. $2 (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) 1))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 (/. $1 (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) 1))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $1 (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) 1))) $2 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $2 (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) 1))) $1 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (/. (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0) (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) 1))) $0))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0))))",
        "(lambda (#(lambda (lambda (lambda ($2 $1 $0)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $0)))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 $1 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (*. (/. $1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)) $2))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0))))",
        "(lambda (#(lambda (lambda (lambda ($2 $1 $0)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $0)))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 $1 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (*. $1 (/. $2 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))))",
        "(lambda (lambda (*. $0 (*. $1 (-. 0 $0)))))",
        "(lambda (lambda (*. $0 (*. (-. 0 $0) $1))))",
        "(lambda (lambda (*. $0 (-. 0 (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (-. 0 (*. $1 $0)))))",
        "(lambda (lambda (*. $1 (*. $0 (-. 0 $0)))))",
        "(lambda (lambda (*. $0 $1)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) *.)",
        "(lambda (lambda (/. $0 (#(lambda (/. 1. $0)) $1))))",
        "(lambda (lambda (/. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. $0 (*. $1 1))))",
        "(lambda (lambda (*. $0 $1)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) *.)",
        "(lambda (lambda (/. $0 (#(lambda (/. 1. $0)) $1))))",
        "(lambda (lambda (/. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. $0 (*. $1 1))))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (#(lambda (map (lambda (*. $0 $1)))) 1 $0)))",
        "(lambda (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0) 1))",
        "(lambda (*. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (#(lambda (map (lambda (*. $0 $1)))) 1 $0)))",
        "(lambda (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0) 1))",
        "(lambda (*. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0)))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) $0))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $0 (lambda (lambda (#(lambda (/. 1. $0)) $0)))))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $0 (lambda (lambda (#(lambda (/. 1. $0)) $1)))))))",
        "(lambda (/. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) $0))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) (map (lambda $0) $0)))))",
        "(lambda (*. $0 (*. $0 pi)))",
        "(lambda (*. $0 (*. pi $0)))",
        "(lambda (*. (*. $0 $0) pi))",
        "(lambda (*. (*. $0 pi) $0))",
        "(lambda (*. (*. pi $0) $0))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 empty)))))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 empty)))))",
        "(lambda (lambda (+. (*. $0 $0) (*. $1 $1))))",
        "(lambda (lambda (+. (*. $1 $1) (*. $0 $0))))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $0 empty))))))"
      ],
      "utility": 1341,
      "expected_cost": 24771,
      "final_cost": 24771,
      "multiplier": 1.0623713213031367,
      "multiplier_wrt_orig": 1.0623713213031367,
      "num_uses": 16,
      "uses": [
        {
          "fn_8 *.": "(lam (lam (*. $1 $0)))"
        },
        {
          "fn_8 +.": "(lam (lam (+. $1 $0)))"
        },
        {
          "fn_8 /.": "(lam (lam (/. $1 $0)))"
        },
        {
          "fn_8 prev_dc_inv_2": "(lam (lam (prev_dc_inv_2 $1 $0)))"
        },
        {
          "fn_8 (prev_dc_inv_6 $0)": "(lam (lam (prev_dc_inv_6 $2 $1 $0)))"
        },
        {
          "fn_8 prev_dc_inv_7": "(lam (lam (prev_dc_inv_7 $1 $0)))"
        }
      ]
    },
    {
      "body": "(power #0 (prev_dc_inv_1 1))",
      "dreamcoder": "#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1)))",
      "arity": 1,
      "name": "fn_9",
      "rewritten": [
        "(lam (lam (zip $0 $1 (lam (lam (+. $0 $1))))))",
        "(lam (lam (zip $0 $1 (fn_8 +.))))",
        "(lam (lam (zip $1 $0 (lam (lam (+. $0 $1))))))",
        "(lam (lam (zip $1 $0 (fn_8 +.))))",
        "(lam (lam (map (lam $0) (zip $0 $1 (lam (lam (+. $0 $1)))))))",
        "(lam (fn_9 (prev_dc_inv_5 $0)))",
        "(lam (fn_9 (prev_dc_inv_7 $0 $0)))",
        "(lam (power (prev_dc_inv_5 $0) (prev_dc_inv_1 (prev_dc_inv_0 1))))",
        "(lam (fn_9 (prev_dc_inv_5 (map (lam $0) $0))))",
        "(lam (power (prev_dc_inv_7 $0 $0) (prev_dc_inv_1 (prev_dc_inv_0 1))))",
        "(lam (prev_dc_inv_3 (fn_9 (prev_dc_inv_3 (-. (*. $0 $0) (prev_dc_inv_1 1)) $0)) pi))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $0 (cons $1 empty))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $1 (cons $0 empty))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $0 empty)))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $1 empty)))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $1 (cons $0 (prev_dc_inv_2 $0 empty)))))))",
        "(lam (lam (*. $1 (/. $1 $0))))",
        "(lam (lam (*. (/. $1 $0) $1)))",
        "(lam (lam (/. (*. $1 $1) $0)))",
        "(lam (lam (/. $1 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 (prev_dc_inv_3 $1 $0) $1)))",
        "(lam (lam (*. $0 (*. $0 $1))))",
        "(lam (lam (*. $0 (*. $1 $0))))",
        "(lam (lam (*. $1 (*. $0 $0))))",
        "(lam (lam (*. (*. $0 $0) $1)))",
        "(lam (lam (*. (*. $0 $1) $0)))",
        "(lam (lam (/. (prev_dc_inv_7 $0 $1) (prev_dc_inv_4 $1))))",
        "(lam (lam (/. (prev_dc_inv_7 $1 $0) (prev_dc_inv_4 $1))))",
        "(lam (lam (prev_dc_inv_7 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $0) $1)))",
        "(lam (lam (prev_dc_inv_7 $0 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $0))))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(lam (lam (*. $0 (*. $1 $1))))",
        "(lam (lam (*. $1 (*. $0 $1))))",
        "(lam (lam (*. $1 (*. $1 $0))))",
        "(lam (lam (*. (*. $0 $1) $1)))",
        "(lam (lam (*. (*. $1 $0) $1)))",
        "(lam (lam (*. $1 (/. $1 $0))))",
        "(lam (lam (*. (/. $1 $0) $1)))",
        "(lam (lam (/. (*. $1 $1) $0)))",
        "(lam (lam (/. $1 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 (prev_dc_inv_3 $1 $0) $1)))",
        "(lam (prev_dc_inv_3 (-. pi (prev_dc_inv_0 pi)) $0))",
        "(lam (/. $0 (prev_dc_inv_1 (-. pi (prev_dc_inv_0 pi)))))",
        "(lam (/. $0 (fn_9 (prev_dc_inv_3 $0 $0))))",
        "(lam (*. $0 (fn_9 (prev_dc_inv_1 1))))",
        "(lam (*. (fn_9 (prev_dc_inv_1 1)) $0))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $0 $1)))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $1 $0)))))",
        "(lam (lam (*. $0 (*. $0 (prev_dc_inv_1 $1)))))",
        "(lam (lam (*. $0 (*. $1 (prev_dc_inv_1 $0)))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (*. $0 $0)))))",
        "(lam (lam (prev_dc_inv_1 (*. $0 $1))))",
        "(lam (lam (prev_dc_inv_1 (*. $1 $0))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 $1))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 $0))))",
        "(lam (lam (*. (prev_dc_inv_1 $0) $1)))",
        "(lam (lam (/. $1 (prev_dc_inv_3 $1 $0))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (/. $1 $0)))))",
        "(lam (lam (*. $1 (/. (prev_dc_inv_1 $1) $0))))",
        "(lam (lam (*. (prev_dc_inv_1 (/. $1 $0)) $1)))",
        "(lam (lam (*. (/. (prev_dc_inv_1 $1) $0) $1)))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (-. $0 (prev_dc_inv_1 $0)))",
        "(lam (/. $0 (prev_dc_inv_3 $0 $0)))",
        "(lam (*. $0 (prev_dc_inv_1 1)))",
        "(lam (*. (prev_dc_inv_1 1) $0))",
        "(lam (lam (prev_dc_inv_7 $0 $1)))",
        "(fn_8 prev_dc_inv_7)",
        "(lam (lam (prev_dc_inv_7 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1)))",
        "(lam (lam (prev_dc_inv_7 $0 $1)))",
        "(fn_8 prev_dc_inv_7)",
        "(lam (lam (prev_dc_inv_7 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1)))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $0 $3) (*. $1 $2))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $0 $3) (*. $2 $1))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $3 $0) (*. $1 $2))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $3 $0) (*. $2 $1))))))))",
        "(lam (lam (lam (lam (lam (*. (-. (*. $0 $3) (*. $1 $2)) $4))))))",
        "(lam (lam (lam (lam (-. (*. $0 $3) (*. $1 $2))))))",
        "(lam (lam (lam (lam (-. (*. $0 $3) (*. $2 $1))))))",
        "(lam (lam (lam (lam (-. (*. $3 $0) (*. $1 $2))))))",
        "(lam (lam (lam (lam (-. (*. $3 $0) (*. $2 $1))))))",
        "(lam (lam (lam (lam (-. (/. $0 (prev_dc_inv_0 $3)) (*. $1 $2))))))",
        "(lam (lam (lam (+. $2 (*. $0 $1)))))",
        "(lam (lam (lam (+. $2 (*. $1 $0)))))",
        "(lam (lam (lam (+. (*. $0 $1) $2))))",
        "(lam (lam (lam (+. (*. $1 $0) $2))))",
        "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $0 $1)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $0 (prev_dc_inv_1 $1)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $1 (prev_dc_inv_1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. (+. $2 (*. $0 (prev_dc_inv_1 $1))) $0))))))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(lam (lam (prev_dc_inv_1 (*. $1 (prev_dc_inv_5 $0)))))",
        "(lam (lam (prev_dc_inv_1 (*. (prev_dc_inv_5 $0) $1))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (prev_dc_inv_5 $0)))))",
        "(lam (lam (*. (prev_dc_inv_1 $1) (prev_dc_inv_5 $0))))",
        "(lam (lam (*. (prev_dc_inv_1 (prev_dc_inv_5 $0)) $1)))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $0 $1)))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $1 $0)))))",
        "(lam (lam (*. $0 (*. $0 (prev_dc_inv_1 $1)))))",
        "(lam (lam (*. $0 (*. $1 (prev_dc_inv_1 $0)))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (*. $0 $0)))))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $0 $1)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $0 (prev_dc_inv_1 $1)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $1 (prev_dc_inv_1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. (+. $2 (*. $0 (prev_dc_inv_1 $1))) $0))))))",
        "(lam (lam (lam (+. $2 (*. $0 $1)))))",
        "(lam (lam (lam (+. $2 (*. $1 $0)))))",
        "(lam (lam (lam (+. (*. $0 $1) $2))))",
        "(lam (lam (lam (+. (*. $1 $0) $2))))",
        "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
        "(lam (prev_dc_inv_3 $0 pi))",
        "(lam (/. pi (prev_dc_inv_1 $0)))",
        "(lam (*. (prev_dc_inv_0 (prev_dc_inv_1 $0)) pi))",
        "(lam (*. pi (prev_dc_inv_0 (prev_dc_inv_1 $0))))",
        "(lam (*. 1 (prev_dc_inv_3 $0 pi)))",
        "(lam (lam (prev_dc_inv_3 (fn_9 (/. $0 $1)) pi)))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi))))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi))))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi) $1)))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi) $1)))",
        "(lam (lam (prev_dc_inv_3 (fn_9 (/. $0 $1)) pi)))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi))))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi))))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi) $1)))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi) $1)))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $1 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $2 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $2 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $1 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (/. (prev_dc_inv_6 $1 $2 $0) (fn_9 (prev_dc_inv_5 $0))) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $1 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $2 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $2 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $1 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (/. (prev_dc_inv_6 $1 $2 $0) (fn_9 (prev_dc_inv_5 $0))) $0))))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 $0))))",
        "(lam (fn_8 (prev_dc_inv_6 $0)))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 (map (lam $0) $0)))))",
        "(lam (lam (lam (prev_dc_inv_6 $2 $1 (map (lam $0) $0)))))",
        "(lam (lam (lam (*. (/. $1 (prev_dc_inv_5 $0)) $2))))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 $0))))",
        "(lam (fn_8 (prev_dc_inv_6 $0)))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 (map (lam $0) $0)))))",
        "(lam (lam (lam (prev_dc_inv_6 $2 $1 (map (lam $0) $0)))))",
        "(lam (lam (lam (*. $1 (/. $2 (prev_dc_inv_5 $0))))))",
        "(lam (lam (*. $0 (*. $1 (-. 0 $0)))))",
        "(lam (lam (*. $0 (*. (-. 0 $0) $1))))",
        "(lam (lam (*. $0 (-. 0 (*. $0 $1)))))",
        "(lam (lam (*. $0 (-. 0 (*. $1 $0)))))",
        "(lam (lam (*. $1 (*. $0 (-. 0 $0)))))",
        "(lam (lam (*. $0 $1)))",
        "(fn_8 *.)",
        "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
        "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. $0 (*. $1 1))))",
        "(lam (lam (*. $0 $1)))",
        "(fn_8 *.)",
        "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
        "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. $0 (*. $1 1))))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_2 1 $0)))",
        "(lam (*. (prev_dc_inv_4 $0) 1))",
        "(lam (*. 1 (prev_dc_inv_4 $0)))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_2 1 $0)))",
        "(lam (*. (prev_dc_inv_4 $0) 1))",
        "(lam (*. 1 (prev_dc_inv_4 $0)))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) $0))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (zip $0 $0 (lam (lam (prev_dc_inv_0 $0)))))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (zip $0 $0 (lam (lam (prev_dc_inv_0 $1)))))))",
        "(lam (/. 1 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) $0))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) (map (lam $0) $0)))))",
        "(lam (*. $0 (*. $0 pi)))",
        "(lam (*. $0 (*. pi $0)))",
        "(lam (*. (*. $0 $0) pi))",
        "(lam (*. (*. $0 pi) $0))",
        "(lam (*. (*. pi $0) $0))",
        "(lam (lam (prev_dc_inv_5 (cons $0 (cons $1 empty)))))",
        "(lam (lam (prev_dc_inv_5 (cons $1 (cons $0 empty)))))",
        "(lam (lam (+. (*. $0 $0) (*. $1 $1))))",
        "(lam (lam (+. (*. $1 $1) (*. $0 $0))))",
        "(lam (lam (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $0 empty))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1))))))",
        "(lambda (lambda (zip $0 $1 (fn_8 +.))))",
        "(lambda (lambda (zip $1 $0 (lambda (lambda (+. $0 $1))))))",
        "(lambda (lambda (zip $1 $0 (fn_8 +.))))",
        "(lambda (lambda (map (lambda $0) (zip $0 $1 (lambda (lambda (+. $0 $1)))))))",
        "(lambda (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)))",
        "(lambda (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0)))",
        "(lambda (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (/. 1. $0)) 1))))",
        "(lambda (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (map (lambda $0) $0))))",
        "(lambda (power (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0) (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (/. 1. $0)) 1))))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (lambda (/. (+. $0 $0) $1))) (-. (*. $0 $0) (#(lambda (/. $0 (+. 1. 1.))) 1)) $0)) pi))",
        "(lambda (lambda (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 empty))))))",
        "(lambda (lambda (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 empty))))))",
        "(lambda (lambda (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $0 empty)))))))",
        "(lambda (lambda (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $1 empty)))))))",
        "(lambda (lambda (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 (#(lambda (map (lambda (*. $0 $1)))) $0 empty)))))))",
        "(lambda (lambda (*. $1 (/. $1 $0))))",
        "(lambda (lambda (*. (/. $1 $0) $1)))",
        "(lambda (lambda (/. (*. $1 $1) $0)))",
        "(lambda (lambda (/. $1 (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0) $1)))",
        "(lambda (lambda (*. $0 (*. $0 $1))))",
        "(lambda (lambda (*. $0 (*. $1 $0))))",
        "(lambda (lambda (*. $1 (*. $0 $0))))",
        "(lambda (lambda (*. (*. $0 $0) $1)))",
        "(lambda (lambda (*. (*. $0 $1) $0)))",
        "(lambda (lambda (/. (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1))))",
        "(lambda (lambda (/. (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 $0) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $0))))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (lambda (*. $0 (*. $1 $1))))",
        "(lambda (lambda (*. $1 (*. $0 $1))))",
        "(lambda (lambda (*. $1 (*. $1 $0))))",
        "(lambda (lambda (*. (*. $0 $1) $1)))",
        "(lambda (lambda (*. (*. $1 $0) $1)))",
        "(lambda (lambda (*. $1 (/. $1 $0))))",
        "(lambda (lambda (*. (/. $1 $0) $1)))",
        "(lambda (lambda (/. (*. $1 $1) $0)))",
        "(lambda (lambda (/. $1 (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0) $1)))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (-. pi (#(lambda (/. 1. $0)) pi)) $0))",
        "(lambda (/. $0 (#(lambda (/. $0 (+. 1. 1.))) (-. pi (#(lambda (/. 1. $0)) pi)))))",
        "(lambda (/. $0 (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (lambda (/. (+. $0 $0) $1))) $0 $0))))",
        "(lambda (*. $0 (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (/. $0 (+. 1. 1.))) 1))))",
        "(lambda (*. (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (/. $0 (+. 1. 1.))) 1)) $0))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))",
        "(lambda (lambda (*. $0 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))",
        "(lambda (lambda (*. $0 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $0)))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) $0) $1)))",
        "(lambda (lambda (/. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (/. $1 $0)))))",
        "(lambda (lambda (*. $1 (/. (#(lambda (/. $0 (+. 1. 1.))) $1) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) (/. $1 $0)) $1)))",
        "(lambda (lambda (*. (/. (#(lambda (/. $0 (+. 1. 1.))) $1) $0) $1)))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(lambda (#(lambda (/. $0 (+. 1. 1.))) $0))",
        "(lambda (-. $0 (#(lambda (/. $0 (+. 1. 1.))) $0)))",
        "(lambda (/. $0 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 $0)))",
        "(lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) 1)))",
        "(lambda (*. (#(lambda (/. $0 (+. 1. 1.))) 1) $0))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1)))",
        "(fn_8 #(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1)))",
        "(fn_8 #(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $0 $3) (*. $1 $2))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $0 $3) (*. $2 $1))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $3 $0) (*. $1 $2))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $3 $0) (*. $2 $1))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. (-. (*. $0 $3) (*. $1 $2)) $4))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $0 $3) (*. $1 $2))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $0 $3) (*. $2 $1))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $3 $0) (*. $1 $2))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $3 $0) (*. $2 $1))))))",
        "(lambda (lambda (lambda (lambda (-. (/. $0 (#(lambda (/. 1. $0)) $3)) (*. $1 $2))))))",
        "(lambda (lambda (lambda (+. $2 (*. $0 $1)))))",
        "(lambda (lambda (lambda (+. $2 (*. $1 $0)))))",
        "(lambda (lambda (lambda (+. (*. $0 $1) $2))))",
        "(lambda (lambda (lambda (+. (*. $1 $0) $2))))",
        "(lambda (lambda (lambda (+. $2 (/. $0 (#(lambda (/. 1. $0)) $1))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))) $0))))))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) $1))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)) $1)))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))",
        "(lambda (lambda (*. $0 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))",
        "(lambda (lambda (*. $0 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $0)))))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))) $0))))))",
        "(lambda (lambda (lambda (+. $2 (*. $0 $1)))))",
        "(lambda (lambda (lambda (+. $2 (*. $1 $0)))))",
        "(lambda (lambda (lambda (+. (*. $0 $1) $2))))",
        "(lambda (lambda (lambda (+. (*. $1 $0) $2))))",
        "(lambda (lambda (lambda (+. $2 (/. $0 (#(lambda (/. 1. $0)) $1))))))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 pi))",
        "(lambda (/. pi (#(lambda (/. $0 (+. 1. 1.))) $0)))",
        "(lambda (*. (#(lambda (/. 1. $0)) (#(lambda (/. $0 (+. 1. 1.))) $0)) pi))",
        "(lambda (*. pi (#(lambda (/. 1. $0)) (#(lambda (/. $0 (+. 1. 1.))) $0))))",
        "(lambda (*. 1 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 pi)))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (/. $0 $1)) pi)))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (*. $0 $1)) pi))))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (*. $1 $0)) pi))))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (*. $0 $1)) pi) $1)))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (*. $1 $0)) pi) $1)))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (/. $0 $1)) pi)))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (*. $0 $1)) pi))))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (*. $1 $0)) pi))))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (*. $0 $1)) pi) $1)))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (*. $1 $0)) pi) $1)))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 (/. $2 (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 (/. $1 (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $1 (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $2 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $2 (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $1 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (/. (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 (/. $2 (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 (/. $1 (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $1 (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $2 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $2 (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $1 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (/. (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0))))",
        "(lambda (fn_8 (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $0)))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 $1 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (*. (/. $1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)) $2))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0))))",
        "(lambda (fn_8 (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $0)))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 $1 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (*. $1 (/. $2 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))))",
        "(lambda (lambda (*. $0 (*. $1 (-. 0 $0)))))",
        "(lambda (lambda (*. $0 (*. (-. 0 $0) $1))))",
        "(lambda (lambda (*. $0 (-. 0 (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (-. 0 (*. $1 $0)))))",
        "(lambda (lambda (*. $1 (*. $0 (-. 0 $0)))))",
        "(lambda (lambda (*. $0 $1)))",
        "(fn_8 *.)",
        "(lambda (lambda (/. $0 (#(lambda (/. 1. $0)) $1))))",
        "(lambda (lambda (/. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. $0 (*. $1 1))))",
        "(lambda (lambda (*. $0 $1)))",
        "(fn_8 *.)",
        "(lambda (lambda (/. $0 (#(lambda (/. 1. $0)) $1))))",
        "(lambda (lambda (/. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. $0 (*. $1 1))))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (#(lambda (map (lambda (*. $0 $1)))) 1 $0)))",
        "(lambda (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0) 1))",
        "(lambda (*. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (#(lambda (map (lambda (*. $0 $1)))) 1 $0)))",
        "(lambda (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0) 1))",
        "(lambda (*. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0)))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) $0))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $0 (lambda (lambda (#(lambda (/. 1. $0)) $0)))))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $0 (lambda (lambda (#(lambda (/. 1. $0)) $1)))))))",
        "(lambda (/. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) $0))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) (map (lambda $0) $0)))))",
        "(lambda (*. $0 (*. $0 pi)))",
        "(lambda (*. $0 (*. pi $0)))",
        "(lambda (*. (*. $0 $0) pi))",
        "(lambda (*. (*. $0 pi) $0))",
        "(lambda (*. (*. pi $0) $0))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 empty)))))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 empty)))))",
        "(lambda (lambda (+. (*. $0 $0) (*. $1 $1))))",
        "(lambda (lambda (+. (*. $1 $1) (*. $0 $0))))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $0 empty))))))"
      ],
      "utility": 1212,
      "expected_cost": 23256,
      "final_cost": 23256,
      "multiplier": 1.0651444788441693,
      "multiplier_wrt_orig": 1.131578947368421,
      "num_uses": 32,
      "uses": [
        {
          "fn_9 (*. $0 $1)": "(power (*. $0 $1) (prev_dc_inv_1 1))"
        },
        {
          "fn_9 (*. $1 $0)": "(power (*. $1 $0) (prev_dc_inv_1 1))"
        },
        {
          "fn_9 (/. $0 $1)": "(power (/. $0 $1) (prev_dc_inv_1 1))"
        },
        {
          "fn_9 (prev_dc_inv_1 1)": "(power (prev_dc_inv_1 1) (prev_dc_inv_1 1))"
        },
        {
          "fn_9 (prev_dc_inv_3 $0 $0)": "(power (prev_dc_inv_3 $0 $0) (prev_dc_inv_1 1))"
        },
        {
          "fn_9 (prev_dc_inv_3 (-. (*. $0 $0) (prev_dc_inv_1 1)) $0)": "(power (prev_dc_inv_3 (-. (*. $0 $0) (prev_dc_inv_1 1)) $0) (prev_dc_inv_1 1))"
        },
        {
          "fn_9 (prev_dc_inv_5 $0)": "(power (prev_dc_inv_5 $0) (prev_dc_inv_1 1))"
        },
        {
          "fn_9 (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $0 empty))))": "(power (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $0 empty)))) (prev_dc_inv_1 1))"
        },
        {
          "fn_9 (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $1 empty))))": "(power (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $1 empty)))) (prev_dc_inv_1 1))"
        },
        {
          "fn_9 (prev_dc_inv_5 (cons $0 (cons $1 empty)))": "(power (prev_dc_inv_5 (cons $0 (cons $1 empty))) (prev_dc_inv_1 1))"
        },
        {
          "fn_9 (prev_dc_inv_5 (cons $1 (cons $0 (prev_dc_inv_2 $0 empty))))": "(power (prev_dc_inv_5 (cons $1 (cons $0 (prev_dc_inv_2 $0 empty)))) (prev_dc_inv_1 1))"
        },
        {
          "fn_9 (prev_dc_inv_5 (cons $1 (cons $0 empty)))": "(power (prev_dc_inv_5 (cons $1 (cons $0 empty))) (prev_dc_inv_1 1))"
        },
        {
          "fn_9 (prev_dc_inv_5 (map (lam $0) $0))": "(power (prev_dc_inv_5 (map (lam $0) $0)) (prev_dc_inv_1 1))"
        },
        {
          "fn_9 (prev_dc_inv_7 $0 $0)": "(power (prev_dc_inv_7 $0 $0) (prev_dc_inv_1 1))"
        }
      ]
    },
    {
      "body": "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $0 $1)))))))))",
      "dreamcoder": "#(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))))))",
      "arity": 0,
      "name": "fn_10",
      "rewritten": [
        "(lam (lam (zip $0 $1 (lam (lam (+. $0 $1))))))",
        "(lam (lam (zip $0 $1 (fn_8 +.))))",
        "(lam (lam (zip $1 $0 (lam (lam (+. $0 $1))))))",
        "(lam (lam (zip $1 $0 (fn_8 +.))))",
        "(lam (lam (map (lam $0) (zip $0 $1 (lam (lam (+. $0 $1)))))))",
        "(lam (fn_9 (prev_dc_inv_5 $0)))",
        "(lam (fn_9 (prev_dc_inv_7 $0 $0)))",
        "(lam (power (prev_dc_inv_5 $0) (prev_dc_inv_1 (prev_dc_inv_0 1))))",
        "(lam (fn_9 (prev_dc_inv_5 (map (lam $0) $0))))",
        "(lam (power (prev_dc_inv_7 $0 $0) (prev_dc_inv_1 (prev_dc_inv_0 1))))",
        "(lam (prev_dc_inv_3 (fn_9 (prev_dc_inv_3 (-. (*. $0 $0) (prev_dc_inv_1 1)) $0)) pi))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $0 (cons $1 empty))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $1 (cons $0 empty))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $0 empty)))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $1 empty)))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $1 (cons $0 (prev_dc_inv_2 $0 empty)))))))",
        "(lam (lam (*. $1 (/. $1 $0))))",
        "(lam (lam (*. (/. $1 $0) $1)))",
        "(lam (lam (/. (*. $1 $1) $0)))",
        "(lam (lam (/. $1 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 (prev_dc_inv_3 $1 $0) $1)))",
        "(lam (lam (*. $0 (*. $0 $1))))",
        "(lam (lam (*. $0 (*. $1 $0))))",
        "(lam (lam (*. $1 (*. $0 $0))))",
        "(lam (lam (*. (*. $0 $0) $1)))",
        "(lam (lam (*. (*. $0 $1) $0)))",
        "(lam (lam (/. (prev_dc_inv_7 $0 $1) (prev_dc_inv_4 $1))))",
        "(lam (lam (/. (prev_dc_inv_7 $1 $0) (prev_dc_inv_4 $1))))",
        "(lam (lam (prev_dc_inv_7 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $0) $1)))",
        "(lam (lam (prev_dc_inv_7 $0 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $0))))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(lam (lam (*. $0 (*. $1 $1))))",
        "(lam (lam (*. $1 (*. $0 $1))))",
        "(lam (lam (*. $1 (*. $1 $0))))",
        "(lam (lam (*. (*. $0 $1) $1)))",
        "(lam (lam (*. (*. $1 $0) $1)))",
        "(lam (lam (*. $1 (/. $1 $0))))",
        "(lam (lam (*. (/. $1 $0) $1)))",
        "(lam (lam (/. (*. $1 $1) $0)))",
        "(lam (lam (/. $1 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 (prev_dc_inv_3 $1 $0) $1)))",
        "(lam (prev_dc_inv_3 (-. pi (prev_dc_inv_0 pi)) $0))",
        "(lam (/. $0 (prev_dc_inv_1 (-. pi (prev_dc_inv_0 pi)))))",
        "(lam (/. $0 (fn_9 (prev_dc_inv_3 $0 $0))))",
        "(lam (*. $0 (fn_9 (prev_dc_inv_1 1))))",
        "(lam (*. (fn_9 (prev_dc_inv_1 1)) $0))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $0 $1)))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $1 $0)))))",
        "(lam (lam (*. $0 (*. $0 (prev_dc_inv_1 $1)))))",
        "(lam (lam (*. $0 (*. $1 (prev_dc_inv_1 $0)))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (*. $0 $0)))))",
        "(lam (lam (prev_dc_inv_1 (*. $0 $1))))",
        "(lam (lam (prev_dc_inv_1 (*. $1 $0))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 $1))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 $0))))",
        "(lam (lam (*. (prev_dc_inv_1 $0) $1)))",
        "(lam (lam (/. $1 (prev_dc_inv_3 $1 $0))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (/. $1 $0)))))",
        "(lam (lam (*. $1 (/. (prev_dc_inv_1 $1) $0))))",
        "(lam (lam (*. (prev_dc_inv_1 (/. $1 $0)) $1)))",
        "(lam (lam (*. (/. (prev_dc_inv_1 $1) $0) $1)))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (-. $0 (prev_dc_inv_1 $0)))",
        "(lam (/. $0 (prev_dc_inv_3 $0 $0)))",
        "(lam (*. $0 (prev_dc_inv_1 1)))",
        "(lam (*. (prev_dc_inv_1 1) $0))",
        "(lam (lam (prev_dc_inv_7 $0 $1)))",
        "(fn_8 prev_dc_inv_7)",
        "(lam (lam (prev_dc_inv_7 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1)))",
        "(lam (lam (prev_dc_inv_7 $0 $1)))",
        "(fn_8 prev_dc_inv_7)",
        "(lam (lam (prev_dc_inv_7 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1)))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $0 $3) (*. $1 $2))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $0 $3) (*. $2 $1))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $3 $0) (*. $1 $2))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $3 $0) (*. $2 $1))))))))",
        "(lam (lam (lam (lam (lam (*. (-. (*. $0 $3) (*. $1 $2)) $4))))))",
        "(lam (lam (lam (lam (-. (*. $0 $3) (*. $1 $2))))))",
        "(lam (lam (lam (lam (-. (*. $0 $3) (*. $2 $1))))))",
        "(lam (lam (lam (lam (-. (*. $3 $0) (*. $1 $2))))))",
        "(lam (lam (lam (lam (-. (*. $3 $0) (*. $2 $1))))))",
        "(lam (lam (lam (lam (-. (/. $0 (prev_dc_inv_0 $3)) (*. $1 $2))))))",
        "(lam (lam (lam (+. $2 (*. $0 $1)))))",
        "(lam (lam (lam (+. $2 (*. $1 $0)))))",
        "(lam (lam (lam (+. (*. $0 $1) $2))))",
        "(lam (lam (lam (+. (*. $1 $0) $2))))",
        "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
        "fn_10",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $0 (prev_dc_inv_1 $1)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $1 (prev_dc_inv_1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. (+. $2 (*. $0 (prev_dc_inv_1 $1))) $0))))))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(lam (lam (prev_dc_inv_1 (*. $1 (prev_dc_inv_5 $0)))))",
        "(lam (lam (prev_dc_inv_1 (*. (prev_dc_inv_5 $0) $1))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (prev_dc_inv_5 $0)))))",
        "(lam (lam (*. (prev_dc_inv_1 $1) (prev_dc_inv_5 $0))))",
        "(lam (lam (*. (prev_dc_inv_1 (prev_dc_inv_5 $0)) $1)))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $0 $1)))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $1 $0)))))",
        "(lam (lam (*. $0 (*. $0 (prev_dc_inv_1 $1)))))",
        "(lam (lam (*. $0 (*. $1 (prev_dc_inv_1 $0)))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (*. $0 $0)))))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "fn_10",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $0 (prev_dc_inv_1 $1)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $1 (prev_dc_inv_1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. (+. $2 (*. $0 (prev_dc_inv_1 $1))) $0))))))",
        "(lam (lam (lam (+. $2 (*. $0 $1)))))",
        "(lam (lam (lam (+. $2 (*. $1 $0)))))",
        "(lam (lam (lam (+. (*. $0 $1) $2))))",
        "(lam (lam (lam (+. (*. $1 $0) $2))))",
        "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
        "(lam (prev_dc_inv_3 $0 pi))",
        "(lam (/. pi (prev_dc_inv_1 $0)))",
        "(lam (*. (prev_dc_inv_0 (prev_dc_inv_1 $0)) pi))",
        "(lam (*. pi (prev_dc_inv_0 (prev_dc_inv_1 $0))))",
        "(lam (*. 1 (prev_dc_inv_3 $0 pi)))",
        "(lam (lam (prev_dc_inv_3 (fn_9 (/. $0 $1)) pi)))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi))))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi))))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi) $1)))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi) $1)))",
        "(lam (lam (prev_dc_inv_3 (fn_9 (/. $0 $1)) pi)))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi))))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi))))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi) $1)))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi) $1)))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $1 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $2 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $2 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $1 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (/. (prev_dc_inv_6 $1 $2 $0) (fn_9 (prev_dc_inv_5 $0))) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $1 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $2 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $2 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $1 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (/. (prev_dc_inv_6 $1 $2 $0) (fn_9 (prev_dc_inv_5 $0))) $0))))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 $0))))",
        "(lam (fn_8 (prev_dc_inv_6 $0)))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 (map (lam $0) $0)))))",
        "(lam (lam (lam (prev_dc_inv_6 $2 $1 (map (lam $0) $0)))))",
        "(lam (lam (lam (*. (/. $1 (prev_dc_inv_5 $0)) $2))))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 $0))))",
        "(lam (fn_8 (prev_dc_inv_6 $0)))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 (map (lam $0) $0)))))",
        "(lam (lam (lam (prev_dc_inv_6 $2 $1 (map (lam $0) $0)))))",
        "(lam (lam (lam (*. $1 (/. $2 (prev_dc_inv_5 $0))))))",
        "(lam (lam (*. $0 (*. $1 (-. 0 $0)))))",
        "(lam (lam (*. $0 (*. (-. 0 $0) $1))))",
        "(lam (lam (*. $0 (-. 0 (*. $0 $1)))))",
        "(lam (lam (*. $0 (-. 0 (*. $1 $0)))))",
        "(lam (lam (*. $1 (*. $0 (-. 0 $0)))))",
        "(lam (lam (*. $0 $1)))",
        "(fn_8 *.)",
        "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
        "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. $0 (*. $1 1))))",
        "(lam (lam (*. $0 $1)))",
        "(fn_8 *.)",
        "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
        "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. $0 (*. $1 1))))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_2 1 $0)))",
        "(lam (*. (prev_dc_inv_4 $0) 1))",
        "(lam (*. 1 (prev_dc_inv_4 $0)))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_2 1 $0)))",
        "(lam (*. (prev_dc_inv_4 $0) 1))",
        "(lam (*. 1 (prev_dc_inv_4 $0)))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) $0))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (zip $0 $0 (lam (lam (prev_dc_inv_0 $0)))))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (zip $0 $0 (lam (lam (prev_dc_inv_0 $1)))))))",
        "(lam (/. 1 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) $0))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) (map (lam $0) $0)))))",
        "(lam (*. $0 (*. $0 pi)))",
        "(lam (*. $0 (*. pi $0)))",
        "(lam (*. (*. $0 $0) pi))",
        "(lam (*. (*. $0 pi) $0))",
        "(lam (*. (*. pi $0) $0))",
        "(lam (lam (prev_dc_inv_5 (cons $0 (cons $1 empty)))))",
        "(lam (lam (prev_dc_inv_5 (cons $1 (cons $0 empty)))))",
        "(lam (lam (+. (*. $0 $0) (*. $1 $1))))",
        "(lam (lam (+. (*. $1 $1) (*. $0 $0))))",
        "(lam (lam (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $0 empty))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1))))))",
        "(lambda (lambda (zip $0 $1 (fn_8 +.))))",
        "(lambda (lambda (zip $1 $0 (lambda (lambda (+. $0 $1))))))",
        "(lambda (lambda (zip $1 $0 (fn_8 +.))))",
        "(lambda (lambda (map (lambda $0) (zip $0 $1 (lambda (lambda (+. $0 $1)))))))",
        "(lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)))",
        "(lambda (fn_9 (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0)))",
        "(lambda (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (/. 1. $0)) 1))))",
        "(lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (map (lambda $0) $0))))",
        "(lambda (power (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0) (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (/. 1. $0)) 1))))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (#(lambda (lambda (/. (+. $0 $0) $1))) (-. (*. $0 $0) (#(lambda (/. $0 (+. 1. 1.))) 1)) $0)) pi))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 empty))))))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 empty))))))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $0 empty)))))))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $1 empty)))))))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 (#(lambda (map (lambda (*. $0 $1)))) $0 empty)))))))",
        "(lambda (lambda (*. $1 (/. $1 $0))))",
        "(lambda (lambda (*. (/. $1 $0) $1)))",
        "(lambda (lambda (/. (*. $1 $1) $0)))",
        "(lambda (lambda (/. $1 (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0) $1)))",
        "(lambda (lambda (*. $0 (*. $0 $1))))",
        "(lambda (lambda (*. $0 (*. $1 $0))))",
        "(lambda (lambda (*. $1 (*. $0 $0))))",
        "(lambda (lambda (*. (*. $0 $0) $1)))",
        "(lambda (lambda (*. (*. $0 $1) $0)))",
        "(lambda (lambda (/. (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1))))",
        "(lambda (lambda (/. (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 $0) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $0))))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (lambda (*. $0 (*. $1 $1))))",
        "(lambda (lambda (*. $1 (*. $0 $1))))",
        "(lambda (lambda (*. $1 (*. $1 $0))))",
        "(lambda (lambda (*. (*. $0 $1) $1)))",
        "(lambda (lambda (*. (*. $1 $0) $1)))",
        "(lambda (lambda (*. $1 (/. $1 $0))))",
        "(lambda (lambda (*. (/. $1 $0) $1)))",
        "(lambda (lambda (/. (*. $1 $1) $0)))",
        "(lambda (lambda (/. $1 (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0) $1)))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (-. pi (#(lambda (/. 1. $0)) pi)) $0))",
        "(lambda (/. $0 (#(lambda (/. $0 (+. 1. 1.))) (-. pi (#(lambda (/. 1. $0)) pi)))))",
        "(lambda (/. $0 (fn_9 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 $0))))",
        "(lambda (*. $0 (fn_9 (#(lambda (/. $0 (+. 1. 1.))) 1))))",
        "(lambda (*. (fn_9 (#(lambda (/. $0 (+. 1. 1.))) 1)) $0))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))",
        "(lambda (lambda (*. $0 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))",
        "(lambda (lambda (*. $0 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $0)))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) $0) $1)))",
        "(lambda (lambda (/. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (/. $1 $0)))))",
        "(lambda (lambda (*. $1 (/. (#(lambda (/. $0 (+. 1. 1.))) $1) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) (/. $1 $0)) $1)))",
        "(lambda (lambda (*. (/. (#(lambda (/. $0 (+. 1. 1.))) $1) $0) $1)))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(lambda (#(lambda (/. $0 (+. 1. 1.))) $0))",
        "(lambda (-. $0 (#(lambda (/. $0 (+. 1. 1.))) $0)))",
        "(lambda (/. $0 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 $0)))",
        "(lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) 1)))",
        "(lambda (*. (#(lambda (/. $0 (+. 1. 1.))) 1) $0))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1)))",
        "(fn_8 #(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1)))",
        "(fn_8 #(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $0 $3) (*. $1 $2))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $0 $3) (*. $2 $1))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $3 $0) (*. $1 $2))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $3 $0) (*. $2 $1))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. (-. (*. $0 $3) (*. $1 $2)) $4))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $0 $3) (*. $1 $2))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $0 $3) (*. $2 $1))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $3 $0) (*. $1 $2))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $3 $0) (*. $2 $1))))))",
        "(lambda (lambda (lambda (lambda (-. (/. $0 (#(lambda (/. 1. $0)) $3)) (*. $1 $2))))))",
        "(lambda (lambda (lambda (+. $2 (*. $0 $1)))))",
        "(lambda (lambda (lambda (+. $2 (*. $1 $0)))))",
        "(lambda (lambda (lambda (+. (*. $0 $1) $2))))",
        "(lambda (lambda (lambda (+. (*. $1 $0) $2))))",
        "(lambda (lambda (lambda (+. $2 (/. $0 (#(lambda (/. 1. $0)) $1))))))",
        "#(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))) $0))))))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) $1))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)) $1)))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))",
        "(lambda (lambda (*. $0 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))",
        "(lambda (lambda (*. $0 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $0)))))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "#(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))) $0))))))",
        "(lambda (lambda (lambda (+. $2 (*. $0 $1)))))",
        "(lambda (lambda (lambda (+. $2 (*. $1 $0)))))",
        "(lambda (lambda (lambda (+. (*. $0 $1) $2))))",
        "(lambda (lambda (lambda (+. (*. $1 $0) $2))))",
        "(lambda (lambda (lambda (+. $2 (/. $0 (#(lambda (/. 1. $0)) $1))))))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 pi))",
        "(lambda (/. pi (#(lambda (/. $0 (+. 1. 1.))) $0)))",
        "(lambda (*. (#(lambda (/. 1. $0)) (#(lambda (/. $0 (+. 1. 1.))) $0)) pi))",
        "(lambda (*. pi (#(lambda (/. 1. $0)) (#(lambda (/. $0 (+. 1. 1.))) $0))))",
        "(lambda (*. 1 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 pi)))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (/. $0 $1)) pi)))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $0 $1)) pi))))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $1 $0)) pi))))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $0 $1)) pi) $1)))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $1 $0)) pi) $1)))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (/. $0 $1)) pi)))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $0 $1)) pi))))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $1 $0)) pi))))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $0 $1)) pi) $1)))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $1 $0)) pi) $1)))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 (/. $2 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 (/. $1 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $1 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $2 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $2 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $1 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (/. (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0) (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 (/. $2 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 (/. $1 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $1 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $2 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $2 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $1 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (/. (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0) (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0))))",
        "(lambda (fn_8 (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $0)))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 $1 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (*. (/. $1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)) $2))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0))))",
        "(lambda (fn_8 (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $0)))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 $1 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (*. $1 (/. $2 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))))",
        "(lambda (lambda (*. $0 (*. $1 (-. 0 $0)))))",
        "(lambda (lambda (*. $0 (*. (-. 0 $0) $1))))",
        "(lambda (lambda (*. $0 (-. 0 (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (-. 0 (*. $1 $0)))))",
        "(lambda (lambda (*. $1 (*. $0 (-. 0 $0)))))",
        "(lambda (lambda (*. $0 $1)))",
        "(fn_8 *.)",
        "(lambda (lambda (/. $0 (#(lambda (/. 1. $0)) $1))))",
        "(lambda (lambda (/. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. $0 (*. $1 1))))",
        "(lambda (lambda (*. $0 $1)))",
        "(fn_8 *.)",
        "(lambda (lambda (/. $0 (#(lambda (/. 1. $0)) $1))))",
        "(lambda (lambda (/. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. $0 (*. $1 1))))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (#(lambda (map (lambda (*. $0 $1)))) 1 $0)))",
        "(lambda (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0) 1))",
        "(lambda (*. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (#(lambda (map (lambda (*. $0 $1)))) 1 $0)))",
        "(lambda (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0) 1))",
        "(lambda (*. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0)))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) $0))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $0 (lambda (lambda (#(lambda (/. 1. $0)) $0)))))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $0 (lambda (lambda (#(lambda (/. 1. $0)) $1)))))))",
        "(lambda (/. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) $0))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) (map (lambda $0) $0)))))",
        "(lambda (*. $0 (*. $0 pi)))",
        "(lambda (*. $0 (*. pi $0)))",
        "(lambda (*. (*. $0 $0) pi))",
        "(lambda (*. (*. $0 pi) $0))",
        "(lambda (*. (*. pi $0) $0))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 empty)))))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 empty)))))",
        "(lambda (lambda (+. (*. $0 $0) (*. $1 $1))))",
        "(lambda (lambda (+. (*. $1 $1) (*. $0 $0))))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $0 empty))))))"
      ],
      "utility": 813,
      "expected_cost": 21430,
      "final_cost": 21430,
      "multiplier": 1.0852076528231451,
      "multiplier_wrt_orig": 1.2279981334577694,
      "num_uses": 2,
      "uses": [
        {
          "fn_10 ": "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $0 $1)))))))))"
        }
      ]
    },
    {
      "body": "(lam (lam (lam (prev_dc_inv_2 (/. (prev_dc_inv_6 $1 $2 $0) (fn_9 (prev_dc_inv_5 $0))) $0))))",
      "dreamcoder": "#(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (/. (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0))))",
      "arity": 0,
      "name": "fn_11",
      "rewritten": [
        "(lam (lam (zip $0 $1 (lam (lam (+. $0 $1))))))",
        "(lam (lam (zip $0 $1 (fn_8 +.))))",
        "(lam (lam (zip $1 $0 (lam (lam (+. $0 $1))))))",
        "(lam (lam (zip $1 $0 (fn_8 +.))))",
        "(lam (lam (map (lam $0) (zip $0 $1 (lam (lam (+. $0 $1)))))))",
        "(lam (fn_9 (prev_dc_inv_5 $0)))",
        "(lam (fn_9 (prev_dc_inv_7 $0 $0)))",
        "(lam (power (prev_dc_inv_5 $0) (prev_dc_inv_1 (prev_dc_inv_0 1))))",
        "(lam (fn_9 (prev_dc_inv_5 (map (lam $0) $0))))",
        "(lam (power (prev_dc_inv_7 $0 $0) (prev_dc_inv_1 (prev_dc_inv_0 1))))",
        "(lam (prev_dc_inv_3 (fn_9 (prev_dc_inv_3 (-. (*. $0 $0) (prev_dc_inv_1 1)) $0)) pi))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $0 (cons $1 empty))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $1 (cons $0 empty))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $0 empty)))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $1 empty)))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $1 (cons $0 (prev_dc_inv_2 $0 empty)))))))",
        "(lam (lam (*. $1 (/. $1 $0))))",
        "(lam (lam (*. (/. $1 $0) $1)))",
        "(lam (lam (/. (*. $1 $1) $0)))",
        "(lam (lam (/. $1 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 (prev_dc_inv_3 $1 $0) $1)))",
        "(lam (lam (*. $0 (*. $0 $1))))",
        "(lam (lam (*. $0 (*. $1 $0))))",
        "(lam (lam (*. $1 (*. $0 $0))))",
        "(lam (lam (*. (*. $0 $0) $1)))",
        "(lam (lam (*. (*. $0 $1) $0)))",
        "(lam (lam (/. (prev_dc_inv_7 $0 $1) (prev_dc_inv_4 $1))))",
        "(lam (lam (/. (prev_dc_inv_7 $1 $0) (prev_dc_inv_4 $1))))",
        "(lam (lam (prev_dc_inv_7 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $0) $1)))",
        "(lam (lam (prev_dc_inv_7 $0 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $0))))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(lam (lam (*. $0 (*. $1 $1))))",
        "(lam (lam (*. $1 (*. $0 $1))))",
        "(lam (lam (*. $1 (*. $1 $0))))",
        "(lam (lam (*. (*. $0 $1) $1)))",
        "(lam (lam (*. (*. $1 $0) $1)))",
        "(lam (lam (*. $1 (/. $1 $0))))",
        "(lam (lam (*. (/. $1 $0) $1)))",
        "(lam (lam (/. (*. $1 $1) $0)))",
        "(lam (lam (/. $1 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 (prev_dc_inv_3 $1 $0) $1)))",
        "(lam (prev_dc_inv_3 (-. pi (prev_dc_inv_0 pi)) $0))",
        "(lam (/. $0 (prev_dc_inv_1 (-. pi (prev_dc_inv_0 pi)))))",
        "(lam (/. $0 (fn_9 (prev_dc_inv_3 $0 $0))))",
        "(lam (*. $0 (fn_9 (prev_dc_inv_1 1))))",
        "(lam (*. (fn_9 (prev_dc_inv_1 1)) $0))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $0 $1)))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $1 $0)))))",
        "(lam (lam (*. $0 (*. $0 (prev_dc_inv_1 $1)))))",
        "(lam (lam (*. $0 (*. $1 (prev_dc_inv_1 $0)))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (*. $0 $0)))))",
        "(lam (lam (prev_dc_inv_1 (*. $0 $1))))",
        "(lam (lam (prev_dc_inv_1 (*. $1 $0))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 $1))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 $0))))",
        "(lam (lam (*. (prev_dc_inv_1 $0) $1)))",
        "(lam (lam (/. $1 (prev_dc_inv_3 $1 $0))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (/. $1 $0)))))",
        "(lam (lam (*. $1 (/. (prev_dc_inv_1 $1) $0))))",
        "(lam (lam (*. (prev_dc_inv_1 (/. $1 $0)) $1)))",
        "(lam (lam (*. (/. (prev_dc_inv_1 $1) $0) $1)))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (-. $0 (prev_dc_inv_1 $0)))",
        "(lam (/. $0 (prev_dc_inv_3 $0 $0)))",
        "(lam (*. $0 (prev_dc_inv_1 1)))",
        "(lam (*. (prev_dc_inv_1 1) $0))",
        "(lam (lam (prev_dc_inv_7 $0 $1)))",
        "(fn_8 prev_dc_inv_7)",
        "(lam (lam (prev_dc_inv_7 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1)))",
        "(lam (lam (prev_dc_inv_7 $0 $1)))",
        "(fn_8 prev_dc_inv_7)",
        "(lam (lam (prev_dc_inv_7 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1)))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $0 $3) (*. $1 $2))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $0 $3) (*. $2 $1))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $3 $0) (*. $1 $2))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $3 $0) (*. $2 $1))))))))",
        "(lam (lam (lam (lam (lam (*. (-. (*. $0 $3) (*. $1 $2)) $4))))))",
        "(lam (lam (lam (lam (-. (*. $0 $3) (*. $1 $2))))))",
        "(lam (lam (lam (lam (-. (*. $0 $3) (*. $2 $1))))))",
        "(lam (lam (lam (lam (-. (*. $3 $0) (*. $1 $2))))))",
        "(lam (lam (lam (lam (-. (*. $3 $0) (*. $2 $1))))))",
        "(lam (lam (lam (lam (-. (/. $0 (prev_dc_inv_0 $3)) (*. $1 $2))))))",
        "(lam (lam (lam (+. $2 (*. $0 $1)))))",
        "(lam (lam (lam (+. $2 (*. $1 $0)))))",
        "(lam (lam (lam (+. (*. $0 $1) $2))))",
        "(lam (lam (lam (+. (*. $1 $0) $2))))",
        "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
        "fn_10",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $0 (prev_dc_inv_1 $1)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $1 (prev_dc_inv_1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. (+. $2 (*. $0 (prev_dc_inv_1 $1))) $0))))))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(lam (lam (prev_dc_inv_1 (*. $1 (prev_dc_inv_5 $0)))))",
        "(lam (lam (prev_dc_inv_1 (*. (prev_dc_inv_5 $0) $1))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (prev_dc_inv_5 $0)))))",
        "(lam (lam (*. (prev_dc_inv_1 $1) (prev_dc_inv_5 $0))))",
        "(lam (lam (*. (prev_dc_inv_1 (prev_dc_inv_5 $0)) $1)))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $0 $1)))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $1 $0)))))",
        "(lam (lam (*. $0 (*. $0 (prev_dc_inv_1 $1)))))",
        "(lam (lam (*. $0 (*. $1 (prev_dc_inv_1 $0)))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (*. $0 $0)))))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "fn_10",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $0 (prev_dc_inv_1 $1)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $1 (prev_dc_inv_1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. (+. $2 (*. $0 (prev_dc_inv_1 $1))) $0))))))",
        "(lam (lam (lam (+. $2 (*. $0 $1)))))",
        "(lam (lam (lam (+. $2 (*. $1 $0)))))",
        "(lam (lam (lam (+. (*. $0 $1) $2))))",
        "(lam (lam (lam (+. (*. $1 $0) $2))))",
        "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
        "(lam (prev_dc_inv_3 $0 pi))",
        "(lam (/. pi (prev_dc_inv_1 $0)))",
        "(lam (*. (prev_dc_inv_0 (prev_dc_inv_1 $0)) pi))",
        "(lam (*. pi (prev_dc_inv_0 (prev_dc_inv_1 $0))))",
        "(lam (*. 1 (prev_dc_inv_3 $0 pi)))",
        "(lam (lam (prev_dc_inv_3 (fn_9 (/. $0 $1)) pi)))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi))))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi))))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi) $1)))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi) $1)))",
        "(lam (lam (prev_dc_inv_3 (fn_9 (/. $0 $1)) pi)))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi))))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi))))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi) $1)))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi) $1)))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $1 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $2 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $2 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $1 $0) $0))))",
        "fn_11",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $1 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $2 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $2 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $1 $0) $0))))",
        "fn_11",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 $0))))",
        "(lam (fn_8 (prev_dc_inv_6 $0)))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 (map (lam $0) $0)))))",
        "(lam (lam (lam (prev_dc_inv_6 $2 $1 (map (lam $0) $0)))))",
        "(lam (lam (lam (*. (/. $1 (prev_dc_inv_5 $0)) $2))))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 $0))))",
        "(lam (fn_8 (prev_dc_inv_6 $0)))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 (map (lam $0) $0)))))",
        "(lam (lam (lam (prev_dc_inv_6 $2 $1 (map (lam $0) $0)))))",
        "(lam (lam (lam (*. $1 (/. $2 (prev_dc_inv_5 $0))))))",
        "(lam (lam (*. $0 (*. $1 (-. 0 $0)))))",
        "(lam (lam (*. $0 (*. (-. 0 $0) $1))))",
        "(lam (lam (*. $0 (-. 0 (*. $0 $1)))))",
        "(lam (lam (*. $0 (-. 0 (*. $1 $0)))))",
        "(lam (lam (*. $1 (*. $0 (-. 0 $0)))))",
        "(lam (lam (*. $0 $1)))",
        "(fn_8 *.)",
        "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
        "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. $0 (*. $1 1))))",
        "(lam (lam (*. $0 $1)))",
        "(fn_8 *.)",
        "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
        "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. $0 (*. $1 1))))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_2 1 $0)))",
        "(lam (*. (prev_dc_inv_4 $0) 1))",
        "(lam (*. 1 (prev_dc_inv_4 $0)))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_2 1 $0)))",
        "(lam (*. (prev_dc_inv_4 $0) 1))",
        "(lam (*. 1 (prev_dc_inv_4 $0)))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) $0))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (zip $0 $0 (lam (lam (prev_dc_inv_0 $0)))))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (zip $0 $0 (lam (lam (prev_dc_inv_0 $1)))))))",
        "(lam (/. 1 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) $0))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) (map (lam $0) $0)))))",
        "(lam (*. $0 (*. $0 pi)))",
        "(lam (*. $0 (*. pi $0)))",
        "(lam (*. (*. $0 $0) pi))",
        "(lam (*. (*. $0 pi) $0))",
        "(lam (*. (*. pi $0) $0))",
        "(lam (lam (prev_dc_inv_5 (cons $0 (cons $1 empty)))))",
        "(lam (lam (prev_dc_inv_5 (cons $1 (cons $0 empty)))))",
        "(lam (lam (+. (*. $0 $0) (*. $1 $1))))",
        "(lam (lam (+. (*. $1 $1) (*. $0 $0))))",
        "(lam (lam (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $0 empty))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1))))))",
        "(lambda (lambda (zip $0 $1 (fn_8 +.))))",
        "(lambda (lambda (zip $1 $0 (lambda (lambda (+. $0 $1))))))",
        "(lambda (lambda (zip $1 $0 (fn_8 +.))))",
        "(lambda (lambda (map (lambda $0) (zip $0 $1 (lambda (lambda (+. $0 $1)))))))",
        "(lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)))",
        "(lambda (fn_9 (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0)))",
        "(lambda (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (/. 1. $0)) 1))))",
        "(lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (map (lambda $0) $0))))",
        "(lambda (power (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0) (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (/. 1. $0)) 1))))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (#(lambda (lambda (/. (+. $0 $0) $1))) (-. (*. $0 $0) (#(lambda (/. $0 (+. 1. 1.))) 1)) $0)) pi))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 empty))))))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 empty))))))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $0 empty)))))))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $1 empty)))))))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 (#(lambda (map (lambda (*. $0 $1)))) $0 empty)))))))",
        "(lambda (lambda (*. $1 (/. $1 $0))))",
        "(lambda (lambda (*. (/. $1 $0) $1)))",
        "(lambda (lambda (/. (*. $1 $1) $0)))",
        "(lambda (lambda (/. $1 (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0) $1)))",
        "(lambda (lambda (*. $0 (*. $0 $1))))",
        "(lambda (lambda (*. $0 (*. $1 $0))))",
        "(lambda (lambda (*. $1 (*. $0 $0))))",
        "(lambda (lambda (*. (*. $0 $0) $1)))",
        "(lambda (lambda (*. (*. $0 $1) $0)))",
        "(lambda (lambda (/. (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1))))",
        "(lambda (lambda (/. (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 $0) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $0))))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (lambda (*. $0 (*. $1 $1))))",
        "(lambda (lambda (*. $1 (*. $0 $1))))",
        "(lambda (lambda (*. $1 (*. $1 $0))))",
        "(lambda (lambda (*. (*. $0 $1) $1)))",
        "(lambda (lambda (*. (*. $1 $0) $1)))",
        "(lambda (lambda (*. $1 (/. $1 $0))))",
        "(lambda (lambda (*. (/. $1 $0) $1)))",
        "(lambda (lambda (/. (*. $1 $1) $0)))",
        "(lambda (lambda (/. $1 (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0) $1)))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (-. pi (#(lambda (/. 1. $0)) pi)) $0))",
        "(lambda (/. $0 (#(lambda (/. $0 (+. 1. 1.))) (-. pi (#(lambda (/. 1. $0)) pi)))))",
        "(lambda (/. $0 (fn_9 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 $0))))",
        "(lambda (*. $0 (fn_9 (#(lambda (/. $0 (+. 1. 1.))) 1))))",
        "(lambda (*. (fn_9 (#(lambda (/. $0 (+. 1. 1.))) 1)) $0))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))",
        "(lambda (lambda (*. $0 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))",
        "(lambda (lambda (*. $0 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $0)))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) $0) $1)))",
        "(lambda (lambda (/. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (/. $1 $0)))))",
        "(lambda (lambda (*. $1 (/. (#(lambda (/. $0 (+. 1. 1.))) $1) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) (/. $1 $0)) $1)))",
        "(lambda (lambda (*. (/. (#(lambda (/. $0 (+. 1. 1.))) $1) $0) $1)))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(lambda (#(lambda (/. $0 (+. 1. 1.))) $0))",
        "(lambda (-. $0 (#(lambda (/. $0 (+. 1. 1.))) $0)))",
        "(lambda (/. $0 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 $0)))",
        "(lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) 1)))",
        "(lambda (*. (#(lambda (/. $0 (+. 1. 1.))) 1) $0))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1)))",
        "(fn_8 #(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1)))",
        "(fn_8 #(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $0 $3) (*. $1 $2))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $0 $3) (*. $2 $1))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $3 $0) (*. $1 $2))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $3 $0) (*. $2 $1))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. (-. (*. $0 $3) (*. $1 $2)) $4))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $0 $3) (*. $1 $2))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $0 $3) (*. $2 $1))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $3 $0) (*. $1 $2))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $3 $0) (*. $2 $1))))))",
        "(lambda (lambda (lambda (lambda (-. (/. $0 (#(lambda (/. 1. $0)) $3)) (*. $1 $2))))))",
        "(lambda (lambda (lambda (+. $2 (*. $0 $1)))))",
        "(lambda (lambda (lambda (+. $2 (*. $1 $0)))))",
        "(lambda (lambda (lambda (+. (*. $0 $1) $2))))",
        "(lambda (lambda (lambda (+. (*. $1 $0) $2))))",
        "(lambda (lambda (lambda (+. $2 (/. $0 (#(lambda (/. 1. $0)) $1))))))",
        "fn_10",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))) $0))))))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) $1))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)) $1)))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))",
        "(lambda (lambda (*. $0 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))",
        "(lambda (lambda (*. $0 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $0)))))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "fn_10",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))) $0))))))",
        "(lambda (lambda (lambda (+. $2 (*. $0 $1)))))",
        "(lambda (lambda (lambda (+. $2 (*. $1 $0)))))",
        "(lambda (lambda (lambda (+. (*. $0 $1) $2))))",
        "(lambda (lambda (lambda (+. (*. $1 $0) $2))))",
        "(lambda (lambda (lambda (+. $2 (/. $0 (#(lambda (/. 1. $0)) $1))))))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 pi))",
        "(lambda (/. pi (#(lambda (/. $0 (+. 1. 1.))) $0)))",
        "(lambda (*. (#(lambda (/. 1. $0)) (#(lambda (/. $0 (+. 1. 1.))) $0)) pi))",
        "(lambda (*. pi (#(lambda (/. 1. $0)) (#(lambda (/. $0 (+. 1. 1.))) $0))))",
        "(lambda (*. 1 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 pi)))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (/. $0 $1)) pi)))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $0 $1)) pi))))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $1 $0)) pi))))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $0 $1)) pi) $1)))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $1 $0)) pi) $1)))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (/. $0 $1)) pi)))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $0 $1)) pi))))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $1 $0)) pi))))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $0 $1)) pi) $1)))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $1 $0)) pi) $1)))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 (/. $2 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 (/. $1 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $1 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $2 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $2 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $1 $0) $0))))",
        "#(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (/. (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 (/. $2 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 (/. $1 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $1 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $2 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $2 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $1 $0) $0))))",
        "#(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (/. (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0) (#(lambda (power $0 (#(lambda (/. $0 (+. 1. 1.))) 1))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0))))",
        "(lambda (fn_8 (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $0)))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 $1 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (*. (/. $1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)) $2))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0))))",
        "(lambda (fn_8 (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $0)))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 $1 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (*. $1 (/. $2 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))))",
        "(lambda (lambda (*. $0 (*. $1 (-. 0 $0)))))",
        "(lambda (lambda (*. $0 (*. (-. 0 $0) $1))))",
        "(lambda (lambda (*. $0 (-. 0 (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (-. 0 (*. $1 $0)))))",
        "(lambda (lambda (*. $1 (*. $0 (-. 0 $0)))))",
        "(lambda (lambda (*. $0 $1)))",
        "(fn_8 *.)",
        "(lambda (lambda (/. $0 (#(lambda (/. 1. $0)) $1))))",
        "(lambda (lambda (/. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. $0 (*. $1 1))))",
        "(lambda (lambda (*. $0 $1)))",
        "(fn_8 *.)",
        "(lambda (lambda (/. $0 (#(lambda (/. 1. $0)) $1))))",
        "(lambda (lambda (/. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. $0 (*. $1 1))))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (#(lambda (map (lambda (*. $0 $1)))) 1 $0)))",
        "(lambda (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0) 1))",
        "(lambda (*. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (#(lambda (map (lambda (*. $0 $1)))) 1 $0)))",
        "(lambda (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0) 1))",
        "(lambda (*. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0)))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) $0))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $0 (lambda (lambda (#(lambda (/. 1. $0)) $0)))))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $0 (lambda (lambda (#(lambda (/. 1. $0)) $1)))))))",
        "(lambda (/. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) $0))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) (map (lambda $0) $0)))))",
        "(lambda (*. $0 (*. $0 pi)))",
        "(lambda (*. $0 (*. pi $0)))",
        "(lambda (*. (*. $0 $0) pi))",
        "(lambda (*. (*. $0 pi) $0))",
        "(lambda (*. (*. pi $0) $0))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 empty)))))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 empty)))))",
        "(lambda (lambda (+. (*. $0 $0) (*. $1 $1))))",
        "(lambda (lambda (+. (*. $1 $1) (*. $0 $0))))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $0 empty))))))"
      ],
      "utility": 812,
      "expected_cost": 19606,
      "final_cost": 19606,
      "multiplier": 1.0930327450780373,
      "multiplier_wrt_orig": 1.3422421707640517,
      "num_uses": 2,
      "uses": [
        {
          "fn_11 ": "(lam (lam (lam (prev_dc_inv_2 (/. (prev_dc_inv_6 $1 $2 $0) (fn_9 (prev_dc_inv_5 $0))) $0))))"
        }
      ]
    },
    {
      "body": "(lam (*. $0 (*. $0 #0)))",
      "dreamcoder": "#(lambda (lambda (*. $0 (*. $0 $1))))",
      "arity": 1,
      "name": "fn_12",
      "rewritten": [
        "(lam (lam (zip $0 $1 (lam (lam (+. $0 $1))))))",
        "(lam (lam (zip $0 $1 (fn_8 +.))))",
        "(lam (lam (zip $1 $0 (lam (lam (+. $0 $1))))))",
        "(lam (lam (zip $1 $0 (fn_8 +.))))",
        "(lam (lam (map (lam $0) (zip $0 $1 (lam (lam (+. $0 $1)))))))",
        "(lam (fn_9 (prev_dc_inv_5 $0)))",
        "(lam (fn_9 (prev_dc_inv_7 $0 $0)))",
        "(lam (power (prev_dc_inv_5 $0) (prev_dc_inv_1 (prev_dc_inv_0 1))))",
        "(lam (fn_9 (prev_dc_inv_5 (map (lam $0) $0))))",
        "(lam (power (prev_dc_inv_7 $0 $0) (prev_dc_inv_1 (prev_dc_inv_0 1))))",
        "(lam (prev_dc_inv_3 (fn_9 (prev_dc_inv_3 (-. (*. $0 $0) (prev_dc_inv_1 1)) $0)) pi))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $0 (cons $1 empty))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $1 (cons $0 empty))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $0 empty)))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $1 empty)))))))",
        "(lam (lam (fn_9 (prev_dc_inv_5 (cons $1 (cons $0 (prev_dc_inv_2 $0 empty)))))))",
        "(lam (lam (*. $1 (/. $1 $0))))",
        "(lam (lam (*. (/. $1 $0) $1)))",
        "(lam (lam (/. (*. $1 $1) $0)))",
        "(lam (lam (/. $1 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 (prev_dc_inv_3 $1 $0) $1)))",
        "(lam (fn_12 $0))",
        "(lam (lam (*. $0 (*. $1 $0))))",
        "(lam (lam (*. $1 (*. $0 $0))))",
        "(lam (lam (*. (*. $0 $0) $1)))",
        "(lam (lam (*. (*. $0 $1) $0)))",
        "(lam (lam (/. (prev_dc_inv_7 $0 $1) (prev_dc_inv_4 $1))))",
        "(lam (lam (/. (prev_dc_inv_7 $1 $0) (prev_dc_inv_4 $1))))",
        "(lam (lam (prev_dc_inv_7 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $0) $1)))",
        "(lam (lam (prev_dc_inv_7 $0 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (prev_dc_inv_2 (prev_dc_inv_0 (prev_dc_inv_4 $1)) $0))))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(lam (lam (*. $0 (*. $1 $1))))",
        "(lam (lam (*. $1 (*. $0 $1))))",
        "(lam (lam (*. $1 (*. $1 $0))))",
        "(lam (lam (*. (*. $0 $1) $1)))",
        "(lam (lam (*. (*. $1 $0) $1)))",
        "(lam (lam (*. $1 (/. $1 $0))))",
        "(lam (lam (*. (/. $1 $0) $1)))",
        "(lam (lam (/. (*. $1 $1) $0)))",
        "(lam (lam (/. $1 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 (prev_dc_inv_3 $1 $0) $1)))",
        "(lam (prev_dc_inv_3 (-. pi (prev_dc_inv_0 pi)) $0))",
        "(lam (/. $0 (prev_dc_inv_1 (-. pi (prev_dc_inv_0 pi)))))",
        "(lam (/. $0 (fn_9 (prev_dc_inv_3 $0 $0))))",
        "(lam (*. $0 (fn_9 (prev_dc_inv_1 1))))",
        "(lam (*. (fn_9 (prev_dc_inv_1 1)) $0))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $0 $1)))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $1 $0)))))",
        "(lam (fn_12 (prev_dc_inv_1 $0)))",
        "(lam (lam (*. $0 (*. $1 (prev_dc_inv_1 $0)))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (*. $0 $0)))))",
        "(lam (lam (prev_dc_inv_1 (*. $0 $1))))",
        "(lam (lam (prev_dc_inv_1 (*. $1 $0))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 $1))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 $0))))",
        "(lam (lam (*. (prev_dc_inv_1 $0) $1)))",
        "(lam (lam (/. $1 (prev_dc_inv_3 $1 $0))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (/. $1 $0)))))",
        "(lam (lam (*. $1 (/. (prev_dc_inv_1 $1) $0))))",
        "(lam (lam (*. (prev_dc_inv_1 (/. $1 $0)) $1)))",
        "(lam (lam (*. (/. (prev_dc_inv_1 $1) $0) $1)))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (-. $0 (prev_dc_inv_1 $0)))",
        "(lam (/. $0 (prev_dc_inv_3 $0 $0)))",
        "(lam (*. $0 (prev_dc_inv_1 1)))",
        "(lam (*. (prev_dc_inv_1 1) $0))",
        "(lam (lam (prev_dc_inv_7 $0 $1)))",
        "(fn_8 prev_dc_inv_7)",
        "(lam (lam (prev_dc_inv_7 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1)))",
        "(lam (lam (prev_dc_inv_7 $0 $1)))",
        "(fn_8 prev_dc_inv_7)",
        "(lam (lam (prev_dc_inv_7 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_7 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1)))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $0 $3) (*. $1 $2))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $0 $3) (*. $2 $1))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $3 $0) (*. $1 $2))))))))",
        "(lam (lam (lam (lam (lam (*. $4 (-. (*. $3 $0) (*. $2 $1))))))))",
        "(lam (lam (lam (lam (lam (*. (-. (*. $0 $3) (*. $1 $2)) $4))))))",
        "(lam (lam (lam (lam (-. (*. $0 $3) (*. $1 $2))))))",
        "(lam (lam (lam (lam (-. (*. $0 $3) (*. $2 $1))))))",
        "(lam (lam (lam (lam (-. (*. $3 $0) (*. $1 $2))))))",
        "(lam (lam (lam (lam (-. (*. $3 $0) (*. $2 $1))))))",
        "(lam (lam (lam (lam (-. (/. $0 (prev_dc_inv_0 $3)) (*. $1 $2))))))",
        "(lam (lam (lam (+. $2 (*. $0 $1)))))",
        "(lam (lam (lam (+. $2 (*. $1 $0)))))",
        "(lam (lam (lam (+. (*. $0 $1) $2))))",
        "(lam (lam (lam (+. (*. $1 $0) $2))))",
        "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
        "fn_10",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $0 (prev_dc_inv_1 $1)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $1 (prev_dc_inv_1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. (+. $2 (*. $0 (prev_dc_inv_1 $1))) $0))))))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(lam (lam (prev_dc_inv_1 (*. $1 (prev_dc_inv_5 $0)))))",
        "(lam (lam (prev_dc_inv_1 (*. (prev_dc_inv_5 $0) $1))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (prev_dc_inv_5 $0)))))",
        "(lam (lam (*. (prev_dc_inv_1 $1) (prev_dc_inv_5 $0))))",
        "(lam (lam (*. (prev_dc_inv_1 (prev_dc_inv_5 $0)) $1)))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $0 $1)))))",
        "(lam (lam (*. $0 (prev_dc_inv_1 (*. $1 $0)))))",
        "(lam (fn_12 (prev_dc_inv_1 $0)))",
        "(lam (lam (*. $0 (*. $1 (prev_dc_inv_1 $0)))))",
        "(lam (lam (*. $1 (prev_dc_inv_1 (*. $0 $0)))))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 prev_dc_inv_2)",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_2 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "fn_10",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (prev_dc_inv_1 (*. $1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $0 (prev_dc_inv_1 $1)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. $0 (+. $2 (*. $1 (prev_dc_inv_1 $0)))))))))",
        "(lam (lam (lam (lam (+. $3 (*. (+. $2 (*. $0 (prev_dc_inv_1 $1))) $0))))))",
        "(lam (lam (lam (+. $2 (*. $0 $1)))))",
        "(lam (lam (lam (+. $2 (*. $1 $0)))))",
        "(lam (lam (lam (+. (*. $0 $1) $2))))",
        "(lam (lam (lam (+. (*. $1 $0) $2))))",
        "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
        "(lam (prev_dc_inv_3 $0 pi))",
        "(lam (/. pi (prev_dc_inv_1 $0)))",
        "(lam (*. (prev_dc_inv_0 (prev_dc_inv_1 $0)) pi))",
        "(lam (*. pi (prev_dc_inv_0 (prev_dc_inv_1 $0))))",
        "(lam (*. 1 (prev_dc_inv_3 $0 pi)))",
        "(lam (lam (prev_dc_inv_3 (fn_9 (/. $0 $1)) pi)))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi))))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi))))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi) $1)))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi) $1)))",
        "(lam (lam (prev_dc_inv_3 (fn_9 (/. $0 $1)) pi)))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi))))",
        "(lam (lam (*. $1 (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi))))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $0 $1)) pi) $1)))",
        "(lam (lam (*. (prev_dc_inv_3 (fn_9 (*. $1 $0)) pi) $1)))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $1 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $2 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $2 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $1 $0) $0))))",
        "fn_11",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $1 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 $2 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $1 (fn_9 (prev_dc_inv_5 $0))) $2 $0) $0))))",
        "(lam (lam (lam (prev_dc_inv_2 (prev_dc_inv_6 (/. $2 (fn_9 (prev_dc_inv_5 $0))) $1 $0) $0))))",
        "fn_11",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 $0))))",
        "(lam (fn_8 (prev_dc_inv_6 $0)))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 (map (lam $0) $0)))))",
        "(lam (lam (lam (prev_dc_inv_6 $2 $1 (map (lam $0) $0)))))",
        "(lam (lam (lam (*. (/. $1 (prev_dc_inv_5 $0)) $2))))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 $0))))",
        "(lam (fn_8 (prev_dc_inv_6 $0)))",
        "(lam (lam (lam (prev_dc_inv_6 $1 $2 (map (lam $0) $0)))))",
        "(lam (lam (lam (prev_dc_inv_6 $2 $1 (map (lam $0) $0)))))",
        "(lam (lam (lam (*. $1 (/. $2 (prev_dc_inv_5 $0))))))",
        "(lam (lam (*. $0 (*. $1 (-. 0 $0)))))",
        "(lam (lam (*. $0 (*. (-. 0 $0) $1))))",
        "(lam (lam (*. $0 (-. 0 (*. $0 $1)))))",
        "(lam (lam (*. $0 (-. 0 (*. $1 $0)))))",
        "(lam (lam (*. $1 (*. $0 (-. 0 $0)))))",
        "(lam (lam (*. $0 $1)))",
        "(fn_8 *.)",
        "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
        "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. $0 (*. $1 1))))",
        "(lam (lam (*. $0 $1)))",
        "(fn_8 *.)",
        "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
        "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. $0 (*. $1 1))))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (*. 1 (prev_dc_inv_0 $0)))",
        "(fn_8 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_1 $1))))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_2 1 $0)))",
        "(lam (*. (prev_dc_inv_4 $0) 1))",
        "(lam (*. 1 (prev_dc_inv_4 $0)))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_2 1 $0)))",
        "(lam (*. (prev_dc_inv_4 $0) 1))",
        "(lam (*. 1 (prev_dc_inv_4 $0)))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) $0))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (zip $0 $0 (lam (lam (prev_dc_inv_0 $0)))))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (zip $0 $0 (lam (lam (prev_dc_inv_0 $1)))))))",
        "(lam (/. 1 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) $0))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_4 (map (lam (prev_dc_inv_0 $0)) (map (lam $0) $0)))))",
        "(fn_12 pi)",
        "(lam (*. $0 (*. pi $0)))",
        "(lam (*. (*. $0 $0) pi))",
        "(lam (*. (*. $0 pi) $0))",
        "(lam (*. (*. pi $0) $0))",
        "(lam (lam (prev_dc_inv_5 (cons $0 (cons $1 empty)))))",
        "(lam (lam (prev_dc_inv_5 (cons $1 (cons $0 empty)))))",
        "(lam (lam (+. (*. $0 $0) (*. $1 $1))))",
        "(lam (lam (+. (*. $1 $1) (*. $0 $0))))",
        "(lam (lam (prev_dc_inv_5 (cons $0 (cons $1 (prev_dc_inv_2 $0 empty))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1))))))",
        "(lambda (lambda (zip $0 $1 (fn_8 +.))))",
        "(lambda (lambda (zip $1 $0 (lambda (lambda (+. $0 $1))))))",
        "(lambda (lambda (zip $1 $0 (fn_8 +.))))",
        "(lambda (lambda (map (lambda $0) (zip $0 $1 (lambda (lambda (+. $0 $1)))))))",
        "(lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)))",
        "(lambda (fn_9 (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0)))",
        "(lambda (power (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (/. 1. $0)) 1))))",
        "(lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (map (lambda $0) $0))))",
        "(lambda (power (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0) (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (/. 1. $0)) 1))))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (#(lambda (lambda (/. (+. $0 $0) $1))) (-. (*. $0 $0) (#(lambda (/. $0 (+. 1. 1.))) 1)) $0)) pi))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 empty))))))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 empty))))))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $0 empty)))))))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $1 empty)))))))",
        "(lambda (lambda (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 (#(lambda (map (lambda (*. $0 $1)))) $0 empty)))))))",
        "(lambda (lambda (*. $1 (/. $1 $0))))",
        "(lambda (lambda (*. (/. $1 $0) $1)))",
        "(lambda (lambda (/. (*. $1 $1) $0)))",
        "(lambda (lambda (/. $1 (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0) $1)))",
        "(lambda (#(lambda (lambda (*. $0 (*. $0 $1)))) $0))",
        "(lambda (lambda (*. $0 (*. $1 $0))))",
        "(lambda (lambda (*. $1 (*. $0 $0))))",
        "(lambda (lambda (*. (*. $0 $0) $1)))",
        "(lambda (lambda (*. (*. $0 $1) $0)))",
        "(lambda (lambda (/. (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1))))",
        "(lambda (lambda (/. (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 $0) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $0))))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (lambda (*. $0 (*. $1 $1))))",
        "(lambda (lambda (*. $1 (*. $0 $1))))",
        "(lambda (lambda (*. $1 (*. $1 $0))))",
        "(lambda (lambda (*. (*. $0 $1) $1)))",
        "(lambda (lambda (*. (*. $1 $0) $1)))",
        "(lambda (lambda (*. $1 (/. $1 $0))))",
        "(lambda (lambda (*. (/. $1 $0) $1)))",
        "(lambda (lambda (/. (*. $1 $1) $0)))",
        "(lambda (lambda (/. $1 (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0) $1)))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (-. pi (#(lambda (/. 1. $0)) pi)) $0))",
        "(lambda (/. $0 (#(lambda (/. $0 (+. 1. 1.))) (-. pi (#(lambda (/. 1. $0)) pi)))))",
        "(lambda (/. $0 (fn_9 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 $0))))",
        "(lambda (*. $0 (fn_9 (#(lambda (/. $0 (+. 1. 1.))) 1))))",
        "(lambda (*. (fn_9 (#(lambda (/. $0 (+. 1. 1.))) 1)) $0))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))",
        "(lambda (#(lambda (lambda (*. $0 (*. $0 $1)))) (#(lambda (/. $0 (+. 1. 1.))) $0)))",
        "(lambda (lambda (*. $0 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $0)))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) $0) $1)))",
        "(lambda (lambda (/. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (/. $1 $0)))))",
        "(lambda (lambda (*. $1 (/. (#(lambda (/. $0 (+. 1. 1.))) $1) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) (/. $1 $0)) $1)))",
        "(lambda (lambda (*. (/. (#(lambda (/. $0 (+. 1. 1.))) $1) $0) $1)))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(lambda (#(lambda (/. $0 (+. 1. 1.))) $0))",
        "(lambda (-. $0 (#(lambda (/. $0 (+. 1. 1.))) $0)))",
        "(lambda (/. $0 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 $0)))",
        "(lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) 1)))",
        "(lambda (*. (#(lambda (/. $0 (+. 1. 1.))) 1) $0))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1)))",
        "(fn_8 #(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1)))",
        "(fn_8 #(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $0 $3) (*. $1 $2))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $0 $3) (*. $2 $1))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $3 $0) (*. $1 $2))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (-. (*. $3 $0) (*. $2 $1))))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. (-. (*. $0 $3) (*. $1 $2)) $4))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $0 $3) (*. $1 $2))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $0 $3) (*. $2 $1))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $3 $0) (*. $1 $2))))))",
        "(lambda (lambda (lambda (lambda (-. (*. $3 $0) (*. $2 $1))))))",
        "(lambda (lambda (lambda (lambda (-. (/. $0 (#(lambda (/. 1. $0)) $3)) (*. $1 $2))))))",
        "(lambda (lambda (lambda (+. $2 (*. $0 $1)))))",
        "(lambda (lambda (lambda (+. $2 (*. $1 $0)))))",
        "(lambda (lambda (lambda (+. (*. $0 $1) $2))))",
        "(lambda (lambda (lambda (+. (*. $1 $0) $2))))",
        "(lambda (lambda (lambda (+. $2 (/. $0 (#(lambda (/. 1. $0)) $1))))))",
        "fn_10",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))) $0))))))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. $1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)))))",
        "(lambda (lambda (#(lambda (/. $0 (+. 1. 1.))) (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0) $1))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))",
        "(lambda (lambda (*. (#(lambda (/. $0 (+. 1. 1.))) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)) $1)))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))",
        "(lambda (#(lambda (lambda (*. $0 (*. $0 $1)))) (#(lambda (/. $0 (+. 1. 1.))) $0)))",
        "(lambda (lambda (*. $0 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))",
        "(lambda (lambda (*. $1 (#(lambda (/. $0 (+. 1. 1.))) (*. $0 $0)))))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(fn_8 #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "fn_10",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (#(lambda (/. $0 (+. 1. 1.))) (*. $1 $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. $0 (+. $2 (*. $1 (#(lambda (/. $0 (+. 1. 1.))) $0)))))))))",
        "(lambda (lambda (lambda (lambda (+. $3 (*. (+. $2 (*. $0 (#(lambda (/. $0 (+. 1. 1.))) $1))) $0))))))",
        "(lambda (lambda (lambda (+. $2 (*. $0 $1)))))",
        "(lambda (lambda (lambda (+. $2 (*. $1 $0)))))",
        "(lambda (lambda (lambda (+. (*. $0 $1) $2))))",
        "(lambda (lambda (lambda (+. (*. $1 $0) $2))))",
        "(lambda (lambda (lambda (+. $2 (/. $0 (#(lambda (/. 1. $0)) $1))))))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 pi))",
        "(lambda (/. pi (#(lambda (/. $0 (+. 1. 1.))) $0)))",
        "(lambda (*. (#(lambda (/. 1. $0)) (#(lambda (/. $0 (+. 1. 1.))) $0)) pi))",
        "(lambda (*. pi (#(lambda (/. 1. $0)) (#(lambda (/. $0 (+. 1. 1.))) $0))))",
        "(lambda (*. 1 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 pi)))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (/. $0 $1)) pi)))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $0 $1)) pi))))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $1 $0)) pi))))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $0 $1)) pi) $1)))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $1 $0)) pi) $1)))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (/. $0 $1)) pi)))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $0 $1)) pi))))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $1 $0)) pi))))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $0 $1)) pi) $1)))",
        "(lambda (lambda (*. (#(lambda (lambda (/. (+. $0 $0) $1))) (fn_9 (*. $1 $0)) pi) $1)))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 (/. $2 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 (/. $1 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $1 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $2 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $2 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $1 $0) $0))))",
        "fn_11",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 (/. $2 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 (/. $1 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $1 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $2 $0) $0))))",
        "(lambda (lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) (/. $2 (fn_9 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))) $1 $0) $0))))",
        "fn_11",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0))))",
        "(lambda (fn_8 (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $0)))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 $1 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (*. (/. $1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0)) $2))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 $0))))",
        "(lambda (fn_8 (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $0)))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $1 $2 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $2 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))) $2 $1 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (*. $1 (/. $2 (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) $0))))))",
        "(lambda (lambda (*. $0 (*. $1 (-. 0 $0)))))",
        "(lambda (lambda (*. $0 (*. (-. 0 $0) $1))))",
        "(lambda (lambda (*. $0 (-. 0 (*. $0 $1)))))",
        "(lambda (lambda (*. $0 (-. 0 (*. $1 $0)))))",
        "(lambda (lambda (*. $1 (*. $0 (-. 0 $0)))))",
        "(lambda (lambda (*. $0 $1)))",
        "(fn_8 *.)",
        "(lambda (lambda (/. $0 (#(lambda (/. 1. $0)) $1))))",
        "(lambda (lambda (/. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. $0 (*. $1 1))))",
        "(lambda (lambda (*. $0 $1)))",
        "(fn_8 *.)",
        "(lambda (lambda (/. $0 (#(lambda (/. 1. $0)) $1))))",
        "(lambda (lambda (/. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. $0 (*. $1 1))))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (*. 1 (#(lambda (/. 1. $0)) $0)))",
        "(fn_8 /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (/. $0 (+. 1. 1.))) $1))))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (#(lambda (map (lambda (*. $0 $1)))) 1 $0)))",
        "(lambda (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0) 1))",
        "(lambda (*. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (#(lambda (map (lambda (*. $0 $1)))) 1 $0)))",
        "(lambda (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0) 1))",
        "(lambda (*. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0)))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) $0))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $0 (lambda (lambda (#(lambda (/. 1. $0)) $0)))))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $0 (lambda (lambda (#(lambda (/. 1. $0)) $1)))))))",
        "(lambda (/. 1 (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) $0))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) (map (lambda $0) $0)))))",
        "(#(lambda (lambda (*. $0 (*. $0 $1)))) pi)",
        "(lambda (*. $0 (*. pi $0)))",
        "(lambda (*. (*. $0 $0) pi))",
        "(lambda (*. (*. $0 pi) $0))",
        "(lambda (*. (*. pi $0) $0))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 empty)))))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $1 (cons $0 empty)))))",
        "(lambda (lambda (+. (*. $0 $0) (*. $1 $1))))",
        "(lambda (lambda (+. (*. $1 $1) (*. $0 $0))))",
        "(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1)))))) (cons $0 (cons $1 (#(lambda (map (lambda (*. $0 $1)))) $0 empty))))))"
      ],
      "utility": 811,
      "expected_cost": 18390,
      "final_cost": 18390,
      "multiplier": 1.0661228928765634,
      "multiplier_wrt_orig": 1.430995106035889,
      "num_uses": 4,
      "uses": [
        {
          "fn_12 $0": "(lam (*. $0 (*. $0 $1)))"
        },
        {
          "fn_12 (prev_dc_inv_1 $0)": "(lam (*. $0 (*. $0 (prev_dc_inv_1 $1))))"
        },
        {
          "fn_12 pi": "(lam (*. $0 (*. $0 pi)))"
        }
      ]
    }
  ]
}