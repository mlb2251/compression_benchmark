{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.411049,
        "productions": [
            {
                "expression": "is-prime",
                "logProbability": -0.084561
            },
            {
                "expression": "gt?",
                "logProbability": -0.117381
            },
            {
                "expression": "eq?",
                "logProbability": -0.14116
            },
            {
                "expression": "empty?",
                "logProbability": -0.148481
            },
            {
                "expression": "is-square",
                "logProbability": -0.149113
            },
            {
                "expression": "1",
                "logProbability": -0.365583
            },
            {
                "expression": "length",
                "logProbability": -0.421505
            },
            {
                "expression": "0",
                "logProbability": -0.422052
            },
            {
                "expression": "+",
                "logProbability": -0.442057
            },
            {
                "expression": "-",
                "logProbability": -0.493107
            },
            {
                "expression": "*",
                "logProbability": -0.498776
            },
            {
                "expression": "mod",
                "logProbability": -0.498776
            },
            {
                "expression": "cdr",
                "logProbability": -0.639118
            },
            {
                "expression": "cons",
                "logProbability": -0.709249
            },
            {
                "expression": "range",
                "logProbability": -0.768396
            },
            {
                "expression": "map",
                "logProbability": -0.769396
            },
            {
                "expression": "empty",
                "logProbability": -0.769594
            },
            {
                "expression": "unfold",
                "logProbability": -0.834869
            },
            {
                "expression": "fold",
                "logProbability": -1.011908
            },
            {
                "expression": "car",
                "logProbability": -1.030243
            },
            {
                "expression": "if",
                "logProbability": -1.104365
            },
            {
                "expression": "index",
                "logProbability": -1.116942
            },
            {
                "expression": "#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0))))))",
                "logProbability": -0.75492
            }
        ]
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "append-index-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 (cons (index 1 (cdr $0)) empty) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (cons (car (cdr (cdr $0))) empty) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-geq-k with k=0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (gt? (+ $0 1) 0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (gt? (+ 1 $0) 0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (is-prime (- $0 (if (is-square $0) 1 (+ $0 1))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=3 and n=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=5 and n=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index $0 (cons (+ 1 1) (range (+ $0 1))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "has-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "head",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (car $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (index 0 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "index-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (car $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (index 0 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "last",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (index (length (cdr $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (index (- (length $0) 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "prepend-index-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cons (index 1 (cdr (cdr $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (car (cdr (cdr (cdr $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=4 and n=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (index $0 (cdr (cdr (cdr $1))))) (range (+ 1 (+ 1 1)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (cons (car $0) (cons (car (cdr $0)) empty)))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=5 and n=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold (cdr (cdr (cdr (cdr $0)))) $0 (lambda (lambda (cons $1 (cons (car $0) empty))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold (cdr (cdr (cdr (cdr $0)))) (cons 1 empty) (lambda (lambda (cons $1 (cons (car $0) empty))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "tail",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cdr $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cdr (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "remove gt 0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (map (lambda 0) (fold (range $1) $0 (lambda (lambda (cdr $2)))))))))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 1,
        "num_learned": 1,
        "new_grammar": {
            "logVariable": -0.449791,
            "productions": [
                {
                    "expression": "is-prime",
                    "logProbability": -0.108992
                },
                {
                    "expression": "is-square",
                    "logProbability": -0.171526
                },
                {
                    "expression": "gt?",
                    "logProbability": -0.173197
                },
                {
                    "expression": "eq?",
                    "logProbability": -0.196748
                },
                {
                    "expression": "empty?",
                    "logProbability": -0.204969
                },
                {
                    "expression": "1",
                    "logProbability": -0.553655
                },
                {
                    "expression": "+",
                    "logProbability": -0.686118
                },
                {
                    "expression": "length",
                    "logProbability": -0.697785
                },
                {
                    "expression": "0",
                    "logProbability": -0.722553
                },
                {
                    "expression": "-",
                    "logProbability": -0.765229
                },
                {
                    "expression": "*",
                    "logProbability": -0.806129
                },
                {
                    "expression": "mod",
                    "logProbability": -0.806129
                },
                {
                    "expression": "cons",
                    "logProbability": -0.858425
                },
                {
                    "expression": "cdr",
                    "logProbability": -0.859235
                },
                {
                    "expression": "map",
                    "logProbability": -0.890747
                },
                {
                    "expression": "range",
                    "logProbability": -0.911083
                },
                {
                    "expression": "empty",
                    "logProbability": -0.952678
                },
                {
                    "expression": "unfold",
                    "logProbability": -1.018095
                },
                {
                    "expression": "car",
                    "logProbability": -1.286777
                },
                {
                    "expression": "fold",
                    "logProbability": -1.319385
                },
                {
                    "expression": "index",
                    "logProbability": -1.353427
                },
                {
                    "expression": "if",
                    "logProbability": -1.380132
                },
                {
                    "expression": "#(lambda (cdr (cdr (cdr $0))))",
                    "logProbability": -0.923133
                },
                {
                    "expression": "#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0))))))",
                    "logProbability": -0.928157
                }
            ]
        }
    }
}