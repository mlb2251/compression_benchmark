{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.676269,
        "productions": [
            {
                "expression": "is-prime",
                "logProbability": -0.50534
            },
            {
                "expression": "is-square",
                "logProbability": -0.523759
            },
            {
                "expression": "gt?",
                "logProbability": -0.571268
            },
            {
                "expression": "eq?",
                "logProbability": -0.599367
            },
            {
                "expression": "empty?",
                "logProbability": -0.60337
            },
            {
                "expression": "1",
                "logProbability": -1.056398
            },
            {
                "expression": "+",
                "logProbability": -1.464987
            },
            {
                "expression": "0",
                "logProbability": -1.528397
            },
            {
                "expression": "length",
                "logProbability": -1.595942
            },
            {
                "expression": "cdr",
                "logProbability": -1.701824
            },
            {
                "expression": "*",
                "logProbability": -1.756489
            },
            {
                "expression": "-",
                "logProbability": -1.788112
            },
            {
                "expression": "mod",
                "logProbability": -1.791072
            },
            {
                "expression": "map",
                "logProbability": -1.846991
            },
            {
                "expression": "cons",
                "logProbability": -1.987639
            },
            {
                "expression": "empty",
                "logProbability": -2.159496
            },
            {
                "expression": "range",
                "logProbability": -2.198064
            },
            {
                "expression": "unfold",
                "logProbability": -2.322642
            },
            {
                "expression": "fold",
                "logProbability": -2.436631
            },
            {
                "expression": "car",
                "logProbability": -2.594265
            },
            {
                "expression": "index",
                "logProbability": -2.604127
            },
            {
                "expression": "if",
                "logProbability": -2.686751
            },
            {
                "expression": "#(lambda (gt? $0 0))",
                "logProbability": -0.46946
            },
            {
                "expression": "#(lambda (is-prime (- $0 (if (is-square $0) 1 $0))))",
                "logProbability": -0.486225
            },
            {
                "expression": "#(lambda (lambda (gt? $1 (mod $0 #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))))))",
                "logProbability": -0.571562
            },
            {
                "expression": "#(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))",
                "logProbability": -1.600579
            },
            {
                "expression": "#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1)))))",
                "logProbability": -1.808495
            },
            {
                "expression": "#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1))",
                "logProbability": -2.00601
            },
            {
                "expression": "#(lambda (cdr (cdr (cdr $0))))",
                "logProbability": -2.009461
            },
            {
                "expression": "#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1)))))))",
                "logProbability": -2.033001
            },
            {
                "expression": "#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0))))))",
                "logProbability": -2.087118
            },
            {
                "expression": "#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1))))",
                "logProbability": -2.124585
            },
            {
                "expression": "#(lambda (cons (car $0)))",
                "logProbability": -2.125477
            },
            {
                "expression": "#(lambda (map (lambda (mod $0 (+ 1 $1)))))",
                "logProbability": -2.146252
            },
            {
                "expression": "#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0))))))",
                "logProbability": -2.168492
            },
            {
                "expression": "#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0))))))",
                "logProbability": -2.205239
            },
            {
                "expression": "#(lambda (lambda (lambda (fold $1 $0 (lambda (lambda (map (lambda $5) (fold (range $1) $0 (lambda (lambda (cdr $2)))))))))))",
                "logProbability": -2.258104
            },
            {
                "expression": "#(lambda (lambda (fold (cdr (#(lambda (cdr (cdr (cdr $0)))) $1)) $0 (lambda (lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (map (lambda (car $1)) $0) (cdr $0)))))))",
                "logProbability": -2.258104
            },
            {
                "expression": "#(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (range #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))))))",
                "logProbability": -2.258119
            }
        ]
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "add-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (+ $0 1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (+ 1 $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "add-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (map (lambda (+ #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) $0)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (map (lambda (+ $0 #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "add-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (+ #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (+ $0 #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-index-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (cons 1 $0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (cons 0 $0) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-index-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) $0 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (#(lambda (cons (car $0))) (cdr (cdr $0)) empty) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-index-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (cdr $0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (cdr (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-k with k=0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (range #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))))) 0 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (#(lambda (map (lambda (mod $0 (+ 1 $1))))) 1 (range #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (cons 1 (cons 1 (range 1)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (range #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))))) #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (range #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))))) #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-k with k=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (range #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))))) (+ #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) 1) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (range #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))))) (+ 1 #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-geq-k with k=0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (#(lambda (gt? $0 0)) (+ $0 1))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (#(lambda (gt? $0 0)) (+ 1 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-geq-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (#(lambda (gt? $0 0)) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (gt? (+ $0 $0) $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-geq-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (#(lambda (lambda (gt? $1 (mod $0 #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))))) $0 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (gt? (+ 1 $0) #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-is-mod-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (gt? 1 $0)) (#(lambda (map (lambda (mod $0 (+ 1 $1))))) (+ 1 1) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (eq? $0 0)) (#(lambda (map (lambda (mod $0 (+ 1 $1))))) (+ 1 1) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-is-mod-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (#(lambda (lambda (gt? $1 (mod $0 #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))))) 1 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (eq? (mod $0 #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))) 0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) (+ $0 1))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) (+ 1 $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (eq? #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=1 and n=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 0 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 (+ 1 $1))))) 1 (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=1 and n=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1))))) empty) (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=1 and n=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 (+ 1 $1))))) #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) (map (lambda (+ $0 1)) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 (+ 1 $1))))) #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) (map (lambda (+ 1 $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=3 and n=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=4 and n=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (map (lambda $0) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=5 and n=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 0 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (length empty) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=5 and n=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index $0 (cons (+ $0 (+ 1 1)) (range $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=5 and n=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (map (lambda $0) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "count-head-in-tail",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) (cdr $0) (lambda (eq? $0 (car $1))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) (cdr $0) (lambda (eq? (car $1) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "count-k with k=0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (length (fold $0 $0 (lambda (lambda (if (#(lambda (gt? $0 0)) $1) (cdr $0) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (length (fold $0 (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0) (lambda (lambda (if (#(lambda (gt? $0 0)) $1) (cdr $0) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "count-k with k=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0) (lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (length (fold (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0) empty (lambda (lambda (if (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $1) (cons $2 $0) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "drop-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (cdr (cdr (cdr $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (cdr (cdr (cdr $0)))) (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "drop-k with k=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (cdr (cdr (cdr $0)))) (cdr (cdr $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cdr (#(lambda (cdr (cdr (cdr $0)))) (cdr $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "empty",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (empty? $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (empty? (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "evens",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-square (mod (+ $0 $0) #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-square (mod (+ $0 (+ $0 1)) #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "has-head-in-tail",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (is-square (fold (cdr $0) 1 (lambda (lambda (* $0 (- (car $2) $1)))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (is-square (fold (cdr $0) 1 (lambda (lambda (* (- (car $2) $1) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "has-k with k=0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) (#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1))))) (#(lambda (lambda (lambda (fold $1 $0 (lambda (lambda (map (lambda $5) (fold (range $1) $0 (lambda (lambda (cdr $2))))))))))) #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) $0 $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (gt? $0 0)) (length (#(lambda (lambda (lambda (fold $1 $0 (lambda (lambda (map (lambda $5) (fold (range $1) $0 (lambda (lambda (cdr $2))))))))))) 1 $0 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "has-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (gt? $0 0)) (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (is-prime (#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1))))) (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "has-k with k=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) (index (length $0) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (cons 1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) (index (length $0) (cons 1 (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "head",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (car $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (index 0 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "index-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (car $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (index 0 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "index-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (index 1 (cdr $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (car (cdr (cdr $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "index-k with k=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (index 1 (#(lambda (cdr (cdr (cdr $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (car (#(lambda (cdr (cdr (cdr $0)))) (cdr $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "is-mod-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (empty? (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (empty? (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ $0 #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "is-mod-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (gt? (#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1))))) $0) (* #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) (length $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (gt? (#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1))))) $0) (* (length $0) #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "is-primes",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (eq? (length $0) (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (eq? (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime $0)))) (length $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "kth-largest with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1))))) (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "last",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (index (length (cdr $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (index (- (length $0) 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "len",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (length $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (length (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "modulo-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda 0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 (+ 1 $1))))) 0 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "modulo-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 (+ 1 $1))))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 (+ 1 $1))))) (#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1))))) empty) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "modulo-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 (+ 1 $1))))) (+ 1 1) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (mod $0 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "modulo-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (mod $0 #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 (+ 1 $1))))) (- #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "modulo-k with k=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 (+ 1 $1))))) #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 (+ 1 $1))))) (+ (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))) 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "mult-k with k=0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda 0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 (+ 1 $1))))) 0 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "mult-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (+ $0 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda $0) (map (lambda (+ $0 $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "mult-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (+ $0 (+ $0 $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda $0) (map (lambda (+ $0 (+ $0 $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "mult-k with k=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (+ $0 (* #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (+ $0 (* $0 #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "odds",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (#(lambda (gt? $0 0)) (mod $0 (+ 1 1))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (#(lambda (gt? $0 0)) (mod (+ $0 $0) #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "pop",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda (- (length $1) ($0 1))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda (- (length (cdr $1)) 1)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "prepend-index-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (cons (car $0))) $0 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (index 0 $0) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "prepend-index-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (cons (car $0))) (cdr $0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (index 1 $0) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "prepend-index-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (cons (car $0))) (#(lambda (cdr (cdr (cdr $0)))) $0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (index 0 (#(lambda (cdr (cdr (cdr $0)))) $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "prepend-k with k=0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cons 0 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (length empty) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "product",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 1 (lambda (lambda (* $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "remove-index-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (cons (car $0))) $0 (cdr (cdr $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (cons (car $0))) $0 (#(lambda (cdr (cdr (cdr $0)))) (cons 1 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "remove-index-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (cons (car $0))) $0 (cons (index 1 $0) (cons (index 1 (cdr $0)) (cdr (#(lambda (cdr (cdr (cdr $0)))) $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (cons (car $0))) $0 (cons (index 1 $0) (cons (index 1 (cdr (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0))) (cdr (#(lambda (cdr (cdr (cdr $0)))) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "remove-mod-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (#(lambda (gt? $0 0)) (mod $0 (+ 1 1))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (#(lambda (gt? $0 0)) (mod (+ $0 $0) #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "repeat-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (map (lambda $0) $0) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "repeat-many",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold (range (car $0)) empty (lambda (lambda (fold (cdr $2) $0 (lambda (lambda (cons $1 $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold (range (index 0 $0)) empty (lambda (lambda (fold (cdr $2) $0 (lambda (lambda (cons $1 $0))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "replace-all-with-index-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (car $1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index 0 $1)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "replace-all-with-index-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (car (#(lambda (cdr (cdr (cdr $0)))) $1))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1))))) (#(lambda (cdr (cdr (cdr $0)))) (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $1)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "reverse",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0) empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "rotate-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold (cdr (#(lambda (cdr (cdr (cdr $0)))) $1)) $0 (lambda (lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (map (lambda (car $1)) $0) (cdr $0))))))) $0 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold (cdr (#(lambda (cdr (cdr (cdr $0)))) $0)) $0 (lambda (lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (map (lambda (car $1)) $2) (cdr $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "rotate-k with k=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold (cdr (#(lambda (cdr (cdr (cdr $0)))) $1)) $0 (lambda (lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (map (lambda (car $1)) $0) (cdr $0))))))) (cdr $0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold (cdr (cdr (#(lambda (cdr (cdr (cdr $0)))) $0))) $0 (lambda (lambda (#(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (range #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))))) (car $0) (cdr $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=1 and n=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (cons (car $0))) $0 empty))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=1 and n=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 ($0 0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=2 and n=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 1) (cdr $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cdr (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 1)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=2 and n=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cdr (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cdr (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=2 and n=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))) (cdr $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cdr (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=3 and n=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cdr (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (cdr $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cdr (cdr (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=3 and n=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (cdr (cdr $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (#(lambda (cdr (cdr (cdr $0)))) (cons 1 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=3 and n=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))) (cdr (cdr $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cdr (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))) (cdr $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=4 and n=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 0) (#(lambda (cdr (cdr (cdr $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (cdr $0) empty))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=4 and n=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 1)) (#(lambda (cdr (cdr (cdr $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (cdr (cdr (cdr $0)))) (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=4 and n=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 ($0 1)))) (#(lambda (cdr (cdr (cdr $0)))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda (length (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $1))) (#(lambda (cdr (cdr (cdr $0)))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=5 and n=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold (cdr (#(lambda (cdr (cdr (cdr $0)))) $0)) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0))) $0 empty))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold (cdr (#(lambda (cdr (cdr (cdr $0)))) $0)) (cons 1 empty) (lambda (lambda (cons $1 (#(lambda (cons (car $0))) $0 empty))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=5 and n=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (#(lambda (cdr (cdr (cdr $0)))) (cdr $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (cdr (#(lambda (cdr (cdr (cdr $0)))) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "tail",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cdr $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cdr (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "take-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (cons (car $0))) $0 empty))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "take-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 1) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "take-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "take-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "+1 maximum list",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (+ (#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1))))) $0) 1))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (+ 1 (#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1))))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "range +1 maximum list",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (range (+ (#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1))))) $0) 1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (range (+ 1 (#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1))))) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "keep squares",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-square $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) (map (lambda $0) $0) (lambda (is-square $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "keep primes",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) (map (lambda $0) $0) (lambda (is-prime $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "remove eq 0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 empty (lambda (lambda (fold (range $1) $0 (lambda (lambda (cons $3 $2))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "remove gt 0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (fold $1 $0 (lambda (lambda (map (lambda $5) (fold (range $1) $0 (lambda (lambda (cdr $2))))))))))) 0 $0 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "keep eq 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? $0 1))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? 1 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "keep gt 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? $0 1))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (#(lambda (gt? $0 0)) (- $0 1)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "remove gt 2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) (+ $0 1)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)))) (+ 1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 15,
        "num_learned": 1,
        "new_grammar": {
            "logVariable": -0.675971,
            "productions": [
                {
                    "expression": "gt?",
                    "logProbability": -0.554184
                },
                {
                    "expression": "eq?",
                    "logProbability": -0.572399
                },
                {
                    "expression": "is-prime",
                    "logProbability": -0.579583
                },
                {
                    "expression": "is-square",
                    "logProbability": -0.583471
                },
                {
                    "expression": "empty?",
                    "logProbability": -0.608576
                },
                {
                    "expression": "1",
                    "logProbability": -1.131299
                },
                {
                    "expression": "+",
                    "logProbability": -1.462391
                },
                {
                    "expression": "length",
                    "logProbability": -1.575142
                },
                {
                    "expression": "0",
                    "logProbability": -1.605934
                },
                {
                    "expression": "cdr",
                    "logProbability": -1.740076
                },
                {
                    "expression": "*",
                    "logProbability": -1.798063
                },
                {
                    "expression": "-",
                    "logProbability": -1.812947
                },
                {
                    "expression": "mod",
                    "logProbability": -1.853015
                },
                {
                    "expression": "map",
                    "logProbability": -1.918325
                },
                {
                    "expression": "cons",
                    "logProbability": -2.051043
                },
                {
                    "expression": "empty",
                    "logProbability": -2.219171
                },
                {
                    "expression": "range",
                    "logProbability": -2.230346
                },
                {
                    "expression": "unfold",
                    "logProbability": -2.38469
                },
                {
                    "expression": "fold",
                    "logProbability": -2.556132
                },
                {
                    "expression": "car",
                    "logProbability": -2.652783
                },
                {
                    "expression": "index",
                    "logProbability": -2.662567
                },
                {
                    "expression": "if",
                    "logProbability": -2.836522
                },
                {
                    "expression": "#(lambda (gt? $0 0))",
                    "logProbability": -0.539336
                },
                {
                    "expression": "#(lambda (is-prime (- $0 (if (is-square $0) 1 $0))))",
                    "logProbability": -0.547337
                },
                {
                    "expression": "#(lambda (lambda (gt? $1 (mod $0 #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))))))",
                    "logProbability": -0.610915
                },
                {
                    "expression": "#(lambda (#(lambda (gt? $0 0)) (mod $0 (+ 1 1))))",
                    "logProbability": -0.615074
                },
                {
                    "expression": "#(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))",
                    "logProbability": -1.478942
                },
                {
                    "expression": "#(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1)))))",
                    "logProbability": -1.759954
                },
                {
                    "expression": "#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0))))))",
                    "logProbability": -2.032044
                },
                {
                    "expression": "#(lambda (cdr (cdr (cdr $0))))",
                    "logProbability": -2.074463
                },
                {
                    "expression": "#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1)))))))",
                    "logProbability": -2.097015
                },
                {
                    "expression": "#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1))",
                    "logProbability": -2.109884
                },
                {
                    "expression": "#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0))))))",
                    "logProbability": -2.153755
                },
                {
                    "expression": "#(lambda (map (lambda (mod $0 (+ 1 $1)))))",
                    "logProbability": -2.158721
                },
                {
                    "expression": "#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1))))",
                    "logProbability": -2.181491
                },
                {
                    "expression": "#(lambda (cons (car $0)))",
                    "logProbability": -2.185902
                },
                {
                    "expression": "#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0))))))",
                    "logProbability": -2.268228
                },
                {
                    "expression": "#(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (map (lambda $1) (range #(+ 1 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))))))",
                    "logProbability": -2.287986
                },
                {
                    "expression": "#(lambda (lambda (lambda (fold $1 $0 (lambda (lambda (map (lambda $5) (fold (range $1) $0 (lambda (lambda (cdr $2)))))))))))",
                    "logProbability": -2.31645
                },
                {
                    "expression": "#(lambda (lambda (fold (cdr (#(lambda (cdr (cdr (cdr $0)))) $1)) $0 (lambda (lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (map (lambda (car $1)) $0) (cdr $0)))))))",
                    "logProbability": -2.320152
                }
            ]
        }
    }
}