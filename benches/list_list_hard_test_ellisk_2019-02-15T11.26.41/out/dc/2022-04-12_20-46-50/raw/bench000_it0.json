{
  "DSL": {
    "logVariable": -0.3755353286731644,
    "productions": [
      {
        "expression": "#(lambda (cons (car $0) empty))",
        "logProbability": -0.7540155342530079
      },
      {
        "expression":
          "#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0))))))",
        "logProbability": -0.7390415106354471
      },
      { "expression": "is-prime", "logProbability": -0.08635048425493475 },
      { "expression": "gt?", "logProbability": -0.1247389428798149 },
      { "expression": "eq?", "logProbability": -0.13668106551973835 },
      { "expression": "empty?", "logProbability": -0.13856257525194504 },
      { "expression": "is-square", "logProbability": -0.1541506798272585 },
      { "expression": "1", "logProbability": -0.3335094481139458 },
      { "expression": "length", "logProbability": -0.3512122554674053 },
      { "expression": "0", "logProbability": -0.35306834602061965 },
      { "expression": "+", "logProbability": -0.3959808999847261 },
      { "expression": "-", "logProbability": -0.41654933107071157 },
      { "expression": "*", "logProbability": -0.432137435646025 },
      { "expression": "mod", "logProbability": -0.432137435646025 },
      { "expression": "cdr", "logProbability": -0.608811876319761 },
      { "expression": "cons", "logProbability": -0.7535176895450997 },
      { "expression": "range", "logProbability": -0.7390415106174033 },
      { "expression": "map", "logProbability": -0.7538553494835276 },
      { "expression": "empty", "logProbability": -0.8180337040824499 },
      { "expression": "unfold", "logProbability": -0.8183938706301208 },
      { "expression": "fold", "logProbability": -0.9647680879203504 },
      { "expression": "car", "logProbability": -1.0283949735891422 },
      { "expression": "if", "logProbability": -1.0571414080513657 },
      { "expression": "index", "logProbability": -1.0865684290298052 }
    ]
  },
  "frontiers": [
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "int", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "int", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (fold $0 (cons (index 1 (cdr $0)) empty) (lambda (lambda (cons $1 $0)))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (fold $0 (#(lambda (cons (car $0) empty)) (cdr (cdr $0))) (lambda (lambda (cons $1 $0)))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "int", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "bool", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program": "(lambda (map (lambda (empty? (range (- 0 $0)))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (map (lambda (eq? $0 (length (range $0)))) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "int", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "int", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "int", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "int", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (map (lambda (index $0 (cons (+ $0 (+ 1 1)) (range $0)))) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "int", "arguments": [] } ]
          },
          { "constructor": "bool", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "int", "arguments": [] } ]
          },
          { "constructor": "int", "arguments": [] }
        ]
      },
      "programs": [
        { "program": "(lambda (car $0))", "logLikelihood": 0.0 },
        { "program": "(lambda (index 0 $0))", "logLikelihood": 0.0 }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "int", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "int", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (fold (cdr (cdr (cdr (cdr $0)))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) empty)) $0))))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (fold (cdr (cdr (cdr (cdr $0)))) (cons 0 empty) (lambda (lambda (cons $1 (#(lambda (cons (car $0) empty)) $0))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "int", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "int", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (fold $0 $0 (lambda (lambda (map (lambda 0) (fold (range $1) $0 (lambda (lambda (cdr $2)))))))))",
          "logLikelihood": 0.0
        }
      ]
    }
  ]
}