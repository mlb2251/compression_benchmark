{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.26.41/bench001_it1.json --max-arity=3 --threads=1 --iterations=1 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.26.41/out/stitch/2022-10-04_19-36-01/raw/bench001_it1.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.26.41/bench001_it1.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.26.41/out/stitch/2022-10-04_19-36-01/raw/bench001_it1.json",
    "iterations": 1,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 21232,
  "original": [
    "(lam (fold $0 (cons (index 1 (cdr $0)) empty) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (cons (car (cdr (cdr $0))) empty) (lam (lam (cons $1 $0)))))",
    "(lam (map (lam (gt? (+ $0 1) 0)) $0))",
    "(lam (map (lam (gt? (+ 1 $0) 0)) $0))",
    "(lam (map (lam (is-prime (- $0 (if (is-square $0) 1 $0)))) $0))",
    "(lam (map (lam (is-prime (- $0 (if (is-square $0) 1 (+ $0 1))))) $0))",
    "(lam (prev_dc_inv_0 (+ 1 1) $0))",
    "(lam (prev_dc_inv_0 1 $0))",
    "(lam (map (lam (index $0 (cons (+ 1 1) (range (+ $0 1))))) $0))",
    "(lam (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
    "(lam (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
    "(lam (car $0))",
    "(lam (index 0 $0))",
    "(lam (car $0))",
    "(lam (index 0 $0))",
    "(lam (index (length (cdr $0)) $0))",
    "(lam (index (- (length $0) 1) $0))",
    "(lam (cons (index 1 (cdr (cdr $0))) $0))",
    "(lam (cons (car (cdr (cdr (cdr $0)))) $0))",
    "(lam (map (lam (index $0 (cdr (cdr (cdr $1))))) (range (+ 1 (+ 1 1)))))",
    "(lam (fold (cdr (cdr (cdr $0))) $0 (lam (lam (cons $1 (cons (car $0) (cons (car (cdr $0)) empty)))))))",
    "(lam (fold (cdr (cdr (cdr (cdr $0)))) $0 (lam (lam (cons $1 (cons (car $0) empty))))))",
    "(lam (fold (cdr (cdr (cdr (cdr $0)))) (cons 1 empty) (lam (lam (cons $1 (cons (car $0) empty))))))",
    "(lam (cdr $0))",
    "(lam (cdr (map (lam $0) $0)))",
    "(lam (fold $0 $0 (lam (lam (map (lam 0) (fold (range $1) $0 (lam (lam (cdr $2)))))))))"
  ],
  "invs": [
    {
      "body": "(cdr (cdr #0))",
      "dreamcoder": "#(lambda (cdr (cdr $0)))",
      "arity": 1,
      "name": "fn_1",
      "rewritten": [
        "(lam (fold $0 (cons (index 1 (cdr $0)) empty) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (cons (car (fn_1 $0)) empty) (lam (lam (cons $1 $0)))))",
        "(lam (map (lam (gt? (+ $0 1) 0)) $0))",
        "(lam (map (lam (gt? (+ 1 $0) 0)) $0))",
        "(lam (map (lam (is-prime (- $0 (if (is-square $0) 1 $0)))) $0))",
        "(lam (map (lam (is-prime (- $0 (if (is-square $0) 1 (+ $0 1))))) $0))",
        "(lam (prev_dc_inv_0 (+ 1 1) $0))",
        "(lam (prev_dc_inv_0 1 $0))",
        "(lam (map (lam (index $0 (cons (+ 1 1) (range (+ $0 1))))) $0))",
        "(lam (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
        "(lam (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (index (length (cdr $0)) $0))",
        "(lam (index (- (length $0) 1) $0))",
        "(lam (cons (index 1 (fn_1 $0)) $0))",
        "(lam (cons (car (cdr (fn_1 $0))) $0))",
        "(lam (map (lam (index $0 (cdr (fn_1 $1)))) (range (+ 1 (+ 1 1)))))",
        "(lam (fold (cdr (fn_1 $0)) $0 (lam (lam (cons $1 (cons (car $0) (cons (car (cdr $0)) empty)))))))",
        "(lam (fold (fn_1 (fn_1 $0)) $0 (lam (lam (cons $1 (cons (car $0) empty))))))",
        "(lam (fold (fn_1 (fn_1 $0)) (cons 1 empty) (lam (lam (cons $1 (cons (car $0) empty))))))",
        "(lam (cdr $0))",
        "(lam (cdr (map (lam $0) $0)))",
        "(lam (fold $0 $0 (lam (lam (map (lam 0) (fold (range $1) $0 (lam (lam (cdr $2)))))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (fold $0 (cons (index 1 (cdr $0)) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (cons (car (#(lambda (cdr (cdr $0))) $0)) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda (gt? (+ $0 1) 0)) $0))",
        "(lambda (map (lambda (gt? (+ 1 $0) 0)) $0))",
        "(lambda (map (lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $0))",
        "(lambda (map (lambda (is-prime (- $0 (if (is-square $0) 1 (+ $0 1))))) $0))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1) $0))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0))",
        "(lambda (map (lambda (index $0 (cons (+ 1 1) (range (+ $0 1))))) $0))",
        "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
        "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (index (length (cdr $0)) $0))",
        "(lambda (index (- (length $0) 1) $0))",
        "(lambda (cons (index 1 (#(lambda (cdr (cdr $0))) $0)) $0))",
        "(lambda (cons (car (cdr (#(lambda (cdr (cdr $0))) $0))) $0))",
        "(lambda (map (lambda (index $0 (cdr (#(lambda (cdr (cdr $0))) $1)))) (range (+ 1 (+ 1 1)))))",
        "(lambda (fold (cdr (#(lambda (cdr (cdr $0))) $0)) $0 (lambda (lambda (cons $1 (cons (car $0) (cons (car (cdr $0)) empty)))))))",
        "(lambda (fold (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0)) $0 (lambda (lambda (cons $1 (cons (car $0) empty))))))",
        "(lambda (fold (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0)) (cons 1 empty) (lambda (lambda (cons $1 (cons (car $0) empty))))))",
        "(lambda (cdr $0))",
        "(lambda (cdr (map (lambda $0) $0)))",
        "(lambda (fold $0 $0 (lambda (lambda (map (lambda 0) (fold (range $1) $0 (lambda (lambda (cdr $2)))))))))"
      ],
      "utility": 303,
      "expected_cost": 9809,
      "final_cost": 9809,
      "multiplier": 1.0514833316342134,
      "multiplier_wrt_orig": 1.0514833316342134,
      "num_uses": 14,
      "uses": [
        {
          "fn_1 $0": "(cdr (cdr $0))"
        },
        {
          "fn_1 $1": "(cdr (cdr $1))"
        },
        {
          "fn_1 (cdr $0)": "(cdr (cdr (cdr $0)))"
        },
        {
          "fn_1 (cdr $1)": "(cdr (cdr (cdr $1)))"
        },
        {
          "fn_1 (cdr (cdr $0))": "(cdr (cdr (cdr (cdr $0))))"
        }
      ]
    }
  ]
}