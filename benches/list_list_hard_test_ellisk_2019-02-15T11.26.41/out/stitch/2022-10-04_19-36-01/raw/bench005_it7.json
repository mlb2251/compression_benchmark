{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.26.41/bench005_it7.json --max-arity=3 --threads=1 --iterations=2 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.26.41/out/stitch/2022-10-04_19-36-01/raw/bench005_it7.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.26.41/bench005_it7.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.26.41/out/stitch/2022-10-04_19-36-01/raw/bench005_it7.json",
    "iterations": 2,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 77567,
  "original": [
    "(lam (map (lam (+ $0 (car (prev_dc_inv_5 (range $0))))) $0))",
    "(lam (map (lam (+ (car (prev_dc_inv_5 (range $0))) $0)) $0))",
    "(lam (prev_dc_inv_6 $0 $0))",
    "(lam (fold $0 (cons (car (cdr (cdr $0))) empty) (lam (lam (cons $1 $0)))))",
    "(lam (prev_dc_inv_6 (cdr $0) $0))",
    "(lam (fold $0 (cons (car (prev_dc_inv_1 $0)) empty) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (range 1) (lam (lam (cons $1 $0)))))",
    "(lam (prev_dc_inv_6 (cons 1 (cons 1 (range 1))) $0))",
    "(lam (fold $0 (prev_dc_inv_5 (range 1)) (lam (lam (cons $1 $0)))))",
    "(lam (prev_dc_inv_6 (prev_dc_inv_5 (cons 1 (cons 1 (range 1)))) $0))",
    "(lam (map (lam (prev_dc_inv_0 (+ $0 1))) $0))",
    "(lam (map (lam (prev_dc_inv_0 (+ 1 $0))) $0))",
    "(lam (map (lam (prev_dc_inv_0 $0)) $0))",
    "(lam (map (lam (gt? $0 (length empty))) $0))",
    "(lam (map (lam (prev_dc_inv_2 $0)) $0))",
    "(lam (cdr (map (lam (prev_dc_inv_2 $0)) (cons 1 $0))))",
    "(lam (prev_dc_inv_3 1 (prev_dc_inv_3 1 $0)))",
    "(lam (prev_dc_inv_3 1 (prev_dc_inv_3 1 (map (lam $0) $0))))",
    "(lam (map (lam (if (prev_dc_inv_2 $0) 0 (+ $0 1))) $0))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_3 1 (prev_dc_inv_3 1 $0)))",
    "(lam (prev_dc_inv_3 1 (prev_dc_inv_3 1 (map (lam $0) $0))))",
    "(lam (prev_dc_inv_3 0 $0))",
    "(lam (prev_dc_inv_3 (length empty) $0))",
    "(lam (prev_dc_inv_3 1 $0))",
    "(lam (map (lam (index $0 (cons (+ $0 (+ 1 1)) (range $0)))) $0))",
    "(lam (prev_dc_inv_5 (prev_dc_inv_5 (prev_dc_inv_5 $0))))",
    "(lam (prev_dc_inv_5 (prev_dc_inv_5 (prev_dc_inv_3 (+ 1 (mod 1 (length $0))) $0))))",
    "(lam (length (fold (prev_dc_inv_5 $0) empty (lam (lam (if (prev_dc_inv_2 $1) (cons $2 $0) $0))))))",
    "(lam (length (fold (prev_dc_inv_5 $0) empty (lam (lam (if (prev_dc_inv_2 $1) (cons (is-prime $1) $0) $0))))))",
    "(lam (prev_dc_inv_1 (cdr (cdr $0))))",
    "(lam (cdr (prev_dc_inv_1 (cdr $0))))",
    "(lam (empty? $0))",
    "(lam (empty? (prev_dc_inv_5 $0)))",
    "(lam (gt? 1 (fold $0 1 (lam (lam (* $0 $1))))))",
    "(lam (gt? 1 (fold $0 1 (lam (lam (* $1 $0))))))",
    "(lam (if (is-prime (length $0)) (is-prime (car $0)) (prev_dc_inv_0 (length $0))))",
    "(lam (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
    "(lam (prev_dc_inv_2 (index (length $0) (prev_dc_inv_5 (cons 1 $0)))))",
    "(lam (prev_dc_inv_2 (index (length $0) (cons 1 (prev_dc_inv_5 $0)))))",
    "(lam (car $0))",
    "(lam (index 0 $0))",
    "(lam (car $0))",
    "(lam (index 0 $0))",
    "(lam (index 1 (prev_dc_inv_1 $0)))",
    "(lam (car (prev_dc_inv_1 (cdr $0))))",
    "(lam (prev_dc_inv_0 (fold (prev_dc_inv_5 $0) 1 (lam (lam (mod $1 (+ $0 1)))))))",
    "(lam (is-square (fold $0 1 (lam (lam (+ $0 (mod $1 (+ $0 $0))))))))",
    "(lam (fold $0 (prev_dc_inv_0 1) (lam (lam (is-prime (if $0 $1 1))))))",
    "(lam (fold $0 (is-square 1) (lam (lam (is-prime (if $0 $1 1))))))",
    "(lam (fold $0 1 (lam (lam (if (gt? $0 $1) $0 $1)))))",
    "(lam (fold $0 1 (lam (lam (if (gt? $1 $0) $1 $0)))))",
    "(lam (index (length (cdr $0)) $0))",
    "(lam (index (- (length $0) 1) $0))",
    "(lam (length $0))",
    "(lam (length (prev_dc_inv_5 $0)))",
    "(lam (map (lam 0) $0))",
    "(lam (prev_dc_inv_5 (map (lam 1) $0)))",
    "(lam (map (lam (mod $0 (+ 1 1))) $0))",
    "(lam (map (lam (mod (* $0 $0) (+ 1 1))) $0))",
    "(lam (map (lam (mod $0 (+ 1 (+ 1 1)))) $0))",
    "(lam (map (lam (mod $0 (car (prev_dc_inv_5 (range 1))))) $0))",
    "(lam (map (lam (mod $0 (+ (car (prev_dc_inv_5 (range 1))) (+ 1 1)))) $0))",
    "(lam (map (lam (mod $0 (+ 1 (+ (car (prev_dc_inv_5 (range 1))) 1)))) $0))",
    "(lam (map (lam (+ $0 $0)) $0))",
    "(lam (map (lam $0) (map (lam (+ $0 $0)) $0)))",
    "(lam (map (lam (+ $0 (+ $0 $0))) $0))",
    "(lam (map (lam $0) (map (lam (+ $0 (+ $0 $0))) $0)))",
    "(lam (cons (index 1 $0) $0))",
    "(lam (cons (car (cdr $0)) $0))",
    "(lam (cons (car (prev_dc_inv_1 $0)) $0))",
    "(lam (cons (index 0 (prev_dc_inv_1 $0)) $0))",
    "(lam (cons 0 $0))",
    "(lam (cons (length empty) $0))",
    "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
    "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
    "(lam (cons (car $0) (cdr (cdr $0))))",
    "(lam (cons (car $0) (prev_dc_inv_1 (cons 1 $0))))",
    "(lam (cons (car $0) (cons (index 1 $0) (cons (index 1 (cdr $0)) (cdr (prev_dc_inv_1 $0))))))",
    "(lam (cons (car $0) (cons (index 1 $0) (cons (index 1 (cdr (prev_dc_inv_7 $0))) (cdr (prev_dc_inv_1 $0))))))",
    "(lam (map (lam (car $1)) $0))",
    "(lam (map (lam (index 0 $1)) $0))",
    "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
    "(lam (fold (prev_dc_inv_3 1 $0) empty (lam (lam (cons (index (length $0) $2) $0)))))",
    "(lam (prev_dc_inv_4 (lam 0) $0))",
    "(lam (prev_dc_inv_4 (lam (length empty)) $0))",
    "(lam (prev_dc_inv_7 $0))",
    "(lam (prev_dc_inv_4 (lam ($0 ($0 ($0 0)))) $0))",
    "(lam (prev_dc_inv_4 (lam 1) (cdr $0)))",
    "(lam (cdr (prev_dc_inv_4 (lam ($0 1)) $0)))",
    "(lam (cdr (prev_dc_inv_7 $0)))",
    "(lam (cdr (prev_dc_inv_7 (prev_dc_inv_7 $0))))",
    "(lam (cdr (prev_dc_inv_7 (cdr $0))))",
    "(lam (prev_dc_inv_4 (lam ($0 1)) (cdr (cdr $0))))",
    "(lam (prev_dc_inv_7 (cdr (cdr $0))))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_1 (cons 1 $0))))",
    "(lam (prev_dc_inv_4 (lam ($0 ($0 ($0 1)))) (cdr (cdr $0))))",
    "(lam (cdr (prev_dc_inv_4 (lam ($0 ($0 ($0 ($0 1))))) (cdr $0))))",
    "(lam (prev_dc_inv_4 (lam 0) (prev_dc_inv_1 $0)))",
    "(lam (prev_dc_inv_6 (cdr $0) empty))",
    "(lam (prev_dc_inv_4 (lam ($0 1)) (prev_dc_inv_1 $0)))",
    "(lam (fold (prev_dc_inv_1 $0) $0 (lam (lam (cons $1 (cons (car $0) (cons (index 1 $0) empty)))))))",
    "(lam (prev_dc_inv_4 (lam (length (prev_dc_inv_7 $1))) (prev_dc_inv_1 $0)))",
    "(lam (prev_dc_inv_4 (lam ($0 ($0 ($0 1)))) (prev_dc_inv_1 $0)))",
    "(lam (fold (cdr (prev_dc_inv_1 $0)) $0 (lam (lam (cons $1 (cons (car $0) empty))))))",
    "(lam (fold (cdr (prev_dc_inv_1 $0)) (cons 1 empty) (lam (lam (cons $1 (cons (car $0) empty))))))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_1 (cdr $0))))",
    "(lam (prev_dc_inv_7 (cdr (prev_dc_inv_1 $0))))",
    "(lam (cdr $0))",
    "(lam (cdr (map (lam $0) $0)))",
    "(lam (prev_dc_inv_4 (lam 0) $0))",
    "(lam (prev_dc_inv_4 (lam (length empty)) $0))",
    "(lam (prev_dc_inv_4 (lam 1) $0))",
    "(lam (prev_dc_inv_4 (lam ($0 0)) $0))",
    "(lam (prev_dc_inv_4 (lam ($0 1)) $0))",
    "(lam (prev_dc_inv_4 (lam ($0 ($0 0))) $0))",
    "(lam (fold $0 empty (lam (lam (if (is-square $1) (cons $1 $0) $0)))))",
    "(lam (fold $0 empty (lam (lam (fold (range $1) $0 (lam (lam (cons $3 $2))))))))",
    "(lam (fold $0 $0 (lam (lam (map (lam 0) (fold (range $1) $0 (lam (lam (cdr $2)))))))))"
  ],
  "invs": [
    {
      "body": "(lam (map #0 $0))",
      "dreamcoder": "#(lambda (lambda (map $1 $0)))",
      "arity": 1,
      "name": "fn_8",
      "rewritten": [
        "(fn_8 (lam (+ $0 (car (prev_dc_inv_5 (range $0))))))",
        "(fn_8 (lam (+ (car (prev_dc_inv_5 (range $0))) $0)))",
        "(lam (prev_dc_inv_6 $0 $0))",
        "(lam (fold $0 (cons (car (cdr (cdr $0))) empty) (lam (lam (cons $1 $0)))))",
        "(lam (prev_dc_inv_6 (cdr $0) $0))",
        "(lam (fold $0 (cons (car (prev_dc_inv_1 $0)) empty) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (range 1) (lam (lam (cons $1 $0)))))",
        "(lam (prev_dc_inv_6 (cons 1 (cons 1 (range 1))) $0))",
        "(lam (fold $0 (prev_dc_inv_5 (range 1)) (lam (lam (cons $1 $0)))))",
        "(lam (prev_dc_inv_6 (prev_dc_inv_5 (cons 1 (cons 1 (range 1)))) $0))",
        "(fn_8 (lam (prev_dc_inv_0 (+ $0 1))))",
        "(fn_8 (lam (prev_dc_inv_0 (+ 1 $0))))",
        "(fn_8 (lam (prev_dc_inv_0 $0)))",
        "(fn_8 (lam (gt? $0 (length empty))))",
        "(fn_8 (lam (prev_dc_inv_2 $0)))",
        "(lam (cdr (map (lam (prev_dc_inv_2 $0)) (cons 1 $0))))",
        "(lam (prev_dc_inv_3 1 (prev_dc_inv_3 1 $0)))",
        "(lam (prev_dc_inv_3 1 (prev_dc_inv_3 1 (map (lam $0) $0))))",
        "(fn_8 (lam (if (prev_dc_inv_2 $0) 0 (+ $0 1))))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_3 1 (prev_dc_inv_3 1 $0)))",
        "(lam (prev_dc_inv_3 1 (prev_dc_inv_3 1 (map (lam $0) $0))))",
        "(lam (prev_dc_inv_3 0 $0))",
        "(lam (prev_dc_inv_3 (length empty) $0))",
        "(lam (prev_dc_inv_3 1 $0))",
        "(fn_8 (lam (index $0 (cons (+ $0 (+ 1 1)) (range $0)))))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_5 (prev_dc_inv_5 $0))))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_5 (prev_dc_inv_3 (+ 1 (mod 1 (length $0))) $0))))",
        "(lam (length (fold (prev_dc_inv_5 $0) empty (lam (lam (if (prev_dc_inv_2 $1) (cons $2 $0) $0))))))",
        "(lam (length (fold (prev_dc_inv_5 $0) empty (lam (lam (if (prev_dc_inv_2 $1) (cons (is-prime $1) $0) $0))))))",
        "(lam (prev_dc_inv_1 (cdr (cdr $0))))",
        "(lam (cdr (prev_dc_inv_1 (cdr $0))))",
        "(lam (empty? $0))",
        "(lam (empty? (prev_dc_inv_5 $0)))",
        "(lam (gt? 1 (fold $0 1 (lam (lam (* $0 $1))))))",
        "(lam (gt? 1 (fold $0 1 (lam (lam (* $1 $0))))))",
        "(lam (if (is-prime (length $0)) (is-prime (car $0)) (prev_dc_inv_0 (length $0))))",
        "(lam (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
        "(lam (prev_dc_inv_2 (index (length $0) (prev_dc_inv_5 (cons 1 $0)))))",
        "(lam (prev_dc_inv_2 (index (length $0) (cons 1 (prev_dc_inv_5 $0)))))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (index 1 (prev_dc_inv_1 $0)))",
        "(lam (car (prev_dc_inv_1 (cdr $0))))",
        "(lam (prev_dc_inv_0 (fold (prev_dc_inv_5 $0) 1 (lam (lam (mod $1 (+ $0 1)))))))",
        "(lam (is-square (fold $0 1 (lam (lam (+ $0 (mod $1 (+ $0 $0))))))))",
        "(lam (fold $0 (prev_dc_inv_0 1) (lam (lam (is-prime (if $0 $1 1))))))",
        "(lam (fold $0 (is-square 1) (lam (lam (is-prime (if $0 $1 1))))))",
        "(lam (fold $0 1 (lam (lam (if (gt? $0 $1) $0 $1)))))",
        "(lam (fold $0 1 (lam (lam (if (gt? $1 $0) $1 $0)))))",
        "(lam (index (length (cdr $0)) $0))",
        "(lam (index (- (length $0) 1) $0))",
        "(lam (length $0))",
        "(lam (length (prev_dc_inv_5 $0)))",
        "(fn_8 (lam 0))",
        "(lam (prev_dc_inv_5 (map (lam 1) $0)))",
        "(fn_8 (lam (mod $0 (+ 1 1))))",
        "(fn_8 (lam (mod (* $0 $0) (+ 1 1))))",
        "(fn_8 (lam (mod $0 (+ 1 (+ 1 1)))))",
        "(fn_8 (lam (mod $0 (car (prev_dc_inv_5 (range 1))))))",
        "(fn_8 (lam (mod $0 (+ (car (prev_dc_inv_5 (range 1))) (+ 1 1)))))",
        "(fn_8 (lam (mod $0 (+ 1 (+ (car (prev_dc_inv_5 (range 1))) 1)))))",
        "(fn_8 (lam (+ $0 $0)))",
        "(lam (map (lam $0) (map (lam (+ $0 $0)) $0)))",
        "(fn_8 (lam (+ $0 (+ $0 $0))))",
        "(lam (map (lam $0) (map (lam (+ $0 (+ $0 $0))) $0)))",
        "(lam (cons (index 1 $0) $0))",
        "(lam (cons (car (cdr $0)) $0))",
        "(lam (cons (car (prev_dc_inv_1 $0)) $0))",
        "(lam (cons (index 0 (prev_dc_inv_1 $0)) $0))",
        "(lam (cons 0 $0))",
        "(lam (cons (length empty) $0))",
        "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
        "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
        "(lam (cons (car $0) (cdr (cdr $0))))",
        "(lam (cons (car $0) (prev_dc_inv_1 (cons 1 $0))))",
        "(lam (cons (car $0) (cons (index 1 $0) (cons (index 1 (cdr $0)) (cdr (prev_dc_inv_1 $0))))))",
        "(lam (cons (car $0) (cons (index 1 $0) (cons (index 1 (cdr (prev_dc_inv_7 $0))) (cdr (prev_dc_inv_1 $0))))))",
        "(lam (map (lam (car $1)) $0))",
        "(lam (map (lam (index 0 $1)) $0))",
        "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (fold (prev_dc_inv_3 1 $0) empty (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (prev_dc_inv_4 (lam 0) $0))",
        "(lam (prev_dc_inv_4 (lam (length empty)) $0))",
        "(lam (prev_dc_inv_7 $0))",
        "(lam (prev_dc_inv_4 (lam ($0 ($0 ($0 0)))) $0))",
        "(lam (prev_dc_inv_4 (lam 1) (cdr $0)))",
        "(lam (cdr (prev_dc_inv_4 (lam ($0 1)) $0)))",
        "(lam (cdr (prev_dc_inv_7 $0)))",
        "(lam (cdr (prev_dc_inv_7 (prev_dc_inv_7 $0))))",
        "(lam (cdr (prev_dc_inv_7 (cdr $0))))",
        "(lam (prev_dc_inv_4 (lam ($0 1)) (cdr (cdr $0))))",
        "(lam (prev_dc_inv_7 (cdr (cdr $0))))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_1 (cons 1 $0))))",
        "(lam (prev_dc_inv_4 (lam ($0 ($0 ($0 1)))) (cdr (cdr $0))))",
        "(lam (cdr (prev_dc_inv_4 (lam ($0 ($0 ($0 ($0 1))))) (cdr $0))))",
        "(lam (prev_dc_inv_4 (lam 0) (prev_dc_inv_1 $0)))",
        "(lam (prev_dc_inv_6 (cdr $0) empty))",
        "(lam (prev_dc_inv_4 (lam ($0 1)) (prev_dc_inv_1 $0)))",
        "(lam (fold (prev_dc_inv_1 $0) $0 (lam (lam (cons $1 (cons (car $0) (cons (index 1 $0) empty)))))))",
        "(lam (prev_dc_inv_4 (lam (length (prev_dc_inv_7 $1))) (prev_dc_inv_1 $0)))",
        "(lam (prev_dc_inv_4 (lam ($0 ($0 ($0 1)))) (prev_dc_inv_1 $0)))",
        "(lam (fold (cdr (prev_dc_inv_1 $0)) $0 (lam (lam (cons $1 (cons (car $0) empty))))))",
        "(lam (fold (cdr (prev_dc_inv_1 $0)) (cons 1 empty) (lam (lam (cons $1 (cons (car $0) empty))))))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_1 (cdr $0))))",
        "(lam (prev_dc_inv_7 (cdr (prev_dc_inv_1 $0))))",
        "(lam (cdr $0))",
        "(lam (cdr (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 (lam 0) $0))",
        "(lam (prev_dc_inv_4 (lam (length empty)) $0))",
        "(lam (prev_dc_inv_4 (lam 1) $0))",
        "(lam (prev_dc_inv_4 (lam ($0 0)) $0))",
        "(lam (prev_dc_inv_4 (lam ($0 1)) $0))",
        "(lam (prev_dc_inv_4 (lam ($0 ($0 0))) $0))",
        "(lam (fold $0 empty (lam (lam (if (is-square $1) (cons $1 $0) $0)))))",
        "(lam (fold $0 empty (lam (lam (fold (range $1) $0 (lam (lam (cons $3 $2))))))))",
        "(lam (fold $0 $0 (lam (lam (map (lam 0) (fold (range $1) $0 (lam (lam (cdr $2)))))))))"
      ],
      "rewritten_dreamcoder": [
        "(#(lambda (lambda (map $1 $0))) (lambda (+ $0 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range $0))))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (+ (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range $0))) $0)))",
        "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) $0 $0))",
        "(lambda (fold $0 (cons (car (cdr (cdr $0))) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (cdr $0) $0))",
        "(lambda (fold $0 (cons (car (#(lambda (cdr (cdr (cdr $0)))) $0)) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (range 1) (lambda (lambda (cons $1 $0)))))",
        "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (cons 1 (cons 1 (range 1))) $0))",
        "(lambda (fold $0 (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)) (lambda (lambda (cons $1 $0)))))",
        "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (cons 1 (cons 1 (range 1)))) $0))",
        "(#(lambda (lambda (map $1 $0))) (lambda (#(lambda (gt? $0 0)) (+ $0 1))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (#(lambda (gt? $0 0)) (+ 1 $0))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (#(lambda (gt? $0 0)) $0)))",
        "(#(lambda (lambda (map $1 $0))) (lambda (gt? $0 (length empty))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $0)))",
        "(lambda (cdr (map (lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $0)) (cons 1 $0))))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0)))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (map (lambda $0) $0))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (if (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $0) 0 (+ $0 1))))",
        "(lambda (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0)))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (map (lambda $0) $0))))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 0 $0))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (length empty) $0))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0))",
        "(#(lambda (lambda (map $1 $0))) (lambda (index $0 (cons (+ $0 (+ 1 1)) (range $0)))))",
        "(lambda (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0))))",
        "(lambda (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 (mod 1 (length $0))) $0))))",
        "(lambda (length (fold (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0) empty (lambda (lambda (if (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $1) (cons $2 $0) $0))))))",
        "(lambda (length (fold (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0) empty (lambda (lambda (if (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $1) (cons (is-prime $1) $0) $0))))))",
        "(lambda (#(lambda (cdr (cdr (cdr $0)))) (cdr (cdr $0))))",
        "(lambda (cdr (#(lambda (cdr (cdr (cdr $0)))) (cdr $0))))",
        "(lambda (empty? $0))",
        "(lambda (empty? (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0)))",
        "(lambda (gt? 1 (fold $0 1 (lambda (lambda (* $0 $1))))))",
        "(lambda (gt? 1 (fold $0 1 (lambda (lambda (* $1 $0))))))",
        "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (#(lambda (gt? $0 0)) (length $0))))",
        "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
        "(lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) (index (length $0) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (cons 1 $0)))))",
        "(lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) (index (length $0) (cons 1 (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0)))))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (index 1 (#(lambda (cdr (cdr (cdr $0)))) $0)))",
        "(lambda (car (#(lambda (cdr (cdr (cdr $0)))) (cdr $0))))",
        "(lambda (#(lambda (gt? $0 0)) (fold (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0) 1 (lambda (lambda (mod $1 (+ $0 1)))))))",
        "(lambda (is-square (fold $0 1 (lambda (lambda (+ $0 (mod $1 (+ $0 $0))))))))",
        "(lambda (fold $0 (#(lambda (gt? $0 0)) 1) (lambda (lambda (is-prime (if $0 $1 1))))))",
        "(lambda (fold $0 (is-square 1) (lambda (lambda (is-prime (if $0 $1 1))))))",
        "(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1)))))",
        "(lambda (fold $0 1 (lambda (lambda (if (gt? $1 $0) $1 $0)))))",
        "(lambda (index (length (cdr $0)) $0))",
        "(lambda (index (- (length $0) 1) $0))",
        "(lambda (length $0))",
        "(lambda (length (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0)))",
        "(#(lambda (lambda (map $1 $0))) (lambda 0))",
        "(lambda (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (map (lambda 1) $0)))",
        "(#(lambda (lambda (map $1 $0))) (lambda (mod $0 (+ 1 1))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (mod (* $0 $0) (+ 1 1))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (mod $0 (+ 1 (+ 1 1)))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (mod $0 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (mod $0 (+ (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))) (+ 1 1)))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (mod $0 (+ 1 (+ (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))) 1)))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (+ $0 $0)))",
        "(lambda (map (lambda $0) (map (lambda (+ $0 $0)) $0)))",
        "(#(lambda (lambda (map $1 $0))) (lambda (+ $0 (+ $0 $0))))",
        "(lambda (map (lambda $0) (map (lambda (+ $0 (+ $0 $0))) $0)))",
        "(lambda (cons (index 1 $0) $0))",
        "(lambda (cons (car (cdr $0)) $0))",
        "(lambda (cons (car (#(lambda (cdr (cdr (cdr $0)))) $0)) $0))",
        "(lambda (cons (index 0 (#(lambda (cdr (cdr (cdr $0)))) $0)) $0))",
        "(lambda (cons 0 $0))",
        "(lambda (cons (length empty) $0))",
        "(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))",
        "(lambda (fold $0 1 (lambda (lambda (* $1 $0)))))",
        "(lambda (cons (car $0) (cdr (cdr $0))))",
        "(lambda (cons (car $0) (#(lambda (cdr (cdr (cdr $0)))) (cons 1 $0))))",
        "(lambda (cons (car $0) (cons (index 1 $0) (cons (index 1 (cdr $0)) (cdr (#(lambda (cdr (cdr (cdr $0)))) $0))))))",
        "(lambda (cons (car $0) (cons (index 1 $0) (cons (index 1 (cdr (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0))) (cdr (#(lambda (cdr (cdr (cdr $0)))) $0))))))",
        "(lambda (map (lambda (car $1)) $0))",
        "(lambda (map (lambda (index 0 $1)) $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (fold (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0) empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 0) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda (length empty)) $0))",
        "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 ($0 0)))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 1) (cdr $0)))",
        "(lambda (cdr (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 1)) $0)))",
        "(lambda (cdr (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0)))",
        "(lambda (cdr (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0))))",
        "(lambda (cdr (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (cdr $0))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 1)) (cdr (cdr $0))))",
        "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (cdr (cdr $0))))",
        "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (#(lambda (cdr (cdr (cdr $0)))) (cons 1 $0))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 ($0 1)))) (cdr (cdr $0))))",
        "(lambda (cdr (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 ($0 ($0 1))))) (cdr $0))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 0) (#(lambda (cdr (cdr (cdr $0)))) $0)))",
        "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (cdr $0) empty))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 1)) (#(lambda (cdr (cdr (cdr $0)))) $0)))",
        "(lambda (fold (#(lambda (cdr (cdr (cdr $0)))) $0) $0 (lambda (lambda (cons $1 (cons (car $0) (cons (index 1 $0) empty)))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda (length (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $1))) (#(lambda (cdr (cdr (cdr $0)))) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 ($0 1)))) (#(lambda (cdr (cdr (cdr $0)))) $0)))",
        "(lambda (fold (cdr (#(lambda (cdr (cdr (cdr $0)))) $0)) $0 (lambda (lambda (cons $1 (cons (car $0) empty))))))",
        "(lambda (fold (cdr (#(lambda (cdr (cdr (cdr $0)))) $0)) (cons 1 empty) (lambda (lambda (cons $1 (cons (car $0) empty))))))",
        "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (#(lambda (cdr (cdr (cdr $0)))) (cdr $0))))",
        "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (cdr (#(lambda (cdr (cdr (cdr $0)))) $0))))",
        "(lambda (cdr $0))",
        "(lambda (cdr (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 0) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda (length empty)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 0)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 1)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 0))) $0))",
        "(lambda (fold $0 empty (lambda (lambda (if (is-square $1) (cons $1 $0) $0)))))",
        "(lambda (fold $0 empty (lambda (lambda (fold (range $1) $0 (lambda (lambda (cons $3 $2))))))))",
        "(lambda (fold $0 $0 (lambda (lambda (map (lambda 0) (fold (range $1) $0 (lambda (lambda (cdr $2)))))))))"
      ],
      "utility": 919,
      "expected_cost": 35087,
      "final_cost": 35087,
      "multiplier": 1.0319776555419387,
      "multiplier_wrt_orig": 1.0319776555419387,
      "num_uses": 20,
      "uses": [
        {
          "fn_8 (lam (+ $0 $0))": "(lam (map (lam (+ $0 $0)) $0))"
        },
        {
          "fn_8 (lam (+ $0 (+ $0 $0)))": "(lam (map (lam (+ $0 (+ $0 $0))) $0))"
        },
        {
          "fn_8 (lam (+ $0 (car (prev_dc_inv_5 (range $0)))))": "(lam (map (lam (+ $0 (car (prev_dc_inv_5 (range $0))))) $0))"
        },
        {
          "fn_8 (lam (+ (car (prev_dc_inv_5 (range $0))) $0))": "(lam (map (lam (+ (car (prev_dc_inv_5 (range $0))) $0)) $0))"
        },
        {
          "fn_8 (lam (car #0))": "(lam (map (lam (car $1)) $0))"
        },
        {
          "fn_8 (lam (gt? $0 (length empty)))": "(lam (map (lam (gt? $0 (length empty))) $0))"
        },
        {
          "fn_8 (lam (if (prev_dc_inv_2 $0) 0 (+ $0 1)))": "(lam (map (lam (if (prev_dc_inv_2 $0) 0 (+ $0 1))) $0))"
        },
        {
          "fn_8 (lam (index $0 (cons (+ $0 (+ 1 1)) (range $0))))": "(lam (map (lam (index $0 (cons (+ $0 (+ 1 1)) (range $0)))) $0))"
        },
        {
          "fn_8 (lam (index 0 #0))": "(lam (map (lam (index 0 $1)) $0))"
        },
        {
          "fn_8 (lam (mod $0 (+ (car (prev_dc_inv_5 (range 1))) (+ 1 1))))": "(lam (map (lam (mod $0 (+ (car (prev_dc_inv_5 (range 1))) (+ 1 1)))) $0))"
        },
        {
          "fn_8 (lam (mod $0 (+ 1 (+ (car (prev_dc_inv_5 (range 1))) 1))))": "(lam (map (lam (mod $0 (+ 1 (+ (car (prev_dc_inv_5 (range 1))) 1)))) $0))"
        },
        {
          "fn_8 (lam (mod $0 (+ 1 (+ 1 1))))": "(lam (map (lam (mod $0 (+ 1 (+ 1 1)))) $0))"
        },
        {
          "fn_8 (lam (mod $0 (+ 1 1)))": "(lam (map (lam (mod $0 (+ 1 1))) $0))"
        },
        {
          "fn_8 (lam (mod $0 (car (prev_dc_inv_5 (range 1)))))": "(lam (map (lam (mod $0 (car (prev_dc_inv_5 (range 1))))) $0))"
        },
        {
          "fn_8 (lam (mod (* $0 $0) (+ 1 1)))": "(lam (map (lam (mod (* $0 $0) (+ 1 1))) $0))"
        },
        {
          "fn_8 (lam (prev_dc_inv_0 $0))": "(lam (map (lam (prev_dc_inv_0 $0)) $0))"
        },
        {
          "fn_8 (lam (prev_dc_inv_0 (+ $0 1)))": "(lam (map (lam (prev_dc_inv_0 (+ $0 1))) $0))"
        },
        {
          "fn_8 (lam (prev_dc_inv_0 (+ 1 $0)))": "(lam (map (lam (prev_dc_inv_0 (+ 1 $0))) $0))"
        },
        {
          "fn_8 (lam (prev_dc_inv_2 $0))": "(lam (map (lam (prev_dc_inv_2 $0)) $0))"
        },
        {
          "fn_8 (lam 0)": "(lam (map (lam 0) $0))"
        }
      ]
    },
    {
      "body": "(fn_8 (lam (mod $0 (+ 1 #0))))",
      "dreamcoder": "#(lambda (#(lambda (lambda (map $1 $0))) (lambda (mod $0 (+ 1 $1)))))",
      "arity": 1,
      "name": "fn_9",
      "rewritten": [
        "(fn_8 (lam (+ $0 (car (prev_dc_inv_5 (range $0))))))",
        "(fn_8 (lam (+ (car (prev_dc_inv_5 (range $0))) $0)))",
        "(lam (prev_dc_inv_6 $0 $0))",
        "(lam (fold $0 (cons (car (cdr (cdr $0))) empty) (lam (lam (cons $1 $0)))))",
        "(lam (prev_dc_inv_6 (cdr $0) $0))",
        "(lam (fold $0 (cons (car (prev_dc_inv_1 $0)) empty) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (range 1) (lam (lam (cons $1 $0)))))",
        "(lam (prev_dc_inv_6 (cons 1 (cons 1 (range 1))) $0))",
        "(lam (fold $0 (prev_dc_inv_5 (range 1)) (lam (lam (cons $1 $0)))))",
        "(lam (prev_dc_inv_6 (prev_dc_inv_5 (cons 1 (cons 1 (range 1)))) $0))",
        "(fn_8 (lam (prev_dc_inv_0 (+ $0 1))))",
        "(fn_8 (lam (prev_dc_inv_0 (+ 1 $0))))",
        "(fn_8 (lam (prev_dc_inv_0 $0)))",
        "(fn_8 (lam (gt? $0 (length empty))))",
        "(fn_8 (lam (prev_dc_inv_2 $0)))",
        "(lam (cdr (map (lam (prev_dc_inv_2 $0)) (cons 1 $0))))",
        "(lam (prev_dc_inv_3 1 (prev_dc_inv_3 1 $0)))",
        "(lam (prev_dc_inv_3 1 (prev_dc_inv_3 1 (map (lam $0) $0))))",
        "(fn_8 (lam (if (prev_dc_inv_2 $0) 0 (+ $0 1))))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_3 1 (prev_dc_inv_3 1 $0)))",
        "(lam (prev_dc_inv_3 1 (prev_dc_inv_3 1 (map (lam $0) $0))))",
        "(lam (prev_dc_inv_3 0 $0))",
        "(lam (prev_dc_inv_3 (length empty) $0))",
        "(lam (prev_dc_inv_3 1 $0))",
        "(fn_8 (lam (index $0 (cons (+ $0 (+ 1 1)) (range $0)))))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_5 (prev_dc_inv_5 $0))))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_5 (prev_dc_inv_3 (+ 1 (mod 1 (length $0))) $0))))",
        "(lam (length (fold (prev_dc_inv_5 $0) empty (lam (lam (if (prev_dc_inv_2 $1) (cons $2 $0) $0))))))",
        "(lam (length (fold (prev_dc_inv_5 $0) empty (lam (lam (if (prev_dc_inv_2 $1) (cons (is-prime $1) $0) $0))))))",
        "(lam (prev_dc_inv_1 (cdr (cdr $0))))",
        "(lam (cdr (prev_dc_inv_1 (cdr $0))))",
        "(lam (empty? $0))",
        "(lam (empty? (prev_dc_inv_5 $0)))",
        "(lam (gt? 1 (fold $0 1 (lam (lam (* $0 $1))))))",
        "(lam (gt? 1 (fold $0 1 (lam (lam (* $1 $0))))))",
        "(lam (if (is-prime (length $0)) (is-prime (car $0)) (prev_dc_inv_0 (length $0))))",
        "(lam (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
        "(lam (prev_dc_inv_2 (index (length $0) (prev_dc_inv_5 (cons 1 $0)))))",
        "(lam (prev_dc_inv_2 (index (length $0) (cons 1 (prev_dc_inv_5 $0)))))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (index 1 (prev_dc_inv_1 $0)))",
        "(lam (car (prev_dc_inv_1 (cdr $0))))",
        "(lam (prev_dc_inv_0 (fold (prev_dc_inv_5 $0) 1 (lam (lam (mod $1 (+ $0 1)))))))",
        "(lam (is-square (fold $0 1 (lam (lam (+ $0 (mod $1 (+ $0 $0))))))))",
        "(lam (fold $0 (prev_dc_inv_0 1) (lam (lam (is-prime (if $0 $1 1))))))",
        "(lam (fold $0 (is-square 1) (lam (lam (is-prime (if $0 $1 1))))))",
        "(lam (fold $0 1 (lam (lam (if (gt? $0 $1) $0 $1)))))",
        "(lam (fold $0 1 (lam (lam (if (gt? $1 $0) $1 $0)))))",
        "(lam (index (length (cdr $0)) $0))",
        "(lam (index (- (length $0) 1) $0))",
        "(lam (length $0))",
        "(lam (length (prev_dc_inv_5 $0)))",
        "(fn_8 (lam 0))",
        "(lam (prev_dc_inv_5 (map (lam 1) $0)))",
        "(fn_9 1)",
        "(fn_8 (lam (mod (* $0 $0) (+ 1 1))))",
        "(fn_9 (+ 1 1))",
        "(fn_8 (lam (mod $0 (car (prev_dc_inv_5 (range 1))))))",
        "(fn_8 (lam (mod $0 (+ (car (prev_dc_inv_5 (range 1))) (+ 1 1)))))",
        "(fn_9 (+ (car (prev_dc_inv_5 (range 1))) 1))",
        "(fn_8 (lam (+ $0 $0)))",
        "(lam (map (lam $0) (map (lam (+ $0 $0)) $0)))",
        "(fn_8 (lam (+ $0 (+ $0 $0))))",
        "(lam (map (lam $0) (map (lam (+ $0 (+ $0 $0))) $0)))",
        "(lam (cons (index 1 $0) $0))",
        "(lam (cons (car (cdr $0)) $0))",
        "(lam (cons (car (prev_dc_inv_1 $0)) $0))",
        "(lam (cons (index 0 (prev_dc_inv_1 $0)) $0))",
        "(lam (cons 0 $0))",
        "(lam (cons (length empty) $0))",
        "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
        "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
        "(lam (cons (car $0) (cdr (cdr $0))))",
        "(lam (cons (car $0) (prev_dc_inv_1 (cons 1 $0))))",
        "(lam (cons (car $0) (cons (index 1 $0) (cons (index 1 (cdr $0)) (cdr (prev_dc_inv_1 $0))))))",
        "(lam (cons (car $0) (cons (index 1 $0) (cons (index 1 (cdr (prev_dc_inv_7 $0))) (cdr (prev_dc_inv_1 $0))))))",
        "(lam (map (lam (car $1)) $0))",
        "(lam (map (lam (index 0 $1)) $0))",
        "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (fold (prev_dc_inv_3 1 $0) empty (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (prev_dc_inv_4 (lam 0) $0))",
        "(lam (prev_dc_inv_4 (lam (length empty)) $0))",
        "(lam (prev_dc_inv_7 $0))",
        "(lam (prev_dc_inv_4 (lam ($0 ($0 ($0 0)))) $0))",
        "(lam (prev_dc_inv_4 (lam 1) (cdr $0)))",
        "(lam (cdr (prev_dc_inv_4 (lam ($0 1)) $0)))",
        "(lam (cdr (prev_dc_inv_7 $0)))",
        "(lam (cdr (prev_dc_inv_7 (prev_dc_inv_7 $0))))",
        "(lam (cdr (prev_dc_inv_7 (cdr $0))))",
        "(lam (prev_dc_inv_4 (lam ($0 1)) (cdr (cdr $0))))",
        "(lam (prev_dc_inv_7 (cdr (cdr $0))))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_1 (cons 1 $0))))",
        "(lam (prev_dc_inv_4 (lam ($0 ($0 ($0 1)))) (cdr (cdr $0))))",
        "(lam (cdr (prev_dc_inv_4 (lam ($0 ($0 ($0 ($0 1))))) (cdr $0))))",
        "(lam (prev_dc_inv_4 (lam 0) (prev_dc_inv_1 $0)))",
        "(lam (prev_dc_inv_6 (cdr $0) empty))",
        "(lam (prev_dc_inv_4 (lam ($0 1)) (prev_dc_inv_1 $0)))",
        "(lam (fold (prev_dc_inv_1 $0) $0 (lam (lam (cons $1 (cons (car $0) (cons (index 1 $0) empty)))))))",
        "(lam (prev_dc_inv_4 (lam (length (prev_dc_inv_7 $1))) (prev_dc_inv_1 $0)))",
        "(lam (prev_dc_inv_4 (lam ($0 ($0 ($0 1)))) (prev_dc_inv_1 $0)))",
        "(lam (fold (cdr (prev_dc_inv_1 $0)) $0 (lam (lam (cons $1 (cons (car $0) empty))))))",
        "(lam (fold (cdr (prev_dc_inv_1 $0)) (cons 1 empty) (lam (lam (cons $1 (cons (car $0) empty))))))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_1 (cdr $0))))",
        "(lam (prev_dc_inv_7 (cdr (prev_dc_inv_1 $0))))",
        "(lam (cdr $0))",
        "(lam (cdr (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 (lam 0) $0))",
        "(lam (prev_dc_inv_4 (lam (length empty)) $0))",
        "(lam (prev_dc_inv_4 (lam 1) $0))",
        "(lam (prev_dc_inv_4 (lam ($0 0)) $0))",
        "(lam (prev_dc_inv_4 (lam ($0 1)) $0))",
        "(lam (prev_dc_inv_4 (lam ($0 ($0 0))) $0))",
        "(lam (fold $0 empty (lam (lam (if (is-square $1) (cons $1 $0) $0)))))",
        "(lam (fold $0 empty (lam (lam (fold (range $1) $0 (lam (lam (cons $3 $2))))))))",
        "(lam (fold $0 $0 (lam (lam (map (lam 0) (fold (range $1) $0 (lam (lam (cdr $2)))))))))"
      ],
      "rewritten_dreamcoder": [
        "(fn_8 (lambda (+ $0 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range $0))))))",
        "(fn_8 (lambda (+ (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range $0))) $0)))",
        "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) $0 $0))",
        "(lambda (fold $0 (cons (car (cdr (cdr $0))) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (cdr $0) $0))",
        "(lambda (fold $0 (cons (car (#(lambda (cdr (cdr (cdr $0)))) $0)) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (range 1) (lambda (lambda (cons $1 $0)))))",
        "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (cons 1 (cons 1 (range 1))) $0))",
        "(lambda (fold $0 (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1)) (lambda (lambda (cons $1 $0)))))",
        "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (cons 1 (cons 1 (range 1)))) $0))",
        "(fn_8 (lambda (#(lambda (gt? $0 0)) (+ $0 1))))",
        "(fn_8 (lambda (#(lambda (gt? $0 0)) (+ 1 $0))))",
        "(fn_8 (lambda (#(lambda (gt? $0 0)) $0)))",
        "(fn_8 (lambda (gt? $0 (length empty))))",
        "(fn_8 (lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $0)))",
        "(lambda (cdr (map (lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $0)) (cons 1 $0))))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0)))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (map (lambda $0) $0))))",
        "(fn_8 (lambda (if (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $0) 0 (+ $0 1))))",
        "(lambda (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0)))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 (map (lambda $0) $0))))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 0 $0))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (length empty) $0))",
        "(lambda (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0))",
        "(fn_8 (lambda (index $0 (cons (+ $0 (+ 1 1)) (range $0)))))",
        "(lambda (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0))))",
        "(lambda (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 (mod 1 (length $0))) $0))))",
        "(lambda (length (fold (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0) empty (lambda (lambda (if (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $1) (cons $2 $0) $0))))))",
        "(lambda (length (fold (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0) empty (lambda (lambda (if (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) $1) (cons (is-prime $1) $0) $0))))))",
        "(lambda (#(lambda (cdr (cdr (cdr $0)))) (cdr (cdr $0))))",
        "(lambda (cdr (#(lambda (cdr (cdr (cdr $0)))) (cdr $0))))",
        "(lambda (empty? $0))",
        "(lambda (empty? (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0)))",
        "(lambda (gt? 1 (fold $0 1 (lambda (lambda (* $0 $1))))))",
        "(lambda (gt? 1 (fold $0 1 (lambda (lambda (* $1 $0))))))",
        "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (#(lambda (gt? $0 0)) (length $0))))",
        "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
        "(lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) (index (length $0) (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (cons 1 $0)))))",
        "(lambda (#(lambda (is-prime (- $0 (if (is-square $0) 1 $0)))) (index (length $0) (cons 1 (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0)))))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (index 1 (#(lambda (cdr (cdr (cdr $0)))) $0)))",
        "(lambda (car (#(lambda (cdr (cdr (cdr $0)))) (cdr $0))))",
        "(lambda (#(lambda (gt? $0 0)) (fold (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0) 1 (lambda (lambda (mod $1 (+ $0 1)))))))",
        "(lambda (is-square (fold $0 1 (lambda (lambda (+ $0 (mod $1 (+ $0 $0))))))))",
        "(lambda (fold $0 (#(lambda (gt? $0 0)) 1) (lambda (lambda (is-prime (if $0 $1 1))))))",
        "(lambda (fold $0 (is-square 1) (lambda (lambda (is-prime (if $0 $1 1))))))",
        "(lambda (fold $0 1 (lambda (lambda (if (gt? $0 $1) $0 $1)))))",
        "(lambda (fold $0 1 (lambda (lambda (if (gt? $1 $0) $1 $0)))))",
        "(lambda (index (length (cdr $0)) $0))",
        "(lambda (index (- (length $0) 1) $0))",
        "(lambda (length $0))",
        "(lambda (length (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) $0)))",
        "(fn_8 (lambda 0))",
        "(lambda (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (map (lambda 1) $0)))",
        "(#(lambda (#(lambda (lambda (map $1 $0))) (lambda (mod $0 (+ 1 $1))))) 1)",
        "(fn_8 (lambda (mod (* $0 $0) (+ 1 1))))",
        "(#(lambda (#(lambda (lambda (map $1 $0))) (lambda (mod $0 (+ 1 $1))))) (+ 1 1))",
        "(fn_8 (lambda (mod $0 (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))))))",
        "(fn_8 (lambda (mod $0 (+ (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))) (+ 1 1)))))",
        "(#(lambda (#(lambda (lambda (map $1 $0))) (lambda (mod $0 (+ 1 $1))))) (+ (car (#(#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) (+ 1 1)) (range 1))) 1))",
        "(fn_8 (lambda (+ $0 $0)))",
        "(lambda (map (lambda $0) (map (lambda (+ $0 $0)) $0)))",
        "(fn_8 (lambda (+ $0 (+ $0 $0))))",
        "(lambda (map (lambda $0) (map (lambda (+ $0 (+ $0 $0))) $0)))",
        "(lambda (cons (index 1 $0) $0))",
        "(lambda (cons (car (cdr $0)) $0))",
        "(lambda (cons (car (#(lambda (cdr (cdr (cdr $0)))) $0)) $0))",
        "(lambda (cons (index 0 (#(lambda (cdr (cdr (cdr $0)))) $0)) $0))",
        "(lambda (cons 0 $0))",
        "(lambda (cons (length empty) $0))",
        "(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))",
        "(lambda (fold $0 1 (lambda (lambda (* $1 $0)))))",
        "(lambda (cons (car $0) (cdr (cdr $0))))",
        "(lambda (cons (car $0) (#(lambda (cdr (cdr (cdr $0)))) (cons 1 $0))))",
        "(lambda (cons (car $0) (cons (index 1 $0) (cons (index 1 (cdr $0)) (cdr (#(lambda (cdr (cdr (cdr $0)))) $0))))))",
        "(lambda (cons (car $0) (cons (index 1 $0) (cons (index 1 (cdr (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0))) (cdr (#(lambda (cdr (cdr (cdr $0)))) $0))))))",
        "(lambda (map (lambda (car $1)) $0))",
        "(lambda (map (lambda (index 0 $1)) $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (fold (#(lambda (map (lambda (index $0 (cons (+ 1 $1) (range $0)))))) 1 $0) empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 0) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda (length empty)) $0))",
        "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 ($0 0)))) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 1) (cdr $0)))",
        "(lambda (cdr (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 1)) $0)))",
        "(lambda (cdr (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0)))",
        "(lambda (cdr (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $0))))",
        "(lambda (cdr (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (cdr $0))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 1)) (cdr (cdr $0))))",
        "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (cdr (cdr $0))))",
        "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (#(lambda (cdr (cdr (cdr $0)))) (cons 1 $0))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 ($0 1)))) (cdr (cdr $0))))",
        "(lambda (cdr (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 ($0 ($0 1))))) (cdr $0))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 0) (#(lambda (cdr (cdr (cdr $0)))) $0)))",
        "(lambda (#(lambda (lambda (fold $0 (cons (index 1 (cdr $1)) empty) (lambda (lambda (cons $1 $0)))))) (cdr $0) empty))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 1)) (#(lambda (cdr (cdr (cdr $0)))) $0)))",
        "(lambda (fold (#(lambda (cdr (cdr (cdr $0)))) $0) $0 (lambda (lambda (cons $1 (cons (car $0) (cons (index 1 $0) empty)))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda (length (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) $1))) (#(lambda (cdr (cdr (cdr $0)))) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 ($0 1)))) (#(lambda (cdr (cdr (cdr $0)))) $0)))",
        "(lambda (fold (cdr (#(lambda (cdr (cdr (cdr $0)))) $0)) $0 (lambda (lambda (cons $1 (cons (car $0) empty))))))",
        "(lambda (fold (cdr (#(lambda (cdr (cdr (cdr $0)))) $0)) (cons 1 empty) (lambda (lambda (cons $1 (cons (car $0) empty))))))",
        "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (#(lambda (cdr (cdr (cdr $0)))) (cdr $0))))",
        "(lambda (#(#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 1)))) (cdr (#(lambda (cdr (cdr (cdr $0)))) $0))))",
        "(lambda (cdr $0))",
        "(lambda (cdr (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 0) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda (length empty)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 0)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 1)) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range (+ 1 ($1 (+ 1))))))) (lambda ($0 ($0 0))) $0))",
        "(lambda (fold $0 empty (lambda (lambda (if (is-square $1) (cons $1 $0) $0)))))",
        "(lambda (fold $0 empty (lambda (lambda (fold (range $1) $0 (lambda (lambda (cons $3 $2))))))))",
        "(lambda (fold $0 $0 (lambda (lambda (map (lambda 0) (fold (range $1) $0 (lambda (lambda (cdr $2)))))))))"
      ],
      "utility": 608,
      "expected_cost": 33973,
      "final_cost": 33973,
      "multiplier": 1.032790745592088,
      "multiplier_wrt_orig": 1.0658169723015336,
      "num_uses": 3,
      "uses": [
        {
          "fn_9 (+ (car (prev_dc_inv_5 (range 1))) 1)": "(fn_8 (lam (mod $0 (+ 1 (+ (car (prev_dc_inv_5 (range 1))) 1)))))"
        },
        {
          "fn_9 (+ 1 1)": "(fn_8 (lam (mod $0 (+ 1 (+ 1 1)))))"
        },
        {
          "fn_9 1": "(fn_8 (lam (mod $0 (+ 1 1))))"
        }
      ]
    }
  ]
}