{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.26.41/bench000_it0.json --max-arity=3 --threads=1 --iterations=2 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.26.41/out/stitch/2022-10-04_19-36-01/raw/bench000_it0.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.26.41/bench000_it0.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.26.41/out/stitch/2022-10-04_19-36-01/raw/bench000_it0.json",
    "iterations": 2,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 13855,
  "original": [
    "(lam (fold $0 (cons (index 1 (cdr $0)) empty) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (cons (car (cdr (cdr $0))) empty) (lam (lam (cons $1 $0)))))",
    "(lam (map (lam (empty? (range (- 0 $0)))) $0))",
    "(lam (map (lam (eq? $0 (length (range $0)))) $0))",
    "(lam (map (lam (index $0 (cons (+ 1 (+ 1 1)) (range $0)))) $0))",
    "(lam (map (lam (index $0 (cons (+ 1 1) (range $0)))) $0))",
    "(lam (map (lam (index $0 (cons (+ $0 (+ 1 1)) (range $0)))) $0))",
    "(lam (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
    "(lam (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
    "(lam (car $0))",
    "(lam (index 0 $0))",
    "(lam (fold (cdr (cdr (cdr (cdr $0)))) $0 (lam (lam (cons $1 (cons (car $0) empty))))))",
    "(lam (fold (cdr (cdr (cdr (cdr $0)))) (cons 0 empty) (lam (lam (cons $1 (cons (car $0) empty))))))",
    "(lam (fold $0 $0 (lam (lam (map (lam 0) (fold (range $1) $0 (lam (lam (cdr $2)))))))))"
  ],
  "invs": [
    {
      "body": "(lam (map (lam (#1 $0 (#0 (range $0)))) $0))",
      "dreamcoder": "#(lambda (lambda (lambda (map (lambda ($2 $0 ($3 (range $0)))) $0))))",
      "arity": 2,
      "name": "fn_0",
      "rewritten": [
        "(lam (fold $0 (cons (index 1 (cdr $0)) empty) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (cons (car (cdr (cdr $0))) empty) (lam (lam (cons $1 $0)))))",
        "(lam (map (lam (empty? (range (- 0 $0)))) $0))",
        "(fn_0 length eq?)",
        "(fn_0 (cons (+ 1 (+ 1 1))) index)",
        "(fn_0 (cons (+ 1 1)) index)",
        "(lam (map (lam (index $0 (cons (+ $0 (+ 1 1)) (range $0)))) $0))",
        "(lam (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
        "(lam (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (fold (cdr (cdr (cdr (cdr $0)))) $0 (lam (lam (cons $1 (cons (car $0) empty))))))",
        "(lam (fold (cdr (cdr (cdr (cdr $0)))) (cons 0 empty) (lam (lam (cons $1 (cons (car $0) empty))))))",
        "(lam (fold $0 $0 (lam (lam (map (lam 0) (fold (range $1) $0 (lam (lam (cdr $2)))))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (fold $0 (cons (index 1 (cdr $0)) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (cons (car (cdr (cdr $0))) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda (empty? (range (- 0 $0)))) $0))",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 ($3 (range $0)))) $0)))) length eq?)",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 ($3 (range $0)))) $0)))) (cons (+ 1 (+ 1 1))) index)",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 ($3 (range $0)))) $0)))) (cons (+ 1 1)) index)",
        "(lambda (map (lambda (index $0 (cons (+ $0 (+ 1 1)) (range $0)))) $0))",
        "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
        "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (fold (cdr (cdr (cdr (cdr $0)))) $0 (lambda (lambda (cons $1 (cons (car $0) empty))))))",
        "(lambda (fold (cdr (cdr (cdr (cdr $0)))) (cons 0 empty) (lambda (lambda (cons $1 (cons (car $0) empty))))))",
        "(lambda (fold $0 $0 (lambda (lambda (map (lambda 0) (fold (range $1) $0 (lambda (lambda (cdr $2)))))))))"
      ],
      "utility": 710,
      "expected_cost": 6571,
      "final_cost": 6571,
      "multiplier": 1.1853599147770506,
      "multiplier_wrt_orig": 1.1853599147770506,
      "num_uses": 4,
      "uses": [
        {
          "fn_0 length eq?": "(lam (map (lam (eq? $0 (length (range $0)))) $0))"
        },
        {
          "fn_0 (cons (+ #0 (+ 1 1))) index": "(lam (map (lam (index $0 (cons (+ $0 (+ 1 1)) (range $0)))) $0))"
        },
        {
          "fn_0 (cons (+ 1 (+ 1 1))) index": "(lam (map (lam (index $0 (cons (+ 1 (+ 1 1)) (range $0)))) $0))"
        },
        {
          "fn_0 (cons (+ 1 1)) index": "(lam (map (lam (index $0 (cons (+ 1 1) (range $0)))) $0))"
        }
      ]
    },
    {
      "body": "(fn_0 (cons (+ 1 #0)) index)",
      "dreamcoder": "#(lambda (#(lambda (lambda (lambda (map (lambda ($2 $0 ($3 (range $0)))) $0)))) (cons (+ 1 $0)) index))",
      "arity": 1,
      "name": "fn_1",
      "rewritten": [
        "(lam (fold $0 (cons (index 1 (cdr $0)) empty) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (cons (car (cdr (cdr $0))) empty) (lam (lam (cons $1 $0)))))",
        "(lam (map (lam (empty? (range (- 0 $0)))) $0))",
        "(fn_0 length eq?)",
        "(fn_1 (+ 1 1))",
        "(fn_1 1)",
        "(lam (map (lam (index $0 (cons (+ $0 (+ 1 1)) (range $0)))) $0))",
        "(lam (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
        "(lam (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (fold (cdr (cdr (cdr (cdr $0)))) $0 (lam (lam (cons $1 (cons (car $0) empty))))))",
        "(lam (fold (cdr (cdr (cdr (cdr $0)))) (cons 0 empty) (lam (lam (cons $1 (cons (car $0) empty))))))",
        "(lam (fold $0 $0 (lam (lam (map (lam 0) (fold (range $1) $0 (lam (lam (cdr $2)))))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (fold $0 (cons (index 1 (cdr $0)) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (cons (car (cdr (cdr $0))) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda (empty? (range (- 0 $0)))) $0))",
        "(fn_0 length eq?)",
        "(#(lambda (#(lambda (lambda (lambda (map (lambda ($2 $0 ($3 (range $0)))) $0)))) (cons (+ 1 $0)) index)) (+ 1 1))",
        "(#(lambda (#(lambda (lambda (lambda (map (lambda ($2 $0 ($3 (range $0)))) $0)))) (cons (+ 1 $0)) index)) 1)",
        "(lambda (map (lambda (index $0 (cons (+ $0 (+ 1 1)) (range $0)))) $0))",
        "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
        "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (is-prime (+ (length $0) 1))))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (fold (cdr (cdr (cdr (cdr $0)))) $0 (lambda (lambda (cons $1 (cons (car $0) empty))))))",
        "(lambda (fold (cdr (cdr (cdr (cdr $0)))) (cons 0 empty) (lambda (lambda (cons $1 (cons (car $0) empty))))))",
        "(lambda (fold $0 $0 (lambda (lambda (map (lambda 0) (fold (range $1) $0 (lambda (lambda (cdr $2)))))))))"
      ],
      "utility": 303,
      "expected_cost": 5763,
      "final_cost": 5763,
      "multiplier": 1.140204754468159,
      "multiplier_wrt_orig": 1.3515530105847648,
      "num_uses": 2,
      "uses": [
        {
          "fn_1 (+ 1 1)": "(fn_0 (cons (+ 1 (+ 1 1))) index)"
        },
        {
          "fn_1 1": "(fn_0 (cons (+ 1 1)) index)"
        }
      ]
    }
  ]
}