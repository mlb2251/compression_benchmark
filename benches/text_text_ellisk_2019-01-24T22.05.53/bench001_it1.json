{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.201432,
        "productions": [
            {
                "expression": "char-eq?",
                "logProbability": -0.058931
            },
            {
                "expression": "length",
                "logProbability": -0.060836
            },
            {
                "expression": "+",
                "logProbability": -0.060836
            },
            {
                "expression": "-",
                "logProbability": -0.060836
            },
            {
                "expression": "0",
                "logProbability": -0.060836
            },
            {
                "expression": "1",
                "logProbability": -0.060836
            },
            {
                "expression": "empty?",
                "logProbability": -0.09172
            },
            {
                "expression": "range",
                "logProbability": -0.093965
            },
            {
                "expression": "'.'",
                "logProbability": -0.119074
            },
            {
                "expression": "','",
                "logProbability": -0.151863
            },
            {
                "expression": "'-'",
                "logProbability": -0.151863
            },
            {
                "expression": "SPACE",
                "logProbability": -0.151863
            },
            {
                "expression": "RPAREN",
                "logProbability": -0.151863
            },
            {
                "expression": "LPAREN",
                "logProbability": -0.151863
            },
            {
                "expression": "STRING",
                "logProbability": -0.313718
            },
            {
                "expression": "unfold",
                "logProbability": -0.378169
            },
            {
                "expression": "cdr",
                "logProbability": -0.378169
            },
            {
                "expression": "cons",
                "logProbability": -0.407036
            },
            {
                "expression": "empty",
                "logProbability": -0.407037
            },
            {
                "expression": "map",
                "logProbability": -0.407708
            },
            {
                "expression": "car",
                "logProbability": -0.432006
            },
            {
                "expression": "fold",
                "logProbability": -0.492682
            },
            {
                "expression": "if",
                "logProbability": -0.492683
            },
            {
                "expression": "index",
                "logProbability": -0.494674
            },
            {
                "expression": "#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0))))))",
                "logProbability": -0.313718
            }
        ]
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "nth (n=0) word delimited by '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (unfold $0 (lambda (char-eq? '.' (car $0))) (lambda (car $0)) (lambda (cdr $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by ','",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons ',' $0) $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons ',' $0) (map (lambda $0) $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first character and append ' '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cons (car $0) (cons SPACE empty)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend 'Hornak'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 'Cornell'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 'Beata'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend 'Jani'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 'Dermody'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 1,
        "num_learned": 1,
        "new_grammar": {
            "logVariable": -0.295939,
            "productions": [
                {
                    "expression": "char-eq?",
                    "logProbability": -0.05871
                },
                {
                    "expression": "1",
                    "logProbability": -0.064057
                },
                {
                    "expression": "0",
                    "logProbability": -0.065093
                },
                {
                    "expression": "length",
                    "logProbability": -0.068637
                },
                {
                    "expression": "+",
                    "logProbability": -0.068856
                },
                {
                    "expression": "-",
                    "logProbability": -0.068856
                },
                {
                    "expression": "empty?",
                    "logProbability": -0.0915
                },
                {
                    "expression": "range",
                    "logProbability": -0.09438
                },
                {
                    "expression": "'.'",
                    "logProbability": -0.202141
                },
                {
                    "expression": "','",
                    "logProbability": -0.202141
                },
                {
                    "expression": "SPACE",
                    "logProbability": -0.202141
                },
                {
                    "expression": "'-'",
                    "logProbability": -0.234931
                },
                {
                    "expression": "RPAREN",
                    "logProbability": -0.234931
                },
                {
                    "expression": "LPAREN",
                    "logProbability": -0.234931
                },
                {
                    "expression": "cons",
                    "logProbability": -0.53557
                },
                {
                    "expression": "STRING",
                    "logProbability": -0.563894
                },
                {
                    "expression": "empty",
                    "logProbability": -0.597639
                },
                {
                    "expression": "unfold",
                    "logProbability": -0.597796
                },
                {
                    "expression": "cdr",
                    "logProbability": -0.597796
                },
                {
                    "expression": "map",
                    "logProbability": -0.621197
                },
                {
                    "expression": "car",
                    "logProbability": -0.661359
                },
                {
                    "expression": "index",
                    "logProbability": -0.747072
                },
                {
                    "expression": "fold",
                    "logProbability": -0.748881
                },
                {
                    "expression": "if",
                    "logProbability": -0.748881
                },
                {
                    "expression": "#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0))))))",
                    "logProbability": -0.532754
                },
                {
                    "expression": "#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING)",
                    "logProbability": -0.533217
                }
            ]
        }
    }
}