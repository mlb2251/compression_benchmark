{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/bench004_it4.json --max-arity=3 --threads=1 --iterations=2 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/out/stitch/2022-10-04_19-35-49/raw/bench004_it4.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/bench004_it4.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/out/stitch/2022-10-04_19-35-49/raw/bench004_it4.json",
    "iterations": 2,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 27818,
  "original": [
    "(lam (prev_dc_inv_1 LPAREN RPAREN $0))",
    "(lam (map (lam $0) (prev_dc_inv_1 LPAREN RPAREN $0)))",
    "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
    "(lam (map (lam $0) (prev_dc_inv_1 SPACE LPAREN $0)))",
    "(lam (prev_dc_inv_7 $0 '.'))",
    "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
    "(lam (prev_dc_inv_7 $0 '-'))",
    "(lam (prev_dc_inv_7 (map (lam $0) $0) '-'))",
    "(lam (lam (prev_dc_inv_6 ',' $0 $1)))",
    "(lam (lam (prev_dc_inv_6 ',' $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_6 LPAREN $0 $1)))",
    "(lam (lam (prev_dc_inv_6 LPAREN $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_6 SPACE (cons SPACE $0) $1)))",
    "(lam (lam (prev_dc_inv_6 SPACE $0 (prev_dc_inv_6 SPACE empty $1))))",
    "(lam (lam (prev_dc_inv_6 LPAREN (cons ',' $0) $1)))",
    "(lam (lam (prev_dc_inv_6 LPAREN (cons ',' (map (lam $0) $0)) $1)))",
    "(lam (lam (prev_dc_inv_6 '.' (cons '.' $0) $1)))",
    "(lam (lam (prev_dc_inv_6 '.' (cons '.' $0) (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_6 SPACE (cons '-' $0) $1)))",
    "(lam (lam (prev_dc_inv_6 '-' $0 (prev_dc_inv_6 SPACE empty $1))))",
    "(lam (prev_dc_inv_3 $0 (lam (empty? (cdr (cdr (cdr (cdr $0))))))))",
    "(lam (prev_dc_inv_3 $0 (lam (empty? (prev_dc_inv_1 '.' '-' (cdr (cdr (cdr (cdr $0)))))))))",
    "(lam (map (lam (index $0 $1)) (range (length (prev_dc_inv_9 $0 $0)))))",
    "(lam (map (lam (index $0 $1)) (range (length (prev_dc_inv_9 $0 (cdr $0))))))",
    "(lam (prev_dc_inv_0 $0 SPACE))",
    "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
    "(lam (prev_dc_inv_0 $0 '-'))",
    "(lam (cons (car $0) (map (lam '-') (range 1))))",
    "(lam (lam (prev_dc_inv_9 $0 $1)))",
    "(lam (lam (prev_dc_inv_9 $0 (prev_dc_inv_0 $1 LPAREN))))",
    "(lam (lam (prev_dc_inv_9 $0 $1)))",
    "(lam (lam (prev_dc_inv_9 $0 (prev_dc_inv_0 $1 LPAREN))))",
    "(lam (lam (prev_dc_inv_2 $0 $1)))",
    "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_2 $0 $1)))",
    "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_4 $0))",
    "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0 SPACE)))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0) SPACE))",
    "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0 SPACE)))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0) SPACE))",
    "(lam (prev_dc_inv_4 $0))",
    "(lam (map (lam $0) (prev_dc_inv_4 $0)))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0 SPACE)))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0) SPACE))",
    "(lam (prev_dc_inv_4 $0))",
    "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_8 $0))",
    "(lam (cons LPAREN (prev_dc_inv_6 RPAREN empty $0)))",
    "(lam (prev_dc_inv_8 $0))",
    "(lam (map (lam $0) (prev_dc_inv_8 $0)))"
  ],
  "invs": [
    {
      "body": "(lam (lam (prev_dc_inv_6 #1 (cons #0 $0) $1)))",
      "dreamcoder": "#(lambda (lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $2 (cons $3 $0) $1)))))",
      "arity": 2,
      "name": "fn_10",
      "rewritten": [
        "(lam (prev_dc_inv_1 LPAREN RPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 LPAREN RPAREN $0)))",
        "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 SPACE LPAREN $0)))",
        "(lam (prev_dc_inv_7 $0 '.'))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lam (prev_dc_inv_7 $0 '-'))",
        "(lam (prev_dc_inv_7 (map (lam $0) $0) '-'))",
        "(lam (lam (prev_dc_inv_6 ',' $0 $1)))",
        "(lam (lam (prev_dc_inv_6 ',' $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_6 LPAREN $0 $1)))",
        "(lam (lam (prev_dc_inv_6 LPAREN $0 (map (lam $0) $1))))",
        "(fn_10 SPACE SPACE)",
        "(lam (lam (prev_dc_inv_6 SPACE $0 (prev_dc_inv_6 SPACE empty $1))))",
        "(fn_10 ',' LPAREN)",
        "(lam (lam (prev_dc_inv_6 LPAREN (cons ',' (map (lam $0) $0)) $1)))",
        "(fn_10 '.' '.')",
        "(lam (lam (prev_dc_inv_6 '.' (cons '.' $0) (map (lam $0) $1))))",
        "(fn_10 '-' SPACE)",
        "(lam (lam (prev_dc_inv_6 '-' $0 (prev_dc_inv_6 SPACE empty $1))))",
        "(lam (prev_dc_inv_3 $0 (lam (empty? (cdr (cdr (cdr (cdr $0))))))))",
        "(lam (prev_dc_inv_3 $0 (lam (empty? (prev_dc_inv_1 '.' '-' (cdr (cdr (cdr (cdr $0)))))))))",
        "(lam (map (lam (index $0 $1)) (range (length (prev_dc_inv_9 $0 $0)))))",
        "(lam (map (lam (index $0 $1)) (range (length (prev_dc_inv_9 $0 (cdr $0))))))",
        "(lam (prev_dc_inv_0 $0 SPACE))",
        "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (prev_dc_inv_9 $0 $1)))",
        "(lam (lam (prev_dc_inv_9 $0 (prev_dc_inv_0 $1 LPAREN))))",
        "(lam (lam (prev_dc_inv_9 $0 $1)))",
        "(lam (lam (prev_dc_inv_9 $0 (prev_dc_inv_0 $1 LPAREN))))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0 SPACE)))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0) SPACE))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0 SPACE)))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0) SPACE))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (map (lam $0) (prev_dc_inv_4 $0)))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0 SPACE)))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0) SPACE))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (cons LPAREN (prev_dc_inv_6 RPAREN empty $0)))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (map (lam $0) (prev_dc_inv_8 $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 '.'))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 '-'))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (map (lambda $0) $0) '-'))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 (map (lambda $0) $1))))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $2 (cons $3 $0) $1))))) SPACE SPACE)",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $2 (cons $3 $0) $1))))) ',' LPAREN)",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN (cons ',' (map (lambda $0) $0)) $1)))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $2 (cons $3 $0) $1))))) '.' '.')",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons '.' $0) (map (lambda $0) $1))))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $2 (cons $3 $0) $1))))) '-' SPACE)",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '-' $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
        "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (empty? (cdr (cdr (cdr (cdr $0))))))))",
        "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (empty? (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' '-' (cdr (cdr (cdr (cdr $0)))))))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (cdr $0))))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
        "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 LPAREN))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 LPAREN))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (map (lambda $0) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
        "(lambda (map (lambda $0) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))"
      ],
      "utility": 813,
      "expected_cost": 9599,
      "final_cost": 9599,
      "multiplier": 1.1270965725596416,
      "multiplier_wrt_orig": 1.1270965725596416,
      "num_uses": 4,
      "uses": [
        {
          "fn_10 '.' '.'": "(lam (lam (prev_dc_inv_6 '.' (cons '.' $0) $1)))"
        },
        {
          "fn_10 ',' LPAREN": "(lam (lam (prev_dc_inv_6 LPAREN (cons ',' $0) $1)))"
        },
        {
          "fn_10 '-' SPACE": "(lam (lam (prev_dc_inv_6 SPACE (cons '-' $0) $1)))"
        },
        {
          "fn_10 SPACE SPACE": "(lam (lam (prev_dc_inv_6 SPACE (cons SPACE $0) $1)))"
        }
      ]
    },
    {
      "body": "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0 SPACE)))",
      "dreamcoder": "#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
      "arity": 0,
      "name": "fn_11",
      "rewritten": [
        "(lam (prev_dc_inv_1 LPAREN RPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 LPAREN RPAREN $0)))",
        "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 SPACE LPAREN $0)))",
        "(lam (prev_dc_inv_7 $0 '.'))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lam (prev_dc_inv_7 $0 '-'))",
        "(lam (prev_dc_inv_7 (map (lam $0) $0) '-'))",
        "(lam (lam (prev_dc_inv_6 ',' $0 $1)))",
        "(lam (lam (prev_dc_inv_6 ',' $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_6 LPAREN $0 $1)))",
        "(lam (lam (prev_dc_inv_6 LPAREN $0 (map (lam $0) $1))))",
        "(fn_10 SPACE SPACE)",
        "(lam (lam (prev_dc_inv_6 SPACE $0 (prev_dc_inv_6 SPACE empty $1))))",
        "(fn_10 ',' LPAREN)",
        "(lam (lam (prev_dc_inv_6 LPAREN (cons ',' (map (lam $0) $0)) $1)))",
        "(fn_10 '.' '.')",
        "(lam (lam (prev_dc_inv_6 '.' (cons '.' $0) (map (lam $0) $1))))",
        "(fn_10 '-' SPACE)",
        "(lam (lam (prev_dc_inv_6 '-' $0 (prev_dc_inv_6 SPACE empty $1))))",
        "(lam (prev_dc_inv_3 $0 (lam (empty? (cdr (cdr (cdr (cdr $0))))))))",
        "(lam (prev_dc_inv_3 $0 (lam (empty? (prev_dc_inv_1 '.' '-' (cdr (cdr (cdr (cdr $0)))))))))",
        "(lam (map (lam (index $0 $1)) (range (length (prev_dc_inv_9 $0 $0)))))",
        "(lam (map (lam (index $0 $1)) (range (length (prev_dc_inv_9 $0 (cdr $0))))))",
        "(lam (prev_dc_inv_0 $0 SPACE))",
        "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (prev_dc_inv_9 $0 $1)))",
        "(lam (lam (prev_dc_inv_9 $0 (prev_dc_inv_0 $1 LPAREN))))",
        "(lam (lam (prev_dc_inv_9 $0 $1)))",
        "(lam (lam (prev_dc_inv_9 $0 (prev_dc_inv_0 $1 LPAREN))))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "fn_11",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0) SPACE))",
        "fn_11",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0) SPACE))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (map (lam $0) (prev_dc_inv_4 $0)))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
        "fn_11",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 $0) SPACE))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (prev_dc_inv_4 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (cons LPAREN (prev_dc_inv_6 RPAREN empty $0)))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (map (lam $0) (prev_dc_inv_8 $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 '.'))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 '-'))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (map (lambda $0) $0) '-'))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 (map (lambda $0) $1))))",
        "(fn_10 SPACE SPACE)",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
        "(fn_10 ',' LPAREN)",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN (cons ',' (map (lambda $0) $0)) $1)))",
        "(fn_10 '.' '.')",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons '.' $0) (map (lambda $0) $1))))",
        "(fn_10 '-' SPACE)",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '-' $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
        "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (empty? (cdr (cdr (cdr (cdr $0))))))))",
        "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (empty? (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' '-' (cdr (cdr (cdr (cdr $0)))))))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (cdr $0))))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
        "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 LPAREN))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 LPAREN))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (map (lambda $0) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
        "(lambda (map (lambda $0) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))"
      ],
      "utility": 508,
      "expected_cost": 8687,
      "final_cost": 8687,
      "multiplier": 1.1049844595372396,
      "multiplier_wrt_orig": 1.2454241970760906,
      "num_uses": 3,
      "uses": [
        {
          "fn_11 ": "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0 SPACE)))"
        }
      ]
    }
  ]
}