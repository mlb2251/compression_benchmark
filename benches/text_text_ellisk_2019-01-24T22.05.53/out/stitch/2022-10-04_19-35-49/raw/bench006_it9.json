{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/bench006_it9.json --max-arity=3 --threads=1 --iterations=2 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/out/stitch/2022-10-04_19-35-49/raw/bench006_it9.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/bench006_it9.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/out/stitch/2022-10-04_19-35-49/raw/bench006_it9.json",
    "iterations": 2,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 66061,
  "original": [
    "(lam (prev_dc_inv_2 ',' LPAREN $0))",
    "(lam (map (lam $0) (prev_dc_inv_2 ',' LPAREN $0)))",
    "(lam (prev_dc_inv_2 '.' RPAREN $0))",
    "(lam (prev_dc_inv_2 '.' RPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 '-' ',' $0))",
    "(lam (prev_dc_inv_2 '-' ',' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 ',' '.' $0))",
    "(lam (prev_dc_inv_2 ',' '.' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 LPAREN RPAREN $0))",
    "(lam (map (lam $0) (prev_dc_inv_2 LPAREN RPAREN $0)))",
    "(lam (prev_dc_inv_2 SPACE LPAREN $0))",
    "(lam (map (lam $0) (prev_dc_inv_2 SPACE LPAREN $0)))",
    "(lam (prev_dc_inv_2 LPAREN SPACE $0))",
    "(lam (map (lam $0) (prev_dc_inv_2 LPAREN SPACE $0)))",
    "(lam (fold (prev_dc_inv_8 (prev_dc_inv_9 $0) '.') $0 (lam (lam (cdr $0)))))",
    "(lam (fold (prev_dc_inv_8 (prev_dc_inv_9 $0) '.') $0 (lam (lam (cdr (prev_dc_inv_2 ',' $1 $0))))))",
    "(lam (prev_dc_inv_8 $0 '.'))",
    "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
    "(lam (fold (prev_dc_inv_8 (prev_dc_inv_9 $0) SPACE) $0 (lam (lam (cdr $0)))))",
    "(lam (fold (prev_dc_inv_8 (prev_dc_inv_9 $0) SPACE) $0 (lam (lam (cdr (prev_dc_inv_2 '.' SPACE $0))))))",
    "(lam (prev_dc_inv_8 $0 SPACE))",
    "(lam (prev_dc_inv_8 (map (lam $0) $0) SPACE))",
    "(lam (cdr (fold (prev_dc_inv_8 $0 LPAREN) $0 (lam (lam (cdr $0))))))",
    "(lam (fold (prev_dc_inv_8 $0 LPAREN) (cdr $0) (lam (lam (cdr $0)))))",
    "(lam (prev_dc_inv_8 $0 LPAREN))",
    "(lam (prev_dc_inv_8 (map (lam $0) $0) LPAREN))",
    "(lam (prev_dc_inv_8 (cdr (fold (prev_dc_inv_8 $0 LPAREN) $0 (lam (lam (cdr $0))))) LPAREN))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_7 ',' $0 (cdr (fold (prev_dc_inv_8 $0 LPAREN) $0 (lam (lam (cdr $0)))))) LPAREN))",
    "(lam (prev_dc_inv_8 $0 RPAREN))",
    "(lam (prev_dc_inv_8 (map (lam $0) $0) RPAREN))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_7 RPAREN $0 (cdr (fold (prev_dc_inv_8 $0 RPAREN) $0 (lam (lam (cdr $0)))))) RPAREN))",
    "(lam (prev_dc_inv_8 $0 '-'))",
    "(lam (prev_dc_inv_8 (map (lam $0) $0) '-'))",
    "(lam (lam (prev_dc_inv_7 '.' $0 $1)))",
    "(lam (lam (prev_dc_inv_3 (cons '.' $0) $1)))",
    "(lam (lam (prev_dc_inv_7 ',' $0 $1)))",
    "(lam (lam (prev_dc_inv_7 ',' $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_7 SPACE $0 $1)))",
    "(lam (lam (prev_dc_inv_3 (cons SPACE $0) $1)))",
    "(lam (lam (prev_dc_inv_7 LPAREN $0 $1)))",
    "(lam (lam (prev_dc_inv_7 LPAREN $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_7 RPAREN $0 $1)))",
    "(lam (lam (prev_dc_inv_3 (cons RPAREN $0) $1)))",
    "(lam (lam (prev_dc_inv_7 '-' $0 $1)))",
    "(lam (lam (prev_dc_inv_3 (cons '-' $0) $1)))",
    "(lam (lam (prev_dc_inv_10 SPACE $0 SPACE $1)))",
    "(lam (lam (prev_dc_inv_7 SPACE $0 (prev_dc_inv_7 SPACE empty $1))))",
    "(lam (lam (prev_dc_inv_10 SPACE $0 '.' $1)))",
    "(lam (lam (prev_dc_inv_7 '.' (cons SPACE $0) $1)))",
    "(lam (lam (prev_dc_inv_10 ',' $0 LPAREN $1)))",
    "(lam (lam (prev_dc_inv_10 ',' (map (lam $0) $0) LPAREN $1)))",
    "(lam (lam (prev_dc_inv_10 '.' $0 '.' $1)))",
    "(lam (lam (prev_dc_inv_10 '.' $0 '.' (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_10 '-' $0 '.' $1)))",
    "(lam (lam (prev_dc_inv_7 '.' (cons '-' $0) $1)))",
    "(lam (lam (prev_dc_inv_10 '-' $0 SPACE $1)))",
    "(lam (lam (prev_dc_inv_7 '-' $0 (prev_dc_inv_7 SPACE empty $1))))",
    "(lam (prev_dc_inv_4 $0 (lam (prev_dc_inv_0 $0))))",
    "(lam (prev_dc_inv_4 $0 (lam (prev_dc_inv_0 (range (length $0))))))",
    "(lam (prev_dc_inv_13 $0 (lam (range (- $0 1)))))",
    "(lam (prev_dc_inv_13 (prev_dc_inv_9 $0) (lam (cdr (range $0)))))",
    "(lam (prev_dc_inv_4 $0 (lam (prev_dc_inv_0 (cdr (cdr $0))))))",
    "(lam (prev_dc_inv_4 $0 (lam (empty? (prev_dc_inv_2 '.' '-' (cdr (cdr (cdr (cdr $0)))))))))",
    "(lam (prev_dc_inv_13 $0 (lam (range $0))))",
    "(lam (map (lam (index $0 $1)) (range (length (prev_dc_inv_11 $0 (prev_dc_inv_9 $0))))))",
    "(lam (prev_dc_inv_13 $0 (lam (range (- (length (cdr $1)) $0)))))",
    "(lam (prev_dc_inv_13 $0 (lam (range (- (length $1) (+ $0 1))))))",
    "(lam (prev_dc_inv_13 $0 (lam (range (+ $0 1)))))",
    "(lam (prev_dc_inv_13 $0 (lam (range (+ 1 $0)))))",
    "(lam (prev_dc_inv_1 $0 '.'))",
    "(lam (prev_dc_inv_1 (prev_dc_inv_1 $0 SPACE) '.'))",
    "(lam (prev_dc_inv_1 $0 SPACE))",
    "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
    "(lam (prev_dc_inv_1 $0 RPAREN))",
    "(lam (prev_dc_inv_1 (prev_dc_inv_1 $0 SPACE) RPAREN))",
    "(lam (prev_dc_inv_1 $0 '-'))",
    "(lam (cons (car $0) (map (lam '-') (range 1))))",
    "(lam (lam (prev_dc_inv_11 $0 $1)))",
    "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 '.'))))",
    "(lam (lam (prev_dc_inv_11 $0 $1)))",
    "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 '.'))))",
    "(lam (lam (prev_dc_inv_11 $0 $1)))",
    "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 SPACE))))",
    "(lam (lam (prev_dc_inv_11 $0 $1)))",
    "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 SPACE))))",
    "(lam (prev_dc_inv_11 (prev_dc_inv_2 (car $0) (index (+ (length (prev_dc_inv_8 $0 LPAREN)) 1) $0) $0) $0))",
    "(lam (lam (prev_dc_inv_11 $0 $1)))",
    "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 SPACE))))",
    "(lam (lam (prev_dc_inv_11 $0 $1)))",
    "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 SPACE))))",
    "(lam (lam (prev_dc_inv_3 $0 $1)))",
    "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_3 $0 $1)))",
    "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_3 $0 $1)))",
    "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_3 $0 $1)))",
    "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_3 $0 $1)))",
    "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
    "(lam (prev_dc_inv_6 $0))",
    "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_12 $0))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_6 $0) SPACE))",
    "(lam (prev_dc_inv_6 $0))",
    "(lam (prev_dc_inv_3 $0 STRING))",
    "(lam (prev_dc_inv_12 $0))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_6 $0) SPACE))",
    "(lam (prev_dc_inv_6 $0))",
    "(lam (prev_dc_inv_3 $0 STRING))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_3 STRING $0))",
    "(lam (prev_dc_inv_12 $0))",
    "(lam (prev_dc_inv_6 (prev_dc_inv_8 $0 SPACE)))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (map (lam $0) (prev_dc_inv_5 $0)))",
    "(lam (prev_dc_inv_6 $0))",
    "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_3 STRING $0))",
    "(lam (prev_dc_inv_12 $0))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_6 $0) SPACE))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_9 $0))",
    "(lam (cons LPAREN (prev_dc_inv_7 RPAREN empty $0)))",
    "(lam (prev_dc_inv_9 $0))",
    "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_9 $0))",
    "(lam (map (lam $0) (prev_dc_inv_9 $0)))",
    "(lam (prev_dc_inv_9 $0))",
    "(lam (prev_dc_inv_9 (map (lam $0) $0)))"
  ],
  "invs": [
    {
      "body": "(lam (lam (#0 $0 $1)))",
      "dreamcoder": "#(lambda (lambda (lambda ($2 $0 $1))))",
      "arity": 1,
      "name": "fn_14",
      "rewritten": [
        "(lam (prev_dc_inv_2 ',' LPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_2 ',' LPAREN $0)))",
        "(lam (prev_dc_inv_2 '.' RPAREN $0))",
        "(lam (prev_dc_inv_2 '.' RPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 '-' ',' $0))",
        "(lam (prev_dc_inv_2 '-' ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 ',' '.' $0))",
        "(lam (prev_dc_inv_2 ',' '.' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 LPAREN RPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_2 LPAREN RPAREN $0)))",
        "(lam (prev_dc_inv_2 SPACE LPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_2 SPACE LPAREN $0)))",
        "(lam (prev_dc_inv_2 LPAREN SPACE $0))",
        "(lam (map (lam $0) (prev_dc_inv_2 LPAREN SPACE $0)))",
        "(lam (fold (prev_dc_inv_8 (prev_dc_inv_9 $0) '.') $0 (lam (lam (cdr $0)))))",
        "(lam (fold (prev_dc_inv_8 (prev_dc_inv_9 $0) '.') $0 (lam (lam (cdr (prev_dc_inv_2 ',' $1 $0))))))",
        "(lam (prev_dc_inv_8 $0 '.'))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lam (fold (prev_dc_inv_8 (prev_dc_inv_9 $0) SPACE) $0 (lam (lam (cdr $0)))))",
        "(lam (fold (prev_dc_inv_8 (prev_dc_inv_9 $0) SPACE) $0 (lam (lam (cdr (prev_dc_inv_2 '.' SPACE $0))))))",
        "(lam (prev_dc_inv_8 $0 SPACE))",
        "(lam (prev_dc_inv_8 (map (lam $0) $0) SPACE))",
        "(lam (cdr (fold (prev_dc_inv_8 $0 LPAREN) $0 (lam (lam (cdr $0))))))",
        "(lam (fold (prev_dc_inv_8 $0 LPAREN) (cdr $0) (lam (lam (cdr $0)))))",
        "(lam (prev_dc_inv_8 $0 LPAREN))",
        "(lam (prev_dc_inv_8 (map (lam $0) $0) LPAREN))",
        "(lam (prev_dc_inv_8 (cdr (fold (prev_dc_inv_8 $0 LPAREN) $0 (lam (lam (cdr $0))))) LPAREN))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_7 ',' $0 (cdr (fold (prev_dc_inv_8 $0 LPAREN) $0 (lam (lam (cdr $0)))))) LPAREN))",
        "(lam (prev_dc_inv_8 $0 RPAREN))",
        "(lam (prev_dc_inv_8 (map (lam $0) $0) RPAREN))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_7 RPAREN $0 (cdr (fold (prev_dc_inv_8 $0 RPAREN) $0 (lam (lam (cdr $0)))))) RPAREN))",
        "(lam (prev_dc_inv_8 $0 '-'))",
        "(lam (prev_dc_inv_8 (map (lam $0) $0) '-'))",
        "(fn_14 (prev_dc_inv_7 '.'))",
        "(lam (lam (prev_dc_inv_3 (cons '.' $0) $1)))",
        "(fn_14 (prev_dc_inv_7 ','))",
        "(lam (lam (prev_dc_inv_7 ',' $0 (map (lam $0) $1))))",
        "(fn_14 (prev_dc_inv_7 SPACE))",
        "(lam (lam (prev_dc_inv_3 (cons SPACE $0) $1)))",
        "(fn_14 (prev_dc_inv_7 LPAREN))",
        "(lam (lam (prev_dc_inv_7 LPAREN $0 (map (lam $0) $1))))",
        "(fn_14 (prev_dc_inv_7 RPAREN))",
        "(lam (lam (prev_dc_inv_3 (cons RPAREN $0) $1)))",
        "(fn_14 (prev_dc_inv_7 '-'))",
        "(lam (lam (prev_dc_inv_3 (cons '-' $0) $1)))",
        "(lam (lam (prev_dc_inv_10 SPACE $0 SPACE $1)))",
        "(lam (lam (prev_dc_inv_7 SPACE $0 (prev_dc_inv_7 SPACE empty $1))))",
        "(lam (lam (prev_dc_inv_10 SPACE $0 '.' $1)))",
        "(lam (lam (prev_dc_inv_7 '.' (cons SPACE $0) $1)))",
        "(lam (lam (prev_dc_inv_10 ',' $0 LPAREN $1)))",
        "(lam (lam (prev_dc_inv_10 ',' (map (lam $0) $0) LPAREN $1)))",
        "(lam (lam (prev_dc_inv_10 '.' $0 '.' $1)))",
        "(lam (lam (prev_dc_inv_10 '.' $0 '.' (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_10 '-' $0 '.' $1)))",
        "(lam (lam (prev_dc_inv_7 '.' (cons '-' $0) $1)))",
        "(lam (lam (prev_dc_inv_10 '-' $0 SPACE $1)))",
        "(lam (lam (prev_dc_inv_7 '-' $0 (prev_dc_inv_7 SPACE empty $1))))",
        "(lam (prev_dc_inv_4 $0 (lam (prev_dc_inv_0 $0))))",
        "(lam (prev_dc_inv_4 $0 (lam (prev_dc_inv_0 (range (length $0))))))",
        "(lam (prev_dc_inv_13 $0 (lam (range (- $0 1)))))",
        "(lam (prev_dc_inv_13 (prev_dc_inv_9 $0) (lam (cdr (range $0)))))",
        "(lam (prev_dc_inv_4 $0 (lam (prev_dc_inv_0 (cdr (cdr $0))))))",
        "(lam (prev_dc_inv_4 $0 (lam (empty? (prev_dc_inv_2 '.' '-' (cdr (cdr (cdr (cdr $0)))))))))",
        "(lam (prev_dc_inv_13 $0 (lam (range $0))))",
        "(lam (map (lam (index $0 $1)) (range (length (prev_dc_inv_11 $0 (prev_dc_inv_9 $0))))))",
        "(lam (prev_dc_inv_13 $0 (lam (range (- (length (cdr $1)) $0)))))",
        "(lam (prev_dc_inv_13 $0 (lam (range (- (length $1) (+ $0 1))))))",
        "(lam (prev_dc_inv_13 $0 (lam (range (+ $0 1)))))",
        "(lam (prev_dc_inv_13 $0 (lam (range (+ 1 $0)))))",
        "(lam (prev_dc_inv_1 $0 '.'))",
        "(lam (prev_dc_inv_1 (prev_dc_inv_1 $0 SPACE) '.'))",
        "(lam (prev_dc_inv_1 $0 SPACE))",
        "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
        "(lam (prev_dc_inv_1 $0 RPAREN))",
        "(lam (prev_dc_inv_1 (prev_dc_inv_1 $0 SPACE) RPAREN))",
        "(lam (prev_dc_inv_1 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(fn_14 prev_dc_inv_11)",
        "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 '.'))))",
        "(fn_14 prev_dc_inv_11)",
        "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 '.'))))",
        "(fn_14 prev_dc_inv_11)",
        "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 SPACE))))",
        "(fn_14 prev_dc_inv_11)",
        "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 SPACE))))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_2 (car $0) (index (+ (length (prev_dc_inv_8 $0 LPAREN)) 1) $0) $0) $0))",
        "(fn_14 prev_dc_inv_11)",
        "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 SPACE))))",
        "(fn_14 prev_dc_inv_11)",
        "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 SPACE))))",
        "(fn_14 prev_dc_inv_3)",
        "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
        "(fn_14 prev_dc_inv_3)",
        "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
        "(fn_14 prev_dc_inv_3)",
        "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
        "(fn_14 prev_dc_inv_3)",
        "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
        "(fn_14 prev_dc_inv_3)",
        "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_12 $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_3 $0 STRING))",
        "(lam (prev_dc_inv_12 $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_3 $0 STRING))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_3 STRING $0))",
        "(lam (prev_dc_inv_12 $0))",
        "(lam (prev_dc_inv_6 (prev_dc_inv_8 $0 SPACE)))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (map (lam $0) (prev_dc_inv_5 $0)))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_3 STRING $0))",
        "(lam (prev_dc_inv_12 $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (cons LPAREN (prev_dc_inv_7 RPAREN empty $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (map (lam $0) (prev_dc_inv_9 $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' RPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' RPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' '.' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' '.' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN SPACE $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN SPACE $0)))",
        "(lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0) '.') $0 (lambda (lambda (cdr $0)))))",
        "(lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0) '.') $0 (lambda (lambda (cdr (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' $1 $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 '.'))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0) SPACE) $0 (lambda (lambda (cdr $0)))))",
        "(lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0) SPACE) $0 (lambda (lambda (cdr (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' SPACE $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (map (lambda $0) $0) SPACE))",
        "(lambda (cdr (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 LPAREN) $0 (lambda (lambda (cdr $0))))))",
        "(lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 LPAREN) (cdr $0) (lambda (lambda (cdr $0)))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 LPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (map (lambda $0) $0) LPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (cdr (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 LPAREN) $0 (lambda (lambda (cdr $0))))) LPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 (cdr (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 LPAREN) $0 (lambda (lambda (cdr $0)))))) LPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 RPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (map (lambda $0) $0) RPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN $0 (cdr (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 RPAREN) $0 (lambda (lambda (cdr $0)))))) RPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 '-'))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (map (lambda $0) $0) '-'))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.'))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '.' $0) $1)))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ','))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 (map (lambda $0) $1))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons SPACE $0) $1)))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 (map (lambda $0) $1))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN $0) $1)))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '-'))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '-' $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) SPACE $0 SPACE $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) SPACE $0 '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons SPACE $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) ',' $0 LPAREN $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) ',' (map (lambda $0) $0) LPAREN $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '.' $0 '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '.' $0 '.' (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '-' $0 '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons '-' $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '-' $0 SPACE $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '-' $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
        "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (empty? (cdr (cdr $0)))) $0))))",
        "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (empty? (cdr (cdr $0)))) (range (length $0))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (- $0 1)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0) (lambda (cdr (range $0)))))",
        "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (empty? (cdr (cdr $0)))) (cdr (cdr $0))))))",
        "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (empty? (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' '-' (cdr (cdr (cdr (cdr $0)))))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range $0))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (- (length (cdr $1)) $0)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (- (length $1) (+ $0 1))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (+ $0 1)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (+ 1 $0)))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.'))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE) '.'))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
        "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 RPAREN))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE) RPAREN))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 SPACE))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 SPACE))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) (car $0) (index (+ (length (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 LPAREN)) 1) $0) $0) $0))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 SPACE))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 SPACE))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(#(lambda (lambda (lambda ($2 $0 $1)))) #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (map (lambda $0) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
        "(lambda (map (lambda $0) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) (map (lambda $0) $0)))"
      ],
      "utility": 1547,
      "expected_cost": 25659,
      "final_cost": 25659,
      "multiplier": 1.0682411629447757,
      "multiplier_wrt_orig": 1.0682411629447757,
      "num_uses": 17,
      "uses": [
        {
          "fn_14 prev_dc_inv_11": "(lam (lam (prev_dc_inv_11 $0 $1)))"
        },
        {
          "fn_14 prev_dc_inv_3": "(lam (lam (prev_dc_inv_3 $0 $1)))"
        },
        {
          "fn_14 (prev_dc_inv_7 ',')": "(lam (lam (prev_dc_inv_7 ',' $0 $1)))"
        },
        {
          "fn_14 (prev_dc_inv_7 '-')": "(lam (lam (prev_dc_inv_7 '-' $0 $1)))"
        },
        {
          "fn_14 (prev_dc_inv_7 '.')": "(lam (lam (prev_dc_inv_7 '.' $0 $1)))"
        },
        {
          "fn_14 (prev_dc_inv_7 LPAREN)": "(lam (lam (prev_dc_inv_7 LPAREN $0 $1)))"
        },
        {
          "fn_14 (prev_dc_inv_7 RPAREN)": "(lam (lam (prev_dc_inv_7 RPAREN $0 $1)))"
        },
        {
          "fn_14 (prev_dc_inv_7 SPACE)": "(lam (lam (prev_dc_inv_7 SPACE $0 $1)))"
        }
      ]
    },
    {
      "body": "(fold (prev_dc_inv_8 #2 #1) #0 (lam (lam (cdr $0))))",
      "dreamcoder": "#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $1) $2 (lambda (lambda (cdr $0)))))))",
      "arity": 3,
      "name": "fn_15",
      "rewritten": [
        "(lam (prev_dc_inv_2 ',' LPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_2 ',' LPAREN $0)))",
        "(lam (prev_dc_inv_2 '.' RPAREN $0))",
        "(lam (prev_dc_inv_2 '.' RPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 '-' ',' $0))",
        "(lam (prev_dc_inv_2 '-' ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 ',' '.' $0))",
        "(lam (prev_dc_inv_2 ',' '.' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 LPAREN RPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_2 LPAREN RPAREN $0)))",
        "(lam (prev_dc_inv_2 SPACE LPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_2 SPACE LPAREN $0)))",
        "(lam (prev_dc_inv_2 LPAREN SPACE $0))",
        "(lam (map (lam $0) (prev_dc_inv_2 LPAREN SPACE $0)))",
        "(lam (fn_15 $0 '.' (prev_dc_inv_9 $0)))",
        "(lam (fold (prev_dc_inv_8 (prev_dc_inv_9 $0) '.') $0 (lam (lam (cdr (prev_dc_inv_2 ',' $1 $0))))))",
        "(lam (prev_dc_inv_8 $0 '.'))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lam (fn_15 $0 SPACE (prev_dc_inv_9 $0)))",
        "(lam (fold (prev_dc_inv_8 (prev_dc_inv_9 $0) SPACE) $0 (lam (lam (cdr (prev_dc_inv_2 '.' SPACE $0))))))",
        "(lam (prev_dc_inv_8 $0 SPACE))",
        "(lam (prev_dc_inv_8 (map (lam $0) $0) SPACE))",
        "(lam (cdr (fn_15 $0 LPAREN $0)))",
        "(lam (fn_15 (cdr $0) LPAREN $0))",
        "(lam (prev_dc_inv_8 $0 LPAREN))",
        "(lam (prev_dc_inv_8 (map (lam $0) $0) LPAREN))",
        "(lam (prev_dc_inv_8 (cdr (fn_15 $0 LPAREN $0)) LPAREN))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_7 ',' $0 (cdr (fn_15 $0 LPAREN $0))) LPAREN))",
        "(lam (prev_dc_inv_8 $0 RPAREN))",
        "(lam (prev_dc_inv_8 (map (lam $0) $0) RPAREN))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_7 RPAREN $0 (cdr (fn_15 $0 RPAREN $0))) RPAREN))",
        "(lam (prev_dc_inv_8 $0 '-'))",
        "(lam (prev_dc_inv_8 (map (lam $0) $0) '-'))",
        "(fn_14 (prev_dc_inv_7 '.'))",
        "(lam (lam (prev_dc_inv_3 (cons '.' $0) $1)))",
        "(fn_14 (prev_dc_inv_7 ','))",
        "(lam (lam (prev_dc_inv_7 ',' $0 (map (lam $0) $1))))",
        "(fn_14 (prev_dc_inv_7 SPACE))",
        "(lam (lam (prev_dc_inv_3 (cons SPACE $0) $1)))",
        "(fn_14 (prev_dc_inv_7 LPAREN))",
        "(lam (lam (prev_dc_inv_7 LPAREN $0 (map (lam $0) $1))))",
        "(fn_14 (prev_dc_inv_7 RPAREN))",
        "(lam (lam (prev_dc_inv_3 (cons RPAREN $0) $1)))",
        "(fn_14 (prev_dc_inv_7 '-'))",
        "(lam (lam (prev_dc_inv_3 (cons '-' $0) $1)))",
        "(lam (lam (prev_dc_inv_10 SPACE $0 SPACE $1)))",
        "(lam (lam (prev_dc_inv_7 SPACE $0 (prev_dc_inv_7 SPACE empty $1))))",
        "(lam (lam (prev_dc_inv_10 SPACE $0 '.' $1)))",
        "(lam (lam (prev_dc_inv_7 '.' (cons SPACE $0) $1)))",
        "(lam (lam (prev_dc_inv_10 ',' $0 LPAREN $1)))",
        "(lam (lam (prev_dc_inv_10 ',' (map (lam $0) $0) LPAREN $1)))",
        "(lam (lam (prev_dc_inv_10 '.' $0 '.' $1)))",
        "(lam (lam (prev_dc_inv_10 '.' $0 '.' (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_10 '-' $0 '.' $1)))",
        "(lam (lam (prev_dc_inv_7 '.' (cons '-' $0) $1)))",
        "(lam (lam (prev_dc_inv_10 '-' $0 SPACE $1)))",
        "(lam (lam (prev_dc_inv_7 '-' $0 (prev_dc_inv_7 SPACE empty $1))))",
        "(lam (prev_dc_inv_4 $0 (lam (prev_dc_inv_0 $0))))",
        "(lam (prev_dc_inv_4 $0 (lam (prev_dc_inv_0 (range (length $0))))))",
        "(lam (prev_dc_inv_13 $0 (lam (range (- $0 1)))))",
        "(lam (prev_dc_inv_13 (prev_dc_inv_9 $0) (lam (cdr (range $0)))))",
        "(lam (prev_dc_inv_4 $0 (lam (prev_dc_inv_0 (cdr (cdr $0))))))",
        "(lam (prev_dc_inv_4 $0 (lam (empty? (prev_dc_inv_2 '.' '-' (cdr (cdr (cdr (cdr $0)))))))))",
        "(lam (prev_dc_inv_13 $0 (lam (range $0))))",
        "(lam (map (lam (index $0 $1)) (range (length (prev_dc_inv_11 $0 (prev_dc_inv_9 $0))))))",
        "(lam (prev_dc_inv_13 $0 (lam (range (- (length (cdr $1)) $0)))))",
        "(lam (prev_dc_inv_13 $0 (lam (range (- (length $1) (+ $0 1))))))",
        "(lam (prev_dc_inv_13 $0 (lam (range (+ $0 1)))))",
        "(lam (prev_dc_inv_13 $0 (lam (range (+ 1 $0)))))",
        "(lam (prev_dc_inv_1 $0 '.'))",
        "(lam (prev_dc_inv_1 (prev_dc_inv_1 $0 SPACE) '.'))",
        "(lam (prev_dc_inv_1 $0 SPACE))",
        "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
        "(lam (prev_dc_inv_1 $0 RPAREN))",
        "(lam (prev_dc_inv_1 (prev_dc_inv_1 $0 SPACE) RPAREN))",
        "(lam (prev_dc_inv_1 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(fn_14 prev_dc_inv_11)",
        "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 '.'))))",
        "(fn_14 prev_dc_inv_11)",
        "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 '.'))))",
        "(fn_14 prev_dc_inv_11)",
        "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 SPACE))))",
        "(fn_14 prev_dc_inv_11)",
        "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 SPACE))))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_2 (car $0) (index (+ (length (prev_dc_inv_8 $0 LPAREN)) 1) $0) $0) $0))",
        "(fn_14 prev_dc_inv_11)",
        "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 SPACE))))",
        "(fn_14 prev_dc_inv_11)",
        "(lam (lam (prev_dc_inv_11 $0 (prev_dc_inv_1 $1 SPACE))))",
        "(fn_14 prev_dc_inv_3)",
        "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
        "(fn_14 prev_dc_inv_3)",
        "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
        "(fn_14 prev_dc_inv_3)",
        "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
        "(fn_14 prev_dc_inv_3)",
        "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
        "(fn_14 prev_dc_inv_3)",
        "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_12 $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_3 $0 STRING))",
        "(lam (prev_dc_inv_12 $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_3 $0 STRING))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_3 STRING $0))",
        "(lam (prev_dc_inv_12 $0))",
        "(lam (prev_dc_inv_6 (prev_dc_inv_8 $0 SPACE)))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (map (lam $0) (prev_dc_inv_5 $0)))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (prev_dc_inv_6 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_3 STRING $0))",
        "(lam (prev_dc_inv_12 $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_6 $0) SPACE))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (cons LPAREN (prev_dc_inv_7 RPAREN empty $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (map (lam $0) (prev_dc_inv_9 $0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' RPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' RPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' '.' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' '.' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN SPACE $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN SPACE $0)))",
        "(lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $1) $2 (lambda (lambda (cdr $0))))))) $0 '.' (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))",
        "(lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0) '.') $0 (lambda (lambda (cdr (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' $1 $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 '.'))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $1) $2 (lambda (lambda (cdr $0))))))) $0 SPACE (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))",
        "(lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0) SPACE) $0 (lambda (lambda (cdr (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' SPACE $0))))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (map (lambda $0) $0) SPACE))",
        "(lambda (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $1) $2 (lambda (lambda (cdr $0))))))) $0 LPAREN $0)))",
        "(lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $1) $2 (lambda (lambda (cdr $0))))))) (cdr $0) LPAREN $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 LPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (map (lambda $0) $0) LPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $1) $2 (lambda (lambda (cdr $0))))))) $0 LPAREN $0)) LPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $1) $2 (lambda (lambda (cdr $0))))))) $0 LPAREN $0))) LPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 RPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (map (lambda $0) $0) RPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN $0 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $1) $2 (lambda (lambda (cdr $0))))))) $0 RPAREN $0))) RPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 '-'))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (map (lambda $0) $0) '-'))",
        "(fn_14 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.'))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '.' $0) $1)))",
        "(fn_14 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ','))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 (map (lambda $0) $1))))",
        "(fn_14 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons SPACE $0) $1)))",
        "(fn_14 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 (map (lambda $0) $1))))",
        "(fn_14 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN $0) $1)))",
        "(fn_14 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '-'))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '-' $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) SPACE $0 SPACE $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) SPACE $0 '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons SPACE $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) ',' $0 LPAREN $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) ',' (map (lambda $0) $0) LPAREN $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '.' $0 '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '.' $0 '.' (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '-' $0 '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons '-' $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '-' $0 SPACE $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '-' $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
        "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (empty? (cdr (cdr $0)))) $0))))",
        "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (empty? (cdr (cdr $0)))) (range (length $0))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (- $0 1)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0) (lambda (cdr (range $0)))))",
        "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (empty? (cdr (cdr $0)))) (cdr (cdr $0))))))",
        "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (empty? (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' '-' (cdr (cdr (cdr (cdr $0)))))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range $0))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (- (length (cdr $1)) $0)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (- (length $1) (+ $0 1))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (+ $0 1)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (+ 1 $0)))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.'))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE) '.'))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
        "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 RPAREN))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE) RPAREN))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(fn_14 #(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
        "(fn_14 #(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
        "(fn_14 #(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 SPACE))))",
        "(fn_14 #(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 SPACE))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) (car $0) (index (+ (length (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 LPAREN)) 1) $0) $0) $0))",
        "(fn_14 #(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 SPACE))))",
        "(fn_14 #(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 SPACE))))",
        "(fn_14 #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(fn_14 #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(fn_14 #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(fn_14 #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(fn_14 #(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (map (lambda $0) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
        "(lambda (map (lambda $0) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) (map (lambda $0) $0)))"
      ],
      "utility": 1117,
      "expected_cost": 24134,
      "final_cost": 24134,
      "multiplier": 1.0631888621861274,
      "multiplier_wrt_orig": 1.1357421065716418,
      "num_uses": 7,
      "uses": [
        {
          "fn_15 $0 LPAREN $0": "(fold (prev_dc_inv_8 $0 LPAREN) $0 (lam (lam (cdr $0))))"
        },
        {
          "fn_15 (cdr $0) LPAREN $0": "(fold (prev_dc_inv_8 $0 LPAREN) (cdr $0) (lam (lam (cdr $0))))"
        },
        {
          "fn_15 $0 RPAREN $0": "(fold (prev_dc_inv_8 $0 RPAREN) $0 (lam (lam (cdr $0))))"
        },
        {
          "fn_15 $0 '.' (prev_dc_inv_9 $0)": "(fold (prev_dc_inv_8 (prev_dc_inv_9 $0) '.') $0 (lam (lam (cdr $0))))"
        },
        {
          "fn_15 $0 SPACE (prev_dc_inv_9 $0)": "(fold (prev_dc_inv_8 (prev_dc_inv_9 $0) SPACE) $0 (lam (lam (cdr $0))))"
        }
      ]
    }
  ]
}