{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/bench002_it2.json --max-arity=3 --threads=1 --iterations=3 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/out/stitch/2022-10-04_19-35-49/raw/bench002_it2.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/bench002_it2.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/out/stitch/2022-10-04_19-35-49/raw/bench002_it2.json",
    "iterations": 3,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 19423,
  "original": [
    "(lam (map (lam (if (char-eq? $0 LPAREN) RPAREN $0)) $0))",
    "(lam (map (lam (if (char-eq? LPAREN $0) RPAREN $0)) $0))",
    "(lam (map (lam (if (char-eq? $0 SPACE) LPAREN $0)) $0))",
    "(lam (map (lam (if (char-eq? SPACE $0) LPAREN $0)) $0))",
    "(lam (unfold $0 (lam (char-eq? '.' (car $0))) (lam (car $0)) (lam (cdr $0))))",
    "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
    "(lam (lam (prev_dc_inv_0 (cons ',' $0) $1)))",
    "(lam (lam (prev_dc_inv_0 (map (lam $0) (cons ',' $0)) $1)))",
    "(lam (lam (prev_dc_inv_0 (cons LPAREN $0) $1)))",
    "(lam (lam (prev_dc_inv_0 (cons LPAREN $0) (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_0 (cons LPAREN (cons ',' $0)) $1)))",
    "(lam (lam (prev_dc_inv_0 (cons LPAREN (cons ',' (map (lam $0) $0))) $1)))",
    "(lam (lam (prev_dc_inv_0 (cons '.' (cons '.' $0)) $1)))",
    "(lam (lam (prev_dc_inv_0 (cons '.' (cons '.' $0)) (map (lam $0) $1))))",
    "(lam (cons (car $0) (cons SPACE empty)))",
    "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
    "(lam (cons (car $0) (cons '-' empty)))",
    "(lam (cons (car $0) (map (lam '-') (range 1))))",
    "(lam (lam (prev_dc_inv_0 $0 $1)))",
    "(lam (lam (prev_dc_inv_0 $0 (map (lam $0) $1))))",
    "(lam (prev_dc_inv_0 $0 STRING))",
    "(lam (prev_dc_inv_0 (map (lam $0) $0) STRING))",
    "(lam (prev_dc_inv_1 $0))",
    "(lam (prev_dc_inv_1 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_1 $0))",
    "(lam (map (lam $0) (prev_dc_inv_1 $0)))",
    "(lam (prev_dc_inv_0 $0 STRING))",
    "(lam (prev_dc_inv_0 (map (lam $0) $0) STRING))",
    "(lam (prev_dc_inv_1 $0))",
    "(lam (prev_dc_inv_1 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_0 (cons RPAREN empty) (cons LPAREN $0)))",
    "(lam (cons LPAREN (prev_dc_inv_0 (cons RPAREN empty) $0)))"
  ],
  "invs": [
    {
      "body": "(lam (map (lam (if (char-eq? $0 #1) #0 $0)) $0))",
      "dreamcoder": "#(lambda (lambda (lambda (map (lambda (if (char-eq? $0 $2) $3 $0)) $0))))",
      "arity": 2,
      "name": "fn_2",
      "rewritten": [
        "(fn_2 RPAREN LPAREN)",
        "(lam (map (lam (if (char-eq? LPAREN $0) RPAREN $0)) $0))",
        "(fn_2 LPAREN SPACE)",
        "(lam (map (lam (if (char-eq? SPACE $0) LPAREN $0)) $0))",
        "(lam (unfold $0 (lam (char-eq? '.' (car $0))) (lam (car $0)) (lam (cdr $0))))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lam (lam (prev_dc_inv_0 (cons ',' $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (map (lam $0) (cons ',' $0)) $1)))",
        "(lam (lam (prev_dc_inv_0 (cons LPAREN $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (cons LPAREN $0) (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_0 (cons LPAREN (cons ',' $0)) $1)))",
        "(lam (lam (prev_dc_inv_0 (cons LPAREN (cons ',' (map (lam $0) $0))) $1)))",
        "(lam (lam (prev_dc_inv_0 (cons '.' (cons '.' $0)) $1)))",
        "(lam (lam (prev_dc_inv_0 (cons '.' (cons '.' $0)) (map (lam $0) $1))))",
        "(lam (cons (car $0) (cons SPACE empty)))",
        "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
        "(lam (cons (car $0) (cons '-' empty)))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (prev_dc_inv_0 $0 $1)))",
        "(lam (lam (prev_dc_inv_0 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_0 $0 STRING))",
        "(lam (prev_dc_inv_0 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (prev_dc_inv_1 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 $0)))",
        "(lam (prev_dc_inv_0 $0 STRING))",
        "(lam (prev_dc_inv_0 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (prev_dc_inv_1 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_0 (cons RPAREN empty) (cons LPAREN $0)))",
        "(lam (cons LPAREN (prev_dc_inv_0 (cons RPAREN empty) $0)))"
      ],
      "rewritten_dreamcoder": [
        "(#(lambda (lambda (lambda (map (lambda (if (char-eq? $0 $2) $3 $0)) $0)))) RPAREN LPAREN)",
        "(lambda (map (lambda (if (char-eq? LPAREN $0) RPAREN $0)) $0))",
        "(#(lambda (lambda (lambda (map (lambda (if (char-eq? $0 $2) $3 $0)) $0)))) LPAREN SPACE)",
        "(lambda (map (lambda (if (char-eq? SPACE $0) LPAREN $0)) $0))",
        "(lambda (unfold $0 (lambda (char-eq? '.' (car $0))) (lambda (car $0)) (lambda (cdr $0))))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons ',' $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) (cons ',' $0)) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN (cons ',' $0)) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN (cons ',' (map (lambda $0) $0))) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '.' (cons '.' $0)) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '.' (cons '.' $0)) (map (lambda $0) $1))))",
        "(lambda (cons (car $0) (cons SPACE empty)))",
        "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
        "(lambda (cons (car $0) (cons '-' empty)))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (map (lambda $0) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))"
      ],
      "utility": 405,
      "expected_cost": 7480,
      "final_cost": 7480,
      "multiplier": 1.1355614973262032,
      "multiplier_wrt_orig": 1.1355614973262032,
      "num_uses": 2,
      "uses": [
        {
          "fn_2 RPAREN LPAREN": "(lam (map (lam (if (char-eq? $0 LPAREN) RPAREN $0)) $0))"
        },
        {
          "fn_2 LPAREN SPACE": "(lam (map (lam (if (char-eq? $0 SPACE) LPAREN $0)) $0))"
        }
      ]
    },
    {
      "body": "(lam (lam (prev_dc_inv_0 (#1 (cons #0 $0)) $1)))",
      "dreamcoder": "#(lambda (lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) ($2 (cons $3 $0)) $1)))))",
      "arity": 2,
      "name": "fn_3",
      "rewritten": [
        "(fn_2 RPAREN LPAREN)",
        "(lam (map (lam (if (char-eq? LPAREN $0) RPAREN $0)) $0))",
        "(fn_2 LPAREN SPACE)",
        "(lam (map (lam (if (char-eq? SPACE $0) LPAREN $0)) $0))",
        "(lam (unfold $0 (lam (char-eq? '.' (car $0))) (lam (car $0)) (lam (cdr $0))))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lam (lam (prev_dc_inv_0 (cons ',' $0) $1)))",
        "(fn_3 ',' (map (lam $0)))",
        "(lam (lam (prev_dc_inv_0 (cons LPAREN $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (cons LPAREN $0) (map (lam $0) $1))))",
        "(fn_3 ',' (cons LPAREN))",
        "(lam (lam (prev_dc_inv_0 (cons LPAREN (cons ',' (map (lam $0) $0))) $1)))",
        "(fn_3 '.' (cons '.'))",
        "(lam (lam (prev_dc_inv_0 (cons '.' (cons '.' $0)) (map (lam $0) $1))))",
        "(lam (cons (car $0) (cons SPACE empty)))",
        "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
        "(lam (cons (car $0) (cons '-' empty)))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (prev_dc_inv_0 $0 $1)))",
        "(lam (lam (prev_dc_inv_0 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_0 $0 STRING))",
        "(lam (prev_dc_inv_0 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (prev_dc_inv_1 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 $0)))",
        "(lam (prev_dc_inv_0 $0 STRING))",
        "(lam (prev_dc_inv_0 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (prev_dc_inv_1 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_0 (cons RPAREN empty) (cons LPAREN $0)))",
        "(lam (cons LPAREN (prev_dc_inv_0 (cons RPAREN empty) $0)))"
      ],
      "rewritten_dreamcoder": [
        "(fn_2 RPAREN LPAREN)",
        "(lambda (map (lambda (if (char-eq? LPAREN $0) RPAREN $0)) $0))",
        "(fn_2 LPAREN SPACE)",
        "(lambda (map (lambda (if (char-eq? SPACE $0) LPAREN $0)) $0))",
        "(lambda (unfold $0 (lambda (char-eq? '.' (car $0))) (lambda (car $0)) (lambda (cdr $0))))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons ',' $0) $1)))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) ($2 (cons $3 $0)) $1))))) ',' (map (lambda $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) (map (lambda $0) $1))))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) ($2 (cons $3 $0)) $1))))) ',' (cons LPAREN))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN (cons ',' (map (lambda $0) $0))) $1)))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) ($2 (cons $3 $0)) $1))))) '.' (cons '.'))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '.' (cons '.' $0)) (map (lambda $0) $1))))",
        "(lambda (cons (car $0) (cons SPACE empty)))",
        "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
        "(lambda (cons (car $0) (cons '-' empty)))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (map (lambda $0) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))"
      ],
      "utility": 305,
      "expected_cost": 6768,
      "final_cost": 6768,
      "multiplier": 1.1052009456264775,
      "multiplier_wrt_orig": 1.2550236406619386,
      "num_uses": 3,
      "uses": [
        {
          "fn_3 '.' (cons '.')": "(lam (lam (prev_dc_inv_0 (cons '.' (cons '.' $0)) $1)))"
        },
        {
          "fn_3 ',' (cons LPAREN)": "(lam (lam (prev_dc_inv_0 (cons LPAREN (cons ',' $0)) $1)))"
        },
        {
          "fn_3 ',' (map (lam $0))": "(lam (lam (prev_dc_inv_0 (map (lam $0) (cons ',' $0)) $1)))"
        }
      ]
    },
    {
      "body": "(lam (cons (car $0) (cons #0 empty)))",
      "dreamcoder": "#(lambda (lambda (cons (car $0) (cons $1 empty))))",
      "arity": 1,
      "name": "fn_4",
      "rewritten": [
        "(fn_2 RPAREN LPAREN)",
        "(lam (map (lam (if (char-eq? LPAREN $0) RPAREN $0)) $0))",
        "(fn_2 LPAREN SPACE)",
        "(lam (map (lam (if (char-eq? SPACE $0) LPAREN $0)) $0))",
        "(lam (unfold $0 (lam (char-eq? '.' (car $0))) (lam (car $0)) (lam (cdr $0))))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lam (lam (prev_dc_inv_0 (cons ',' $0) $1)))",
        "(fn_3 ',' (map (lam $0)))",
        "(lam (lam (prev_dc_inv_0 (cons LPAREN $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (cons LPAREN $0) (map (lam $0) $1))))",
        "(fn_3 ',' (cons LPAREN))",
        "(lam (lam (prev_dc_inv_0 (cons LPAREN (cons ',' (map (lam $0) $0))) $1)))",
        "(fn_3 '.' (cons '.'))",
        "(lam (lam (prev_dc_inv_0 (cons '.' (cons '.' $0)) (map (lam $0) $1))))",
        "(fn_4 SPACE)",
        "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
        "(fn_4 '-')",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (prev_dc_inv_0 $0 $1)))",
        "(lam (lam (prev_dc_inv_0 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_0 $0 STRING))",
        "(lam (prev_dc_inv_0 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (prev_dc_inv_1 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 $0)))",
        "(lam (prev_dc_inv_0 $0 STRING))",
        "(lam (prev_dc_inv_0 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (prev_dc_inv_1 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_0 (cons RPAREN empty) (cons LPAREN $0)))",
        "(lam (cons LPAREN (prev_dc_inv_0 (cons RPAREN empty) $0)))"
      ],
      "rewritten_dreamcoder": [
        "(fn_2 RPAREN LPAREN)",
        "(lambda (map (lambda (if (char-eq? LPAREN $0) RPAREN $0)) $0))",
        "(fn_2 LPAREN SPACE)",
        "(lambda (map (lambda (if (char-eq? SPACE $0) LPAREN $0)) $0))",
        "(lambda (unfold $0 (lambda (char-eq? '.' (car $0))) (lambda (car $0)) (lambda (cdr $0))))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons ',' $0) $1)))",
        "(fn_3 ',' (map (lambda $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) (map (lambda $0) $1))))",
        "(fn_3 ',' (cons LPAREN))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN (cons ',' (map (lambda $0) $0))) $1)))",
        "(fn_3 '.' (cons '.'))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '.' (cons '.' $0)) (map (lambda $0) $1))))",
        "(#(lambda (lambda (cons (car $0) (cons $1 empty)))) SPACE)",
        "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
        "(#(lambda (lambda (cons (car $0) (cons $1 empty)))) '-')",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (map (lambda $0) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))"
      ],
      "utility": 304,
      "expected_cost": 5958,
      "final_cost": 5958,
      "multiplier": 1.13595166163142,
      "multiplier_wrt_orig": 1.4256461899966433,
      "num_uses": 2,
      "uses": [
        {
          "fn_4 '-'": "(lam (cons (car $0) (cons '-' empty)))"
        },
        {
          "fn_4 SPACE": "(lam (cons (car $0) (cons SPACE empty)))"
        }
      ]
    }
  ]
}