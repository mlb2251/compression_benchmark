{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/bench003_it3.json --max-arity=3 --threads=1 --iterations=5 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/out/stitch/2022-10-04_19-35-49/raw/bench003_it3.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/bench003_it3.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T22.05.53/out/stitch/2022-10-04_19-35-49/raw/bench003_it3.json",
    "iterations": 5,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 27317,
  "original": [
    "(lam (prev_dc_inv_1 LPAREN RPAREN $0))",
    "(lam (map (lam $0) (prev_dc_inv_1 LPAREN RPAREN $0)))",
    "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
    "(lam (map (lam $0) (prev_dc_inv_1 SPACE LPAREN $0)))",
    "(lam (unfold $0 (lam (char-eq? '.' (car $0))) (lam (car $0)) (lam (cdr $0))))",
    "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
    "(lam (lam (prev_dc_inv_4 ',' $0 $1)))",
    "(lam (lam (prev_dc_inv_4 ',' $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_4 LPAREN $0 $1)))",
    "(lam (lam (prev_dc_inv_4 LPAREN $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_4 SPACE (cons SPACE $0) $1)))",
    "(lam (lam (prev_dc_inv_4 SPACE $0 (prev_dc_inv_4 SPACE empty $1))))",
    "(lam (lam (prev_dc_inv_4 LPAREN (cons ',' $0) $1)))",
    "(lam (lam (prev_dc_inv_4 LPAREN (cons ',' (map (lam $0) $0)) $1)))",
    "(lam (lam (prev_dc_inv_4 '.' (cons '.' $0) $1)))",
    "(lam (lam (prev_dc_inv_4 '.' (cons '.' $0) (map (lam $0) $1))))",
    "(lam (unfold $0 (lam (empty? (cdr (cdr (cdr (cdr $0)))))) (lam (car $0)) (lam (cdr $0))))",
    "(lam (unfold $0 (lam (empty? (prev_dc_inv_1 '.' '-' (cdr (cdr (cdr (cdr $0))))))) (lam (car $0)) (lam (cdr $0))))",
    "(lam (prev_dc_inv_0 $0 SPACE))",
    "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
    "(lam (prev_dc_inv_0 $0 '-'))",
    "(lam (cons (car $0) (map (lam '-') (range 1))))",
    "(lam (lam (prev_dc_inv_2 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 $1 '.'))))",
    "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
    "(lam (lam (prev_dc_inv_2 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 $1 '.'))))",
    "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
    "(lam (lam (prev_dc_inv_2 $0 $1)))",
    "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
    "(lam (prev_dc_inv_2 $0 STRING))",
    "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
    "(lam (prev_dc_inv_3 $0))",
    "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 (unfold $0 (lam (char-eq? SPACE (car $0))) (lam (car $0)) (lam (cdr $0))) STRING))",
    "(lam (unfold (prev_dc_inv_2 $0 STRING) (lam (char-eq? SPACE (car $0))) (lam (car $0)) (lam (cdr $0))))",
    "(lam (prev_dc_inv_3 $0))",
    "(lam (map (lam $0) (prev_dc_inv_3 $0)))",
    "(lam (prev_dc_inv_2 $0 STRING))",
    "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
    "(lam (prev_dc_inv_3 $0))",
    "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_4 RPAREN empty (cons LPAREN $0)))",
    "(lam (cons LPAREN (prev_dc_inv_4 RPAREN empty $0)))",
    "(lam (prev_dc_inv_4 RPAREN empty (cons LPAREN $0)))",
    "(lam (cons LPAREN (prev_dc_inv_4 RPAREN empty $0)))"
  ],
  "invs": [
    {
      "body": "(unfold #1 #0 (lam (car $0)) (lam (cdr $0)))",
      "dreamcoder": "#(lambda (lambda (unfold $0 $1 (lambda (car $0)) (lambda (cdr $0)))))",
      "arity": 2,
      "name": "fn_5",
      "rewritten": [
        "(lam (prev_dc_inv_1 LPAREN RPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 LPAREN RPAREN $0)))",
        "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 SPACE LPAREN $0)))",
        "(lam (fn_5 (lam (char-eq? '.' (car $0))) $0))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lam (lam (prev_dc_inv_4 ',' $0 $1)))",
        "(lam (lam (prev_dc_inv_4 ',' $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_4 LPAREN $0 $1)))",
        "(lam (lam (prev_dc_inv_4 LPAREN $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_4 SPACE (cons SPACE $0) $1)))",
        "(lam (lam (prev_dc_inv_4 SPACE $0 (prev_dc_inv_4 SPACE empty $1))))",
        "(lam (lam (prev_dc_inv_4 LPAREN (cons ',' $0) $1)))",
        "(lam (lam (prev_dc_inv_4 LPAREN (cons ',' (map (lam $0) $0)) $1)))",
        "(lam (lam (prev_dc_inv_4 '.' (cons '.' $0) $1)))",
        "(lam (lam (prev_dc_inv_4 '.' (cons '.' $0) (map (lam $0) $1))))",
        "(lam (fn_5 (lam (empty? (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lam (fn_5 (lam (empty? (prev_dc_inv_1 '.' '-' (cdr (cdr (cdr (cdr $0))))))) $0))",
        "(lam (prev_dc_inv_0 $0 SPACE))",
        "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (prev_dc_inv_2 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 $1 '.'))))",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (prev_dc_inv_2 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 $1 '.'))))",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 (fn_5 (lam (char-eq? SPACE (car $0))) $0) STRING))",
        "(lam (fn_5 (lam (char-eq? SPACE (car $0))) (prev_dc_inv_2 $0 STRING)))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (map (lam $0) (prev_dc_inv_3 $0)))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 RPAREN empty (cons LPAREN $0)))",
        "(lam (cons LPAREN (prev_dc_inv_4 RPAREN empty $0)))",
        "(lam (prev_dc_inv_4 RPAREN empty (cons LPAREN $0)))",
        "(lam (cons LPAREN (prev_dc_inv_4 RPAREN empty $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0)))",
        "(lambda (#(lambda (lambda (unfold $0 $1 (lambda (car $0)) (lambda (cdr $0))))) (lambda (char-eq? '.' (car $0))) $0))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE (cons SPACE $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN (cons ',' $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN (cons ',' (map (lambda $0) $0)) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons '.' $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons '.' $0) (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (unfold $0 $1 (lambda (car $0)) (lambda (cdr $0))))) (lambda (empty? (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lambda (#(lambda (lambda (unfold $0 $1 (lambda (car $0)) (lambda (cdr $0))))) (lambda (empty? (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' '-' (cdr (cdr (cdr (cdr $0))))))) $0))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
        "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (unfold $0 $1 (lambda (car $0)) (lambda (cdr $0))))) (lambda (char-eq? SPACE (car $0))) $0) STRING))",
        "(lambda (#(lambda (lambda (unfold $0 $1 (lambda (car $0)) (lambda (cdr $0))))) (lambda (char-eq? SPACE (car $0))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (map (lambda $0) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))"
      ],
      "utility": 710,
      "expected_cost": 10414,
      "final_cost": 10414,
      "multiplier": 1.1169579412329556,
      "multiplier_wrt_orig": 1.1169579412329556,
      "num_uses": 5,
      "uses": [
        {
          "fn_5 (lam (char-eq? '.' (car $0))) $0": "(unfold $0 (lam (char-eq? '.' (car $0))) (lam (car $0)) (lam (cdr $0)))"
        },
        {
          "fn_5 (lam (char-eq? SPACE (car $0))) $0": "(unfold $0 (lam (char-eq? SPACE (car $0))) (lam (car $0)) (lam (cdr $0)))"
        },
        {
          "fn_5 (lam (empty? (cdr (cdr (cdr (cdr $0)))))) $0": "(unfold $0 (lam (empty? (cdr (cdr (cdr (cdr $0)))))) (lam (car $0)) (lam (cdr $0)))"
        },
        {
          "fn_5 (lam (empty? (prev_dc_inv_1 '.' '-' (cdr (cdr (cdr (cdr $0))))))) $0": "(unfold $0 (lam (empty? (prev_dc_inv_1 '.' '-' (cdr (cdr (cdr (cdr $0))))))) (lam (car $0)) (lam (cdr $0)))"
        },
        {
          "fn_5 (lam (char-eq? SPACE (car $0))) (prev_dc_inv_2 $0 STRING)": "(unfold (prev_dc_inv_2 $0 STRING) (lam (char-eq? SPACE (car $0))) (lam (car $0)) (lam (cdr $0)))"
        }
      ]
    },
    {
      "body": "(lam (lam (prev_dc_inv_2 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 $1 '.'))))",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
      "arity": 0,
      "name": "fn_6",
      "rewritten": [
        "(lam (prev_dc_inv_1 LPAREN RPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 LPAREN RPAREN $0)))",
        "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 SPACE LPAREN $0)))",
        "(lam (fn_5 (lam (char-eq? '.' (car $0))) $0))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lam (lam (prev_dc_inv_4 ',' $0 $1)))",
        "(lam (lam (prev_dc_inv_4 ',' $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_4 LPAREN $0 $1)))",
        "(lam (lam (prev_dc_inv_4 LPAREN $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_4 SPACE (cons SPACE $0) $1)))",
        "(lam (lam (prev_dc_inv_4 SPACE $0 (prev_dc_inv_4 SPACE empty $1))))",
        "(lam (lam (prev_dc_inv_4 LPAREN (cons ',' $0) $1)))",
        "(lam (lam (prev_dc_inv_4 LPAREN (cons ',' (map (lam $0) $0)) $1)))",
        "(lam (lam (prev_dc_inv_4 '.' (cons '.' $0) $1)))",
        "(lam (lam (prev_dc_inv_4 '.' (cons '.' $0) (map (lam $0) $1))))",
        "(lam (fn_5 (lam (empty? (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lam (fn_5 (lam (empty? (prev_dc_inv_1 '.' '-' (cdr (cdr (cdr (cdr $0))))))) $0))",
        "(lam (prev_dc_inv_0 $0 SPACE))",
        "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "fn_6",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "fn_6",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 (fn_5 (lam (char-eq? SPACE (car $0))) $0) STRING))",
        "(lam (fn_5 (lam (char-eq? SPACE (car $0))) (prev_dc_inv_2 $0 STRING)))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (map (lam $0) (prev_dc_inv_3 $0)))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 RPAREN empty (cons LPAREN $0)))",
        "(lam (cons LPAREN (prev_dc_inv_4 RPAREN empty $0)))",
        "(lam (prev_dc_inv_4 RPAREN empty (cons LPAREN $0)))",
        "(lam (cons LPAREN (prev_dc_inv_4 RPAREN empty $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0)))",
        "(lambda (fn_5 (lambda (char-eq? '.' (car $0))) $0))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE (cons SPACE $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN (cons ',' $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN (cons ',' (map (lambda $0) $0)) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons '.' $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons '.' $0) (map (lambda $0) $1))))",
        "(lambda (fn_5 (lambda (empty? (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lambda (fn_5 (lambda (empty? (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' '-' (cdr (cdr (cdr (cdr $0))))))) $0))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
        "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fn_5 (lambda (char-eq? SPACE (car $0))) $0) STRING))",
        "(lambda (fn_5 (lambda (char-eq? SPACE (car $0))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (map (lambda $0) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))"
      ],
      "utility": 508,
      "expected_cost": 9198,
      "final_cost": 9198,
      "multiplier": 1.132202652750598,
      "multiplier_wrt_orig": 1.2646227440747988,
      "num_uses": 2,
      "uses": [
        {
          "fn_6 ": "(lam (lam (prev_dc_inv_2 (prev_dc_inv_0 $0 '.') (prev_dc_inv_0 $1 '.'))))"
        }
      ]
    },
    {
      "body": "(lam (lam (prev_dc_inv_4 #1 (cons #0 $0) $1)))",
      "dreamcoder": "#(lambda (lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $2 (cons $3 $0) $1)))))",
      "arity": 2,
      "name": "fn_7",
      "rewritten": [
        "(lam (prev_dc_inv_1 LPAREN RPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 LPAREN RPAREN $0)))",
        "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 SPACE LPAREN $0)))",
        "(lam (fn_5 (lam (char-eq? '.' (car $0))) $0))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lam (lam (prev_dc_inv_4 ',' $0 $1)))",
        "(lam (lam (prev_dc_inv_4 ',' $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_4 LPAREN $0 $1)))",
        "(lam (lam (prev_dc_inv_4 LPAREN $0 (map (lam $0) $1))))",
        "(fn_7 SPACE SPACE)",
        "(lam (lam (prev_dc_inv_4 SPACE $0 (prev_dc_inv_4 SPACE empty $1))))",
        "(fn_7 ',' LPAREN)",
        "(lam (lam (prev_dc_inv_4 LPAREN (cons ',' (map (lam $0) $0)) $1)))",
        "(fn_7 '.' '.')",
        "(lam (lam (prev_dc_inv_4 '.' (cons '.' $0) (map (lam $0) $1))))",
        "(lam (fn_5 (lam (empty? (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lam (fn_5 (lam (empty? (prev_dc_inv_1 '.' '-' (cdr (cdr (cdr (cdr $0))))))) $0))",
        "(lam (prev_dc_inv_0 $0 SPACE))",
        "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "fn_6",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "fn_6",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 (fn_5 (lam (char-eq? SPACE (car $0))) $0) STRING))",
        "(lam (fn_5 (lam (char-eq? SPACE (car $0))) (prev_dc_inv_2 $0 STRING)))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (map (lam $0) (prev_dc_inv_3 $0)))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_4 RPAREN empty (cons LPAREN $0)))",
        "(lam (cons LPAREN (prev_dc_inv_4 RPAREN empty $0)))",
        "(lam (prev_dc_inv_4 RPAREN empty (cons LPAREN $0)))",
        "(lam (cons LPAREN (prev_dc_inv_4 RPAREN empty $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0)))",
        "(lambda (fn_5 (lambda (char-eq? '.' (car $0))) $0))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 (map (lambda $0) $1))))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $2 (cons $3 $0) $1))))) SPACE SPACE)",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $2 (cons $3 $0) $1))))) ',' LPAREN)",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN (cons ',' (map (lambda $0) $0)) $1)))",
        "(#(lambda (lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $2 (cons $3 $0) $1))))) '.' '.')",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons '.' $0) (map (lambda $0) $1))))",
        "(lambda (fn_5 (lambda (empty? (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lambda (fn_5 (lambda (empty? (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' '-' (cdr (cdr (cdr (cdr $0))))))) $0))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
        "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "fn_6",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "fn_6",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fn_5 (lambda (char-eq? SPACE (car $0))) $0) STRING))",
        "(lambda (fn_5 (lambda (char-eq? SPACE (car $0))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (map (lambda $0) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))"
      ],
      "utility": 508,
      "expected_cost": 8283,
      "final_cost": 8283,
      "multiplier": 1.1104672220210068,
      "multiplier_wrt_orig": 1.4043221055173247,
      "num_uses": 3,
      "uses": [
        {
          "fn_7 '.' '.'": "(lam (lam (prev_dc_inv_4 '.' (cons '.' $0) $1)))"
        },
        {
          "fn_7 ',' LPAREN": "(lam (lam (prev_dc_inv_4 LPAREN (cons ',' $0) $1)))"
        },
        {
          "fn_7 SPACE SPACE": "(lam (lam (prev_dc_inv_4 SPACE (cons SPACE $0) $1)))"
        }
      ]
    },
    {
      "body": "(lam (prev_dc_inv_4 RPAREN empty (cons LPAREN $0)))",
      "dreamcoder": "#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0)))",
      "arity": 0,
      "name": "fn_8",
      "rewritten": [
        "(lam (prev_dc_inv_1 LPAREN RPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 LPAREN RPAREN $0)))",
        "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 SPACE LPAREN $0)))",
        "(lam (fn_5 (lam (char-eq? '.' (car $0))) $0))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lam (lam (prev_dc_inv_4 ',' $0 $1)))",
        "(lam (lam (prev_dc_inv_4 ',' $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_4 LPAREN $0 $1)))",
        "(lam (lam (prev_dc_inv_4 LPAREN $0 (map (lam $0) $1))))",
        "(fn_7 SPACE SPACE)",
        "(lam (lam (prev_dc_inv_4 SPACE $0 (prev_dc_inv_4 SPACE empty $1))))",
        "(fn_7 ',' LPAREN)",
        "(lam (lam (prev_dc_inv_4 LPAREN (cons ',' (map (lam $0) $0)) $1)))",
        "(fn_7 '.' '.')",
        "(lam (lam (prev_dc_inv_4 '.' (cons '.' $0) (map (lam $0) $1))))",
        "(lam (fn_5 (lam (empty? (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lam (fn_5 (lam (empty? (prev_dc_inv_1 '.' '-' (cdr (cdr (cdr (cdr $0))))))) $0))",
        "(lam (prev_dc_inv_0 $0 SPACE))",
        "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "fn_6",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "fn_6",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 (fn_5 (lam (char-eq? SPACE (car $0))) $0) STRING))",
        "(lam (fn_5 (lam (char-eq? SPACE (car $0))) (prev_dc_inv_2 $0 STRING)))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (map (lam $0) (prev_dc_inv_3 $0)))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "fn_8",
        "(lam (cons LPAREN (prev_dc_inv_4 RPAREN empty $0)))",
        "fn_8",
        "(lam (cons LPAREN (prev_dc_inv_4 RPAREN empty $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0)))",
        "(lambda (fn_5 (lambda (char-eq? '.' (car $0))) $0))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 (map (lambda $0) $1))))",
        "(fn_7 SPACE SPACE)",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
        "(fn_7 ',' LPAREN)",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN (cons ',' (map (lambda $0) $0)) $1)))",
        "(fn_7 '.' '.')",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons '.' $0) (map (lambda $0) $1))))",
        "(lambda (fn_5 (lambda (empty? (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lambda (fn_5 (lambda (empty? (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' '-' (cdr (cdr (cdr (cdr $0))))))) $0))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
        "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "fn_6",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "fn_6",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (fn_5 (lambda (char-eq? SPACE (car $0))) $0) STRING))",
        "(lambda (fn_5 (lambda (char-eq? SPACE (car $0))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (map (lambda $0) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))",
        "#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))"
      ],
      "utility": 406,
      "expected_cost": 7271,
      "final_cost": 7271,
      "multiplier": 1.1391830559757943,
      "multiplier_wrt_orig": 1.5997799477375876,
      "num_uses": 2,
      "uses": [
        {
          "fn_8 ": "(lam (prev_dc_inv_4 RPAREN empty (cons LPAREN $0)))"
        }
      ]
    },
    {
      "body": "(fn_5 (lam (char-eq? #0 (car $0))))",
      "dreamcoder": "#(lambda (#(lambda (lambda (unfold $0 $1 (lambda (car $0)) (lambda (cdr $0))))) (lambda (char-eq? $1 (car $0)))))",
      "arity": 1,
      "name": "fn_9",
      "rewritten": [
        "(lam (prev_dc_inv_1 LPAREN RPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 LPAREN RPAREN $0)))",
        "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
        "(lam (map (lam $0) (prev_dc_inv_1 SPACE LPAREN $0)))",
        "(lam (fn_9 '.' $0))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lam (lam (prev_dc_inv_4 ',' $0 $1)))",
        "(lam (lam (prev_dc_inv_4 ',' $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_4 LPAREN $0 $1)))",
        "(lam (lam (prev_dc_inv_4 LPAREN $0 (map (lam $0) $1))))",
        "(fn_7 SPACE SPACE)",
        "(lam (lam (prev_dc_inv_4 SPACE $0 (prev_dc_inv_4 SPACE empty $1))))",
        "(fn_7 ',' LPAREN)",
        "(lam (lam (prev_dc_inv_4 LPAREN (cons ',' (map (lam $0) $0)) $1)))",
        "(fn_7 '.' '.')",
        "(lam (lam (prev_dc_inv_4 '.' (cons '.' $0) (map (lam $0) $1))))",
        "(lam (fn_5 (lam (empty? (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lam (fn_5 (lam (empty? (prev_dc_inv_1 '.' '-' (cdr (cdr (cdr (cdr $0))))))) $0))",
        "(lam (prev_dc_inv_0 $0 SPACE))",
        "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
        "(lam (prev_dc_inv_0 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "fn_6",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "fn_6",
        "(lam (lam (cons (car $1) (cons '.' (prev_dc_inv_0 $0 '.')))))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 (fn_9 SPACE $0) STRING))",
        "(lam (fn_9 SPACE (prev_dc_inv_2 $0 STRING)))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (map (lam $0) (prev_dc_inv_3 $0)))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 (map (lam $0) $0) STRING))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (prev_dc_inv_3 (map (lam $0) $0)))",
        "fn_8",
        "(lam (cons LPAREN (prev_dc_inv_4 RPAREN empty $0)))",
        "fn_8",
        "(lam (cons LPAREN (prev_dc_inv_4 RPAREN empty $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0)))",
        "(lambda (#(lambda (#(lambda (lambda (unfold $0 $1 (lambda (car $0)) (lambda (cdr $0))))) (lambda (char-eq? $1 (car $0))))) '.' $0))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 (map (lambda $0) $1))))",
        "(fn_7 SPACE SPACE)",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
        "(fn_7 ',' LPAREN)",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN (cons ',' (map (lambda $0) $0)) $1)))",
        "(fn_7 '.' '.')",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons '.' $0) (map (lambda $0) $1))))",
        "(lambda (fn_5 (lambda (empty? (cdr (cdr (cdr (cdr $0)))))) $0))",
        "(lambda (fn_5 (lambda (empty? (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' '-' (cdr (cdr (cdr (cdr $0))))))) $0))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
        "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "fn_6",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "fn_6",
        "(lambda (lambda (cons (car $1) (cons '.' (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (#(lambda (lambda (unfold $0 $1 (lambda (car $0)) (lambda (cdr $0))))) (lambda (char-eq? $1 (car $0))))) SPACE $0) STRING))",
        "(lambda (#(lambda (#(lambda (lambda (unfold $0 $1 (lambda (car $0)) (lambda (cdr $0))))) (lambda (char-eq? $1 (car $0))))) SPACE (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (map (lambda $0) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "fn_8",
        "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))",
        "fn_8",
        "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))"
      ],
      "utility": 203,
      "expected_cost": 6663,
      "final_cost": 6663,
      "multiplier": 1.0912501876031817,
      "multiplier_wrt_orig": 1.7457601680924508,
      "num_uses": 3,
      "uses": [
        {
          "fn_9 '.'": "(fn_5 (lam (char-eq? '.' (car $0))))"
        },
        {
          "fn_9 SPACE": "(fn_5 (lam (char-eq? SPACE (car $0))))"
        }
      ]
    }
  ]
}