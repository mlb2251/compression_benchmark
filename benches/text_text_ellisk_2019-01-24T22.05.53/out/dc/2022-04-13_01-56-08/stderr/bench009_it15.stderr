Stitch mode: none
Will write compression messages to cm_out_dir:  compressionMessages
Compression backend will run for most 20 iterations
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Total number of candidates: 32161
Constructed version spaces and coalesced candidates in 16.8559s.
Timing point -1 right before normalizing: 19.5994s.
Trimmed down the beam, have only 300 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 19.6013s.
Timing Comparison Point A (vspace+beam) (millis): 19601
Rewrote topK in 18.2742s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 18.2746s.
sanity check for timing comparison, should be same as comparison point: 37.8759s.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 37875
Initial score: -1041.278337
Initial language score: 0.000000
Initial joint score: -1041.278337 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 6.36389s.
Best MDL score: -1040.916244 with (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $1 $0 '.') $1)))
Scored candidates with language and grammar in 5.73582s.
Best joint score: -1040.916244 with (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $1 $0 '.') $1)))
Timing point 3 (all scoring): 12.1428s.
Improved score to -1040.916244 (dScore=0.362093) w/ new primitive
	#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $1 $0 '.') $1))) : list(char) -> char -> list(char)
rewrote all of the frontiers in 9.42505s.
Timing point 4 (rewrite final frontiers): 9.42509s.
Completed one step of memory consolidation in 59.472s.
New primitive is used 3 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $1 $0 '.') $1))) $0 '.'))
  (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $1 $0 '.') $1))) $0 LPAREN))
  (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $1 $0 '.') $1))) $0 '-'))
Total number of candidates: 30757
Constructed version spaces and coalesced candidates in 14.858s.
Timing point -1 right before normalizing: 17.1239s.
Trimmed down the beam, have only 299 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 17.1275s.
Timing Comparison Point A (vspace+beam) (millis): 17127
Rewrote topK in 15.8719s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 15.8722s.
sanity check for timing comparison, should be same as comparison point: 32.9998s.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 32999
Initial score: -1041.723201
Initial language score: 0.000000
Initial joint score: -1041.723201 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 5.91561s.
Best MDL score: -1044.466635 with (lambda (range (+ $0 1)))
No improvement possible with MDL.
Scored candidates with language and grammar in 5.77919s.
Best joint score: -1044.466635 with (lambda (range (+ $0 1)))
Timing point 3 (all scoring): 11.7333s.
No improvement possible with joint score.
Completed one step of memory consolidation in 44.7338s.
completed ocaml compression in 1.737m.
	Command being timed: "/scratch/mlbowers/proj/stitch/experiments/compression benches/text_text_ellisk_2019-01-24T22.05.53/bench009_it15.json"
	User time (seconds): 29.85
	System time (seconds): 0.24
	Percent of CPU this job got: 28%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 1:44.27
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 329804
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 267882
	Voluntary context switches: 270
	Involuntary context switches: 2994
	Swaps: 0
	File system inputs: 0
	File system outputs: 208
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
