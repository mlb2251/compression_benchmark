{
  "DSL": {
    "logVariable": -0.20112422339487201,
    "productions": [
      {
        "expression":
          "#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0))))))",
        "logProbability": -0.3132844162959363
      },
      { "expression": "char-eq?", "logProbability": -0.05888436113547346 },
      { "expression": "length", "logProbability": -0.06078868712184082 },
      { "expression": "+", "logProbability": -0.06078868712184082 },
      { "expression": "-", "logProbability": -0.06078868712184082 },
      { "expression": "0", "logProbability": -0.06078868712184082 },
      { "expression": "1", "logProbability": -0.06078868712184082 },
      { "expression": "empty?", "logProbability": -0.09167418395846427 },
      { "expression": "range", "logProbability": -0.09232109782811593 },
      { "expression": "'.'", "logProbability": -0.11854282061242127 },
      { "expression": "','", "logProbability": -0.15133264343541208 },
      { "expression": "'-'", "logProbability": -0.15133264343541208 },
      { "expression": "SPACE", "logProbability": -0.15133264343541208 },
      { "expression": "RPAREN", "logProbability": -0.15133264343541208 },
      { "expression": "LPAREN", "logProbability": -0.15133264343541208 },
      { "expression": "STRING", "logProbability": -0.3132844162959363 },
      { "expression": "unfold", "logProbability": -0.37773841558126087 },
      { "expression": "cdr", "logProbability": -0.37773841558126087 },
      { "expression": "cons", "logProbability": -0.40660041930368473 },
      { "expression": "empty", "logProbability": -0.40660041930368473 },
      { "expression": "map", "logProbability": -0.40788559555179393 },
      { "expression": "car", "logProbability": -0.43126483684232 },
      { "expression": "fold", "logProbability": -0.49193602183131313 },
      { "expression": "if", "logProbability": -0.49193602183131313 },
      { "expression": "index", "logProbability": -0.49393019862788945 }
    ]
  },
  "frontiers": [
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (unfold $0 (lambda (char-eq? '.' (car $0))) (lambda (car $0)) (lambda (cdr $0))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) STRING))",
          "logLikelihood": 0.0
        }
      ]
    }
  ]
}