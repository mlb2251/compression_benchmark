{
  "DSL": {
    "logVariable": -0.478425648321692,
    "productions": [
      {
        "expression":
          "#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $1 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $0 $2 $2))) $0))))",
        "logProbability": -1.8677743164127234
      },
      {
        "expression":
          "#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0)))))))",
        "logProbability": -1.8564945628611826
      },
      { "expression": "char-eq?", "logProbability": -0.06453852113755021 },
      { "expression": "empty?", "logProbability": -0.06453847127251056 },
      { "expression": "1", "logProbability": -0.27122846241812626 },
      { "expression": "+", "logProbability": -0.2991701710689276 },
      { "expression": "range", "logProbability": -0.18102080638347218 },
      { "expression": "length", "logProbability": -0.31229330383272114 },
      { "expression": "0", "logProbability": -0.37768606213653744 },
      { "expression": "-", "logProbability": -0.3156676041607849 },
      { "expression": "SPACE", "logProbability": -0.7065028711739627 },
      { "expression": "'.'", "logProbability": -0.7076328765589186 },
      { "expression": "LPAREN", "logProbability": -0.70789838771924 },
      { "expression": "'-'", "logProbability": -0.8132650329033257 },
      { "expression": "','", "logProbability": -0.8132713531692022 },
      { "expression": "RPAREN", "logProbability": -0.7858655390191442 },
      { "expression": "cdr", "logProbability": -1.8375799406160085 },
      { "expression": "STRING", "logProbability": -1.9280994764615906 },
      { "expression": "map", "logProbability": -1.9477423556560844 },
      { "expression": "cons", "logProbability": -1.9457093312785063 },
      { "expression": "empty", "logProbability": -1.9517297521841575 },
      { "expression": "unfold", "logProbability": -1.95181159093208 },
      { "expression": "if", "logProbability": -2.227140946990191 },
      { "expression": "car", "logProbability": -2.1943496066940424 },
      { "expression": "index", "logProbability": -2.1943511216576668 },
      { "expression": "fold", "logProbability": -2.227140944185377 },
      {
        "expression": "#(lambda (empty? (cdr (cdr $0))))",
        "logProbability": -4.674910281110556e-08
      },
      {
        "expression":
          "#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0)))))",
        "logProbability": -1.6959169529507818
      },
      {
        "expression":
          "#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1)))))",
        "logProbability": -1.7712832989830614
      },
      {
        "expression":
          "#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0))))))",
        "logProbability": -1.7493256307418092
      },
      {
        "expression": "#(lambda (lambda (cons (car $1) (cons $0 empty))))",
        "logProbability": -1.825371726323258
      },
      {
        "expression":
          "#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0)))",
        "logProbability": -1.7477500521140206
      },
      {
        "expression":
          "#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING)",
        "logProbability": -1.7799380190724468
      },
      {
        "expression":
          "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.'))))",
        "logProbability": -1.7225852395118082
      },
      {
        "expression":
          "#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "logProbability": -1.8083379648593558
      },
      {
        "expression":
          "#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
        "logProbability": -1.8078337716403743
      },
      {
        "expression":
          "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0))))",
        "logProbability": -1.7710061703249584
      },
      {
        "expression":
          "#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1))))))",
        "logProbability": -1.8071426319311423
      },
      {
        "expression":
          "#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0))))))",
        "logProbability": -1.790601625296056
      },
      {
        "expression":
          "#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0)))))",
        "logProbability": -1.8872730697945088
      }
    ]
  },
  "frontiers": [
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' RPAREN $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' RPAREN (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' '.' $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' '.' (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN SPACE $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN SPACE $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) '.' $0 (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0) '.') $0 (lambda (lambda (cdr (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' $1 $0))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 '.'))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) SPACE $0 (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0) SPACE) $0 (lambda (lambda (cdr (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' SPACE $0))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (map (lambda $0) $0) SPACE))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) LPAREN $0 $0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) LPAREN (cdr $0) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 LPAREN))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (map (lambda $0) $0) LPAREN))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) LPAREN $0 $0)) LPAREN))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $1 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $0 $2 $2))) $0)))) $0 ',' LPAREN))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 RPAREN))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (map (lambda $0) $0) RPAREN))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $1 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $0 $2 $2))) $0)))) $0 RPAREN RPAREN))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 '-'))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (map (lambda $0) $0) '-'))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '.' $0) $1)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 (map (lambda $0) $1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons SPACE $0) $1)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 (map (lambda $0) $1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN $0) $1)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '-' $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '-' $0) $1)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) SPACE $0 SPACE $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) SPACE $0 '.' $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons SPACE $0) $1)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) ',' $0 LPAREN $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) ',' (map (lambda $0) $0) LPAREN $1)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '.' $0 '.' $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '.' $0 '.' (map (lambda $0) $1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '-' $0 '.' $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons '-' $0) $1)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '-' $0 SPACE $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '-' $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (empty? (cdr (cdr $0)))) $0))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (empty? (cdr (cdr $0)))) (range (length $0))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (- $0 1)))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0) (lambda (cdr (range $0)))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (empty? (cdr (cdr $0)))) (cdr (cdr $0))))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (empty? (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' '-' (cdr (cdr (cdr (cdr $0)))))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range $0))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (map (lambda (index $0 $1)) (range (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (- (length (cdr $1)) $0)))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (- (length $1) (+ $0 1))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (+ $0 1)))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (+ 1 $0)))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.'))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE) '.'))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 RPAREN))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE) RPAREN))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
          "logLikelihood": 0.0
        },
        {
          "program": "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 SPACE))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 SPACE))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) (car $0) (index (+ (length (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 LPAREN)) 1) $0) $0) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 SPACE))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 SPACE))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (map (lambda $0) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (map (lambda $0) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    }
  ]
}