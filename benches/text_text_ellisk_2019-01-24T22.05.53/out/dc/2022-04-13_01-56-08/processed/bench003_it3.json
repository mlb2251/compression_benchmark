{
    "bench_group": "text_text_ellisk_2019-01-24T22.05.53",
    "bench": "bench003_it3",
    "mode": "dreamcoder",
    "run": "benches/text_text_ellisk_2019-01-24T22.05.53/out/dc/2022-04-13_01-56-08",
    "metrics": {
        "time_binary_seconds": 163.26,
        "time_per_inv_with_rewrite": 21023.8,
        "time_per_inv_no_rewrite": 11186.8,
        "mem_peak_kb": 402988,
        "compression_ratio": 1.2331061255811855,
        "absolute_compression": 5164
    },
    "num_inventions": 5,
    "inventions": [
        {
            "name": "fn_0",
            "stitch_uncanonical": "(unfold #0 #1 (lam (car $0)) (lam (cdr $0)))",
            "stitch_canonical": "(unfold #0 #1 (lam (car $0)) (lam (cdr $0)))",
            "dreamcoder": "#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0)))))"
        },
        {
            "name": "fn_1",
            "stitch_uncanonical": "(fn_2 #0 STRING)",
            "stitch_canonical": "(fn_2 #0 STRING)",
            "dreamcoder": "#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))"
        },
        {
            "name": "fn_2",
            "stitch_uncanonical": "(fn_0 #0 (lam (char-eq? #1 (car $0))))",
            "stitch_canonical": "(fn_0 #0 (lam (char-eq? #1 (car $0))))",
            "dreamcoder": "#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0))))))"
        },
        {
            "name": "fn_3",
            "stitch_uncanonical": "(cons LPAREN (fn_4 RPAREN empty #0))",
            "stitch_canonical": "(cons LPAREN (fn_4 RPAREN empty #0))",
            "dreamcoder": "#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))"
        },
        {
            "name": "fn_4",
            "stitch_uncanonical": "(fn_2 (fn_0 #0 '.') (fn_0 #1 '.'))",
            "stitch_canonical": "(fn_2 (fn_0 #0 '.') (fn_0 #1 '.'))",
            "dreamcoder": "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.'))))"
        }
    ]
}