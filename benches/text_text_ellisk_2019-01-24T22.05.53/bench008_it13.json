{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.497024,
        "productions": [
            {
                "expression": "char-eq?",
                "logProbability": -0.095437
            },
            {
                "expression": "empty?",
                "logProbability": -0.095439
            },
            {
                "expression": "range",
                "logProbability": -0.18304
            },
            {
                "expression": "1",
                "logProbability": -0.277121
            },
            {
                "expression": "+",
                "logProbability": -0.345618
            },
            {
                "expression": "-",
                "logProbability": -0.364468
            },
            {
                "expression": "length",
                "logProbability": -0.368623
            },
            {
                "expression": "0",
                "logProbability": -0.435817
            },
            {
                "expression": "'.'",
                "logProbability": -0.744699
            },
            {
                "expression": "LPAREN",
                "logProbability": -0.745946
            },
            {
                "expression": "SPACE",
                "logProbability": -0.768646
            },
            {
                "expression": "','",
                "logProbability": -0.828321
            },
            {
                "expression": "RPAREN",
                "logProbability": -0.850434
            },
            {
                "expression": "'-'",
                "logProbability": -0.877045
            },
            {
                "expression": "cdr",
                "logProbability": -1.9535
            },
            {
                "expression": "STRING",
                "logProbability": -2.023152
            },
            {
                "expression": "map",
                "logProbability": -2.037938
            },
            {
                "expression": "cons",
                "logProbability": -2.041091
            },
            {
                "expression": "empty",
                "logProbability": -2.048341
            },
            {
                "expression": "unfold",
                "logProbability": -2.049759
            },
            {
                "expression": "index",
                "logProbability": -2.290592
            },
            {
                "expression": "car",
                "logProbability": -2.298722
            },
            {
                "expression": "if",
                "logProbability": -2.333305
            },
            {
                "expression": "fold",
                "logProbability": -2.333309
            },
            {
                "expression": "#(lambda (#(lambda (empty? (cdr (cdr $0)))) (cdr $0)))",
                "logProbability": -0.030965
            },
            {
                "expression": "#(lambda (empty? (cdr (cdr $0))))",
                "logProbability": -0.062596
            },
            {
                "expression": "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.'))))",
                "logProbability": -1.791685
            },
            {
                "expression": "#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0)))))",
                "logProbability": -1.791772
            },
            {
                "expression": "#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0)))",
                "logProbability": -1.805732
            },
            {
                "expression": "#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0))))))",
                "logProbability": -1.81767
            },
            {
                "expression": "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0))))",
                "logProbability": -1.869131
            },
            {
                "expression": "#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1)))))",
                "logProbability": -1.869297
            },
            {
                "expression": "#(lambda (lambda (cons (car $1) (cons $0 empty))))",
                "logProbability": -1.87319
            },
            {
                "expression": "#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING)",
                "logProbability": -1.87573
            },
            {
                "expression": "#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
                "logProbability": -1.875914
            },
            {
                "expression": "#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1))))))",
                "logProbability": -1.884555
            },
            {
                "expression": "#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0))))))",
                "logProbability": -1.885654
            },
            {
                "expression": "#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
                "logProbability": -1.903974
            },
            {
                "expression": "#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0)))))))",
                "logProbability": -1.92459
            },
            {
                "expression": "#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1))))",
                "logProbability": -1.932927
            },
            {
                "expression": "#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0)))))",
                "logProbability": -1.954456
            }
        ]
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "Replace ',' w/ '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Replace '.' w/ ')'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' RPAREN $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' RPAREN (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Replace '-' w/ ','",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Replace '(' w/ '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN '.' $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN '.' (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Replace ',' w/ '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' '.' $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' '.' (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Replace '(' w/ ')'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Replace '-' w/ ' '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Replace ' ' w/ '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Replace '(' w/ ' '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN SPACE $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN SPACE (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "drop first word delimited by '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) '.' $0 (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) '.' (cdr $0) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=0) word delimited by '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 '.'))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? '.' (car $0)) empty $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "drop first word delimited by ','",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) ',' $0 (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) ',' (cdr $0) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=0) word delimited by ','",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 ','))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) ','))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "drop first word delimited by ' '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) SPACE $0 (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0) SPACE) $0 (lambda (lambda (cdr (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' SPACE $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=0) word delimited by ' '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) SPACE))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "drop first word delimited by '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) LPAREN (cdr $0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) LPAREN $0 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=0) word delimited by '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 LPAREN))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) LPAREN))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=1) word delimited by '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $0 LPAREN ','))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) LPAREN $0 $0)) LPAREN))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=0) word delimited by ')'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 RPAREN))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) RPAREN))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=1) word delimited by ')'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $0 RPAREN RPAREN))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "drop first word delimited by '-'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) '-' $0 (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) '-' (cdr $0) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=0) word delimited by '-'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 '-'))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) '-'))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=1) word delimited by '-'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $0 '-' '-'))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) (cdr $0) '-' '-'))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '.' $0) $1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by ','",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) ',' $0 (map (lambda $0) $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by ' '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons SPACE $0) $1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) LPAREN $0 (map (lambda $0) $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by ')'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN $0) $1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '-'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '-' $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '-' $0) $1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '  '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) SPACE $0 SPACE $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '. '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) SPACE $0 '.' $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons SPACE $0) $1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '(,'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) ',' $0 LPAREN $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) ',' (map (lambda $0) $0) LPAREN $1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '..'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '.' $0 '.' $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '.' $0 '.' (map (lambda $0) $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '.-'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '-' $0 '.' $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '.' (cons '-' $0) $1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by ' -'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1))))) '-' $0 SPACE $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) '-' $0 (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) SPACE empty $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Drop last 1 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (#(lambda (empty? (cdr (cdr $0)))) (cdr $0))) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (empty? (cdr $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Drop last 2 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (empty? (cdr (cdr $0)))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (empty? (cdr (cdr $0)))) (range (length $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first 2 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (+ 1 1)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 (index 1 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Drop last 3 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (#(lambda (empty? (cdr (cdr $0)))) (cdr $0))) $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (#(lambda (empty? (cdr (cdr $0)))) (cdr $0))) (range (length $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first 3 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (- $0 1)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0) (lambda (cdr (range $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Drop last 4 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (#(lambda (#(lambda (empty? (cdr (cdr $0)))) (cdr $0))) (cdr $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $0 (lambda (empty? (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' '-' (cdr (cdr (cdr (cdr $0)))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first 4 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index $0 $1)) (range (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Drop last 5 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (- (length (cdr $1)) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (- (length $1) (+ $0 1))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first 5 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (+ $0 1)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1)))))) $0 (lambda (range (+ 1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Extract word delimited by ')' - ','",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $0 RPAREN '.') ','))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $0 RPAREN LPAREN) ','))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first character and append '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.'))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $0) '.'))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first character and append ','",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $0) ','))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first character and append ' '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first character and append '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 LPAREN))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $0) LPAREN))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first character and append ')'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 RPAREN))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') RPAREN))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first character and append '-'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate separate words (I)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate words separated by '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $0 '.' '.') $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $0 '.' LPAREN) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate separate words (II)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate separate words (III)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate separate words (IIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 LPAREN))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate words separated by '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) (car $0) (index (+ (length (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 LPAREN)) 1) $0) $0) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate separate words (IIIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate separate words (IIIIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $0 (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.'))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate words separated by '-'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $0 '-' '.') $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1)))) $0 '-' LPAREN) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 2 strings (I)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 2 strings (II)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 2 strings (III)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 2 strings (IIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 2 strings (IIIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 2 strings (IIIIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend 'Hornak'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 'Cornell'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend '+167' to first word",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend '+174'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append '636'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend 'Ghoston' to first word",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend 'UCLA'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append '+138'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend '170' to first word",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend 'Sergienko'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 'Beata'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda $0) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend 'Carlene' to first word",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend 'Jani'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 'Angeles'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend '177' to first word",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend 'Spell'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 'Dermody'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend '086' to first word",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "parentheses around a single word (I)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "parentheses around a single word (II)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "parentheses around a single word (III)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda $0) (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "parentheses around a single word (IIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "parentheses around a single word (IIIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "ensure suffix `Andria`",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (if (#(lambda (#(lambda (empty? (cdr (cdr $0)))) (cdr $0))) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (if (#(lambda (empty? (cdr (cdr $0)))) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (cdr $0) SPACE)) (#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING) $0) $0))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 13,
        "num_learned": 1,
        "new_grammar": {
            "logVariable": -0.520716,
            "productions": [
                {
                    "expression": "empty?",
                    "logProbability": -0.13693
                },
                {
                    "expression": "char-eq?",
                    "logProbability": -0.146773
                },
                {
                    "expression": "range",
                    "logProbability": -0.240313
                },
                {
                    "expression": "1",
                    "logProbability": -0.285672
                },
                {
                    "expression": "+",
                    "logProbability": -0.358682
                },
                {
                    "expression": "length",
                    "logProbability": -0.373434
                },
                {
                    "expression": "-",
                    "logProbability": -0.373565
                },
                {
                    "expression": "0",
                    "logProbability": -0.44958
                },
                {
                    "expression": "SPACE",
                    "logProbability": -0.860412
                },
                {
                    "expression": "'.'",
                    "logProbability": -0.860933
                },
                {
                    "expression": "LPAREN",
                    "logProbability": -0.861249
                },
                {
                    "expression": "'-'",
                    "logProbability": -0.901491
                },
                {
                    "expression": "','",
                    "logProbability": -0.911906
                },
                {
                    "expression": "RPAREN",
                    "logProbability": -0.963658
                },
                {
                    "expression": "cdr",
                    "logProbability": -2.086744
                },
                {
                    "expression": "STRING",
                    "logProbability": -2.152071
                },
                {
                    "expression": "map",
                    "logProbability": -2.166507
                },
                {
                    "expression": "cons",
                    "logProbability": -2.174303
                },
                {
                    "expression": "empty",
                    "logProbability": -2.178875
                },
                {
                    "expression": "unfold",
                    "logProbability": -2.180375
                },
                {
                    "expression": "index",
                    "logProbability": -2.437594
                },
                {
                    "expression": "car",
                    "logProbability": -2.445595
                },
                {
                    "expression": "if",
                    "logProbability": -2.447255
                },
                {
                    "expression": "fold",
                    "logProbability": -2.480049
                },
                {
                    "expression": "#(lambda (#(lambda (empty? (cdr (cdr $0)))) (cdr $0)))",
                    "logProbability": -0.040368
                },
                {
                    "expression": "#(lambda (empty? (cdr (cdr $0))))",
                    "logProbability": -0.111622
                },
                {
                    "expression": "#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0)))))",
                    "logProbability": -1.872734
                },
                {
                    "expression": "#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0))))))",
                    "logProbability": -1.896789
                },
                {
                    "expression": "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.'))))",
                    "logProbability": -1.897658
                },
                {
                    "expression": "#(#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING)",
                    "logProbability": -1.954385
                },
                {
                    "expression": "#(lambda (lambda (cons (car $1) (cons $0 empty))))",
                    "logProbability": -1.976412
                },
                {
                    "expression": "#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 $2 (cdr (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $1 $2 $2))) $1))))",
                    "logProbability": -1.978165
                },
                {
                    "expression": "#(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 SPACE)))",
                    "logProbability": -1.979595
                },
                {
                    "expression": "#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
                    "logProbability": -1.980047
                },
                {
                    "expression": "#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0))))))",
                    "logProbability": -1.984786
                },
                {
                    "expression": "#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0)))",
                    "logProbability": -1.990935
                },
                {
                    "expression": "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0))))",
                    "logProbability": -1.999729
                },
                {
                    "expression": "#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) $0 (cons $2 $1)))))",
                    "logProbability": -1.999796
                },
                {
                    "expression": "#(lambda (lambda (map (lambda (index $0 $2)) ($0 (length (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $1 '.') (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.')))) $1 $1))))))",
                    "logProbability": -2.00891
                },
                {
                    "expression": "#(lambda (lambda (#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0))))))) $0 $1 (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $1 $0)))) RPAREN empty (cons LPAREN $0))) $1))))",
                    "logProbability": -2.036249
                },
                {
                    "expression": "#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0)))))",
                    "logProbability": -2.062929
                },
                {
                    "expression": "#(lambda (lambda (lambda (fold (#(lambda (lambda (#(lambda (lambda (unfold $1 $0 (lambda (car $0)) (lambda (cdr $0))))) $1 (lambda (char-eq? $1 (car $0)))))) $0 $2) $1 (lambda (lambda (cdr $0)))))))",
                    "logProbability": -2.146559
                }
            ]
        }
    }
}