{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.516608,
        "productions": [
            {
                "expression": "logo_epsA",
                "logProbability": -0.437086
            },
            {
                "expression": "logo_UL",
                "logProbability": -0.528299
            },
            {
                "expression": "logo_MULL",
                "logProbability": -0.545453
            },
            {
                "expression": "4",
                "logProbability": -0.553887
            },
            {
                "expression": "logo_epsL",
                "logProbability": -0.640495
            },
            {
                "expression": "3",
                "logProbability": -0.700448
            },
            {
                "expression": "logo_UA",
                "logProbability": -0.711093
            },
            {
                "expression": "logo_MULA",
                "logProbability": -0.726023
            },
            {
                "expression": "logo_SUBA",
                "logProbability": -0.73189
            },
            {
                "expression": "7",
                "logProbability": -0.732534
            },
            {
                "expression": "5",
                "logProbability": -0.743352
            },
            {
                "expression": "logo_ZA",
                "logProbability": -0.745014
            },
            {
                "expression": "8",
                "logProbability": -0.746164
            },
            {
                "expression": "logo_DIVA",
                "logProbability": -0.749237
            },
            {
                "expression": "logo_ADDA",
                "logProbability": -0.75984
            },
            {
                "expression": "logo_ZL",
                "logProbability": -0.77352
            },
            {
                "expression": "6",
                "logProbability": -0.795692
            },
            {
                "expression": "2",
                "logProbability": -0.818231
            },
            {
                "expression": "9",
                "logProbability": -0.838038
            },
            {
                "expression": "logo_IFTY",
                "logProbability": -0.849956
            },
            {
                "expression": "logo_DIVL",
                "logProbability": -0.870298
            },
            {
                "expression": "0",
                "logProbability": -0.882769
            },
            {
                "expression": "1",
                "logProbability": -0.882769
            },
            {
                "expression": "logo_FWRT",
                "logProbability": -0.89679
            },
            {
                "expression": "logo_forLoop",
                "logProbability": -1.022472
            },
            {
                "expression": "logo_GETSET",
                "logProbability": -1.142398
            },
            {
                "expression": "logo_PT",
                "logProbability": -1.142413
            },
            {
                "expression": "#(logo_DIVA logo_UA)",
                "logProbability": -0.428444
            },
            {
                "expression": "#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY))",
                "logProbability": -0.828733
            },
            {
                "expression": "#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0)))))))",
                "logProbability": -1.023959
            },
            {
                "expression": "#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0)))))",
                "logProbability": -1.081367
            }
        ],
        "continuationType": {
            "constructor": "turtle",
            "arguments": []
        }
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "3-gon 1l slanted 8",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 8) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 3) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 5 logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 3) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "4-gon (*d 1d 3)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 3) (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 4 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "5-gon 1l",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (logo_MULA logo_epsA 8) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "6-gon (*d 1d 2) slanted 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 5) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 6) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 6) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "7-gon 1l",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (logo_DIVA logo_UA 7) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "8-gon (/d 1d 2)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 2) (#(logo_DIVA logo_UA) 8) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 2) (logo_MULA logo_epsA 5) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "upwards",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) (logo_FWRT logo_UL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) (logo_FWRT logo_UL logo_UA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "right angle",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "right angle epsilon",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_epsL 2 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_epsL 2 (logo_DIVA logo_UA 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "line segment",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "square slanted by 2pi/3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_epsL (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "semicircle slanted by 2pi/5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 8 logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) logo_epsA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Greek spiral slanted by 2pi/6",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT (logo_MULL logo_UL 0) (#(logo_DIVA logo_UA) 6) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Hook slanted by 2pi/7",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) (logo_FWRT logo_UL logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 7) (logo_FWRT logo_UL logo_UA (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) logo_epsA $0)) $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slanted line",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 8) (logo_FWRT (logo_MULL logo_UL 3) logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 5 logo_epsA (logo_FWRT (logo_MULL logo_UL 3) logo_epsA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Greek spiral 7",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) logo_epsA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Greek spiral 8",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) logo_epsA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "smooth spiral 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_ADDA (#(logo_DIVA logo_UA) logo_IFTY) logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "smooth spiral 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (#(logo_DIVA logo_UA) 8) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 5) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "smooth spiral 4 slanted by 2pi/2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 2) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 4) $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "star 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 5) 7) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 5) 2) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "star 9",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_MULA (#(logo_DIVA logo_UA) 9) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 4) (logo_ADDA (#(logo_DIVA logo_UA) 3) (#(logo_DIVA logo_UA) 9)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "leaf iteration 1.1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA (#(logo_DIVA logo_UA) 4) logo_IFTY) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "leaf iteration 1.2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA (#(logo_DIVA logo_UA) 4) logo_IFTY) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "leaf iteration 2.1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "leaf iteration 2.2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "flower 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) $0)))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) $0)))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "flower 4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) $0))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2) $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "staircase 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 2 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 8) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "blocks zigzag 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 3 (#(logo_DIVA logo_UA) 4) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL logo_epsA (logo_FWRT logo_UL logo_UA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "left semicircle of size 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 8) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_ZL 5 logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle of size 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "right semicircle of size 2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) (logo_SUBA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) (logo_SUBA logo_ZA logo_epsA) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "left semicircle of size 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_epsL 3) logo_IFTY logo_epsA $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle of size 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 3) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 3) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_ZL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "right semicircle of size 4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) (logo_SUBA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 4) (logo_SUBA logo_ZA logo_epsA) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle of size 4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 5) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "left semicircle of size 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 5) logo_epsA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_UL 4) logo_epsA $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle of size 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 5) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "right semicircle of size 6",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 6) (logo_SUBA logo_UA logo_epsA) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 6) (logo_SUBA logo_ZA logo_epsA) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle of size 6",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 6) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL (logo_MULL logo_epsL 2) 3) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "5 enclosed circles",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0)) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL $2) $0)) $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "6-circle flower l=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_MULL logo_epsL 4) $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) (logo_DIVL logo_UL 5) $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "3-circle flower l=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 3) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 3) (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "3-semicircle sequence L=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_UA logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_SUBA logo_ZA logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "2-semicircle sequence L=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 2 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) (logo_SUBA logo_UA logo_epsA) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "1-semicircle sequence L=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) (logo_SUBA logo_UA logo_epsA) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) logo_epsA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 3) (logo_SUBA logo_ZA logo_epsA) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "row of 2 circles",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "row of 2 lines",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "line next to semicircle",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "3 dashed lines of size (/d 1d 2)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_FWRT (logo_DIVL logo_UL 2) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_DIVL logo_epsL 2) logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "broken circle",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle next to semicircle",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle next to line",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_GETSET (lambda (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)) (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (logo_FWRT logo_UL logo_epsA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (logo_FWRT logo_UL logo_epsA $0))) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "line next to circle",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "row of 4 dashes",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL (#(logo_DIVA logo_UA) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_GETSET (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $3) (#(logo_DIVA logo_UA) 4) $0)) (logo_FWRT logo_UL logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "row of 5 semicircles",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "3-square dashed snowflake",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 3) (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "5-dashed snowflake",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_FWRT logo_UL logo_epsA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (logo_FWRT logo_UL logo_epsA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "5-close large semicircle snowflake",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) logo_epsA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL 2) logo_epsA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "5-semicircle snowflake",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 5) (logo_GETSET (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_DIVL logo_UL 4) 4 logo_UA (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "6-circle snowflake",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_GETSET (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_epsL 4) 5 logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_GETSET (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_epsL 4) 5 logo_UA (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "6-lonely circle snowflake",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_GETSET (lambda (logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)) (#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0))))) logo_epsL $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "6-close semicircle snowflake",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA $0)) (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) 6) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "7-empty snowflake",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 2) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 7) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_ZL (#(logo_DIVA logo_UA) 7) (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 2) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "4-row of squares",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) (logo_FWRT logo_UL logo_UA $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) (logo_FWRT logo_UL logo_ZA $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "square of size 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_UL (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) logo_UL 4 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "square of size 2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 2) (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 2) 4 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "square of size 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL 3) (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) (logo_MULL logo_UL 3) 4 (#(logo_DIVA logo_UA) 4) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "5-concentric squares",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) (#(logo_DIVA logo_UA) 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 8,
        "num_learned": 11,
        "new_grammar": {
            "logVariable": -0.768486,
            "productions": [
                {
                    "expression": "logo_UL",
                    "logProbability": -0.594953
                },
                {
                    "expression": "logo_epsA",
                    "logProbability": -0.766592
                },
                {
                    "expression": "logo_epsL",
                    "logProbability": -0.845298
                },
                {
                    "expression": "logo_UA",
                    "logProbability": -0.852402
                },
                {
                    "expression": "logo_MULL",
                    "logProbability": -0.925254
                },
                {
                    "expression": "logo_MULA",
                    "logProbability": -0.94
                },
                {
                    "expression": "logo_ZL",
                    "logProbability": -0.947908
                },
                {
                    "expression": "5",
                    "logProbability": -0.960351
                },
                {
                    "expression": "logo_SUBA",
                    "logProbability": -0.984192
                },
                {
                    "expression": "logo_ZA",
                    "logProbability": -0.98927
                },
                {
                    "expression": "logo_DIVA",
                    "logProbability": -1.002537
                },
                {
                    "expression": "3",
                    "logProbability": -1.008353
                },
                {
                    "expression": "logo_ADDA",
                    "logProbability": -1.009979
                },
                {
                    "expression": "4",
                    "logProbability": -1.016739
                },
                {
                    "expression": "2",
                    "logProbability": -1.059775
                },
                {
                    "expression": "7",
                    "logProbability": -1.140273
                },
                {
                    "expression": "logo_DIVL",
                    "logProbability": -1.151357
                },
                {
                    "expression": "6",
                    "logProbability": -1.179446
                },
                {
                    "expression": "8",
                    "logProbability": -1.264349
                },
                {
                    "expression": "logo_IFTY",
                    "logProbability": -1.405388
                },
                {
                    "expression": "9",
                    "logProbability": -1.407623
                },
                {
                    "expression": "1",
                    "logProbability": -1.447029
                },
                {
                    "expression": "0",
                    "logProbability": -1.447838
                },
                {
                    "expression": "logo_FWRT",
                    "logProbability": -1.817735
                },
                {
                    "expression": "logo_forLoop",
                    "logProbability": -1.849025
                },
                {
                    "expression": "logo_GETSET",
                    "logProbability": -2.083296
                },
                {
                    "expression": "logo_PT",
                    "logProbability": -2.17627
                },
                {
                    "expression": "#(#(logo_DIVA logo_UA) 4)",
                    "logProbability": -0.54177
                },
                {
                    "expression": "#(logo_DIVA logo_UA)",
                    "logProbability": -0.592992
                },
                {
                    "expression": "#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY))",
                    "logProbability": -1.671877
                },
                {
                    "expression": "#(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $2 7 logo_epsA $0)))))",
                    "logProbability": -1.821652
                },
                {
                    "expression": "#(logo_PT (lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_UA $0)))",
                    "logProbability": -1.874075
                },
                {
                    "expression": "#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL logo_epsA)",
                    "logProbability": -1.898265
                },
                {
                    "expression": "#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT logo_ZL (#(logo_DIVA logo_UA) $2) (logo_GETSET $4 $0))))))))",
                    "logProbability": -1.922233
                },
                {
                    "expression": "#(logo_FWRT logo_UL logo_UA)",
                    "logProbability": -1.937355
                },
                {
                    "expression": "#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0)))))))",
                    "logProbability": -1.950789
                },
                {
                    "expression": "#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) logo_epsA))",
                    "logProbability": -2.000475
                },
                {
                    "expression": "#(lambda (#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) (logo_MULL logo_epsL $0) (logo_SUBA logo_UA logo_epsA)))",
                    "logProbability": -2.055891
                },
                {
                    "expression": "#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2))",
                    "logProbability": -2.084699
                },
                {
                    "expression": "#(lambda (#(#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT $4 $2 $0))))))) $0 logo_IFTY)) logo_epsL (logo_DIVA logo_epsA 2)) (logo_FWRT logo_ZL #(#(logo_DIVA logo_UA) 4) $0)))",
                    "logProbability": -2.084824
                },
                {
                    "expression": "#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0)))))))",
                    "logProbability": -2.114557
                },
                {
                    "expression": "#(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA $0) logo_IFTY logo_epsL))",
                    "logProbability": -2.114654
                }
            ],
            "continuationType": {
                "constructor": "turtle",
                "arguments": []
            }
        }
    }
}