{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": 0.0,
        "productions": [
            {
                "expression": "char-eq?",
                "logProbability": 0.0
            },
            {
                "expression": "empty?",
                "logProbability": 0.0
            },
            {
                "expression": "1",
                "logProbability": 0.0
            },
            {
                "expression": "range",
                "logProbability": 0.0
            },
            {
                "expression": "+",
                "logProbability": 0.0
            },
            {
                "expression": "length",
                "logProbability": 0.0
            },
            {
                "expression": "','",
                "logProbability": 0.0
            },
            {
                "expression": "-",
                "logProbability": 0.0
            },
            {
                "expression": "0",
                "logProbability": 0.0
            },
            {
                "expression": "'.'",
                "logProbability": 0.0
            },
            {
                "expression": "'-'",
                "logProbability": 0.0
            },
            {
                "expression": "LPAREN",
                "logProbability": 0.0
            },
            {
                "expression": "SPACE",
                "logProbability": 0.0
            },
            {
                "expression": "RPAREN",
                "logProbability": 0.0
            },
            {
                "expression": "cons",
                "logProbability": 0.0
            },
            {
                "expression": "empty",
                "logProbability": 0.0
            },
            {
                "expression": "cdr",
                "logProbability": 0.0
            },
            {
                "expression": "map",
                "logProbability": 0.0
            },
            {
                "expression": "STRING",
                "logProbability": 0.0
            },
            {
                "expression": "unfold",
                "logProbability": 0.0
            },
            {
                "expression": "if",
                "logProbability": 0.0
            },
            {
                "expression": "fold",
                "logProbability": 0.0
            },
            {
                "expression": "car",
                "logProbability": 0.0
            },
            {
                "expression": "index",
                "logProbability": 0.0
            }
        ]
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "Replace ',' w/ '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (if (char-eq? $0 ',') '.' $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (if (char-eq? ',' $0) '.' $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=0) word delimited by ','",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (if (char-eq? ',' $1) empty (cons $1 $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index $0 $1)) (range (fold (cdr $0) 0 (lambda (lambda (+ (if (char-eq? ',' $1) 0 $0) 1)))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (fold $1 (cons LPAREN $0) (lambda (lambda (cons $1 $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (fold $1 (cons (fold $0 ',' (lambda (lambda LPAREN))) $0) (lambda (lambda (cons $1 $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Drop last 2 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (index $0 $1)) (range (length (cdr (cdr $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index $0 $1)) (range (- (length (cdr $0)) 1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first 4 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 1))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (fold (cdr $0) (+ 1 1) (lambda (lambda $0))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first character and append '-'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cons (car $0) (cons '-' empty)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (index 0 $0) (cons '-' empty)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 2 strings (I)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (fold $1 (map (lambda $0) $0) (lambda (lambda (cons $1 $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 0,
        "num_learned": 2,
        "new_grammar": {
            "logVariable": -0.360566,
            "productions": [
                {
                    "expression": "char-eq?",
                    "logProbability": -0.000105
                },
                {
                    "expression": "empty?",
                    "logProbability": -0.064643
                },
                {
                    "expression": "1",
                    "logProbability": -0.12125
                },
                {
                    "expression": "range",
                    "logProbability": -0.148508
                },
                {
                    "expression": "+",
                    "logProbability": -0.162017
                },
                {
                    "expression": "length",
                    "logProbability": -0.224706
                },
                {
                    "expression": "','",
                    "logProbability": -0.247915
                },
                {
                    "expression": "-",
                    "logProbability": -0.25023
                },
                {
                    "expression": "0",
                    "logProbability": -0.253014
                },
                {
                    "expression": "'.'",
                    "logProbability": -0.279686
                },
                {
                    "expression": "'-'",
                    "logProbability": -0.279686
                },
                {
                    "expression": "LPAREN",
                    "logProbability": -0.279686
                },
                {
                    "expression": "SPACE",
                    "logProbability": -0.312475
                },
                {
                    "expression": "RPAREN",
                    "logProbability": -0.312475
                },
                {
                    "expression": "cons",
                    "logProbability": -0.517239
                },
                {
                    "expression": "empty",
                    "logProbability": -0.577923
                },
                {
                    "expression": "cdr",
                    "logProbability": -0.579801
                },
                {
                    "expression": "map",
                    "logProbability": -0.599629
                },
                {
                    "expression": "STRING",
                    "logProbability": -0.637671
                },
                {
                    "expression": "unfold",
                    "logProbability": -0.637671
                },
                {
                    "expression": "if",
                    "logProbability": -0.898376
                },
                {
                    "expression": "fold",
                    "logProbability": -0.930098
                },
                {
                    "expression": "car",
                    "logProbability": -0.934116
                },
                {
                    "expression": "index",
                    "logProbability": -0.958807
                },
                {
                    "expression": "#(lambda (lambda (map (lambda (index $0 $2)) (range $0))))",
                    "logProbability": -0.572718
                },
                {
                    "expression": "#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0))))))",
                    "logProbability": -0.573132
                }
            ]
        }
    }
}