Stitch mode: none
Will write compression messages to cm_out_dir:  compressionMessages
Compression backend will run for most 20 iterations
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Total number of candidates: 67618
Constructed version spaces and coalesced candidates in 49.3534s.
Timing point -1 right before normalizing: 54.6418s.
Trimmed down the beam, have only 300 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 54.6437s.
Timing Comparison Point A (vspace+beam) (millis): 54643
Rewrote topK in 30.5697s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 30.576s.
sanity check for timing comparison, should be same as comparison point: 1.42033m.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 85219
Initial score: -1077.392084
Initial language score: 0.000000
Initial joint score: -1077.392084 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 6.85005s.
Best MDL score: -1073.023327 with (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) $1) (lambda ($0 $1)) RPAREN)))
Scored candidates with language and grammar in 6.40288s.
Best joint score: -1073.023327 with (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) $1) (lambda ($0 $1)) RPAREN)))
Timing point 3 (all scoring): 13.2974s.
Improved score to -1073.023327 (dScore=4.368758) w/ new primitive
	#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) $1) (lambda ($0 $1)) RPAREN))) : list(char) -> char -> list(char)
rewrote all of the frontiers in 19.3614s.
Timing point 4 (rewrite final frontiers): 19.3615s.
Completed one step of memory consolidation in 1.9651m.
New primitive is used 3 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) $1) (lambda ($0 $1)) RPAREN))) $0 '.'))
  (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) $1) (lambda ($0 $1)) RPAREN))) $0 ','))
  (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) $1) (lambda ($0 $1)) RPAREN))) $0 '-'))
Total number of candidates: 57831
Constructed version spaces and coalesced candidates in 47.9586s.
Timing point -1 right before normalizing: 52.2237s.
Trimmed down the beam, have only 299 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 52.2253s.
Timing Comparison Point A (vspace+beam) (millis): 52225
Rewrote topK in 27.6617s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 27.6621s.
sanity check for timing comparison, should be same as comparison point: 1.33146m.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 79887
Initial score: -1073.117168
Initial language score: 0.000000
Initial joint score: -1073.117168 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 6.60312s.
Best MDL score: -1074.417917 with (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 '.'))
No improvement possible with MDL.
Scored candidates with language and grammar in 6.73965s.
Best joint score: -1074.417917 with (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 '.'))
Timing point 3 (all scoring): 13.3835s.
No improvement possible with joint score.
Completed one step of memory consolidation in 1.55453m.
completed ocaml compression in 3.51989m.
	Command being timed: "/scratch/mlbowers/proj/stitch/experiments/compression benches/text_text_ellisk_2019-01-24T21.49.39/bench010_it15.json"
	User time (seconds): 60.43
	System time (seconds): 1.86
	Percent of CPU this job got: 29%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 3:31.24
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 1401388
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 1746998
	Voluntary context switches: 444
	Involuntary context switches: 6445
	Swaps: 0
	File system inputs: 0
	File system outputs: 216
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
