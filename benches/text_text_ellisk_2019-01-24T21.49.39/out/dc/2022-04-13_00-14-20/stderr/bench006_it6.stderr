Stitch mode: none
Will write compression messages to cm_out_dir:  compressionMessages
Compression backend will run for most 20 iterations
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Total number of candidates: 44028
Constructed version spaces and coalesced candidates in 45.7506s.
Timing point -1 right before normalizing: 49.8046s.
Trimmed down the beam, have only 300 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 49.8067s.
Timing Comparison Point A (vspace+beam) (millis): 49806
Rewrote topK in 31.9556s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 31.9561s.
sanity check for timing comparison, should be same as comparison point: 1.36271m.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 81762
Initial score: -697.171016
Initial language score: 0.000000
Initial joint score: -697.171016 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 2.85617s.
Best MDL score: -694.356073 with (lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $1 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $3) $1)) $2))))
Scored candidates with language and grammar in 2.7962s.
Best joint score: -694.356073 with (lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $1 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $3) $1)) $2))))
Timing point 3 (all scoring): 5.67566s.
Improved score to -694.356073 (dScore=2.814943) w/ new primitive
	#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $1 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $3) $1)) $2)))) : char -> list(char) -> char -> list(char)
rewrote all of the frontiers in 20.4106s.
Timing point 4 (rewrite final frontiers): 20.4106s.
Completed one step of memory consolidation in 1.79779m.
New primitive is used 3 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $1 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $3) $1)) $2)))) '.' $0 ','))
  (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $1 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $3) $1)) $2)))) SPACE $0 '.'))
  (lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $1 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $3) $1)) $2)))) '-' $0 SPACE))
Total number of candidates: 42182
Constructed version spaces and coalesced candidates in 51.4176s.
Timing point -1 right before normalizing: 55.7492s.
Trimmed down the beam, have only 300 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 55.7517s.
Timing Comparison Point A (vspace+beam) (millis): 55751
Rewrote topK in 30.2615s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 30.2618s.
sanity check for timing comparison, should be same as comparison point: 1.43356m.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 86013
Initial score: -694.275296
Initial language score: 0.000000
Initial joint score: -694.275296 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 2.95352s.
Best MDL score: -695.370740 with (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) (cons $0 $1)))
No improvement possible with MDL.
Scored candidates with language and grammar in 3.26288s.
Best joint score: -695.370740 with (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) (cons $0 $1)))
Timing point 3 (all scoring): 6.23939s.
No improvement possible with joint score.
Completed one step of memory consolidation in 1.53775m.
completed ocaml compression in 3.33567m.
	Command being timed: "/scratch/mlbowers/proj/stitch/experiments/compression benches/text_text_ellisk_2019-01-24T21.49.39/bench006_it6.json"
	User time (seconds): 39.70
	System time (seconds): 1.54
	Percent of CPU this job got: 20%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 3:20.25
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 1321236
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 1099947
	Voluntary context switches: 302
	Involuntary context switches: 4358
	Swaps: 0
	File system inputs: 0
	File system outputs: 112
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
