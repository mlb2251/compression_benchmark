{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T21.49.39/bench002_it2.json --max-arity=3 --threads=1 --iterations=1 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T21.49.39/out/stitch/2022-10-04_19-36-09/raw/bench002_it2.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.49.39/bench002_it2.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.49.39/out/stitch/2022-10-04_19-36-09/raw/bench002_it2.json",
    "iterations": 1,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 25390,
  "original": [
    "(lam (prev_dc_inv_1 '.' ',' $0))",
    "(lam (prev_dc_inv_1 '.' ',' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_1 LPAREN SPACE $0))",
    "(lam (map (lam (if (char-eq? SPACE $0) LPAREN $0)) $0))",
    "(lam (fold $0 $0 (lam (lam (if (char-eq? ',' $1) empty (cons $1 $0))))))",
    "(lam (prev_dc_inv_0 $0 (fold (cdr $0) 0 (lam (lam (+ (if (char-eq? ',' $1) 0 $0) 1))))))",
    "(lam (fold $0 $0 (lam (lam (if (char-eq? LPAREN $1) empty (cons $1 $0))))))",
    "(lam (fold $0 empty (lam (lam (if (char-eq? LPAREN $1) empty (cons $1 $0))))))",
    "(lam (lam (prev_dc_inv_2 (cons LPAREN $0) $1)))",
    "(lam (lam (prev_dc_inv_2 (cons (fold $0 ',' (lam (lam LPAREN))) $0) $1)))",
    "(lam (lam (prev_dc_inv_2 (cons '-' $0) $1)))",
    "(lam (lam (prev_dc_inv_2 (cons '-' $0) (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_2 (cons LPAREN (cons ',' $0)) $1)))",
    "(lam (lam (prev_dc_inv_2 (cons LPAREN (cons ',' $0)) (map (lam $0) $1))))",
    "(lam (prev_dc_inv_0 $0 (length (cdr (cdr $0)))))",
    "(lam (prev_dc_inv_0 $0 (- (length (cdr $0)) 1)))",
    "(lam (prev_dc_inv_0 $0 (+ 1 (+ 1 (+ 1 1)))))",
    "(lam (prev_dc_inv_0 $0 (+ 1 (+ 1 (fold (cdr $0) (+ 1 1) (lam (lam $0)))))))",
    "(lam (cons (car $0) (cons '-' empty)))",
    "(lam (cons (car $0) (map (lam '-') (range 1))))",
    "(lam (lam (prev_dc_inv_3 $1 $0)))",
    "(lam (lam (cons (car $1) (cons '.' (cons (car $0) (prev_dc_inv_0 (cons '.' empty) 1))))))",
    "(lam (lam (prev_dc_inv_3 $1 $0)))",
    "(lam (lam (prev_dc_inv_2 (cons '.' (cons (car $0) (cons '.' empty))) (prev_dc_inv_0 $1 1))))",
    "(lam (lam (prev_dc_inv_2 $0 $1)))",
    "(lam (lam (prev_dc_inv_2 (map (lam $0) $0) $1)))",
    "(lam (lam (prev_dc_inv_2 $0 $1)))",
    "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_2 $0 $1)))",
    "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
    "(lam (prev_dc_inv_2 STRING $0))",
    "(lam (prev_dc_inv_2 (map (lam $0) STRING) $0))",
    "(lam (prev_dc_inv_2 $0 STRING))",
    "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
    "(lam (prev_dc_inv_2 $0 STRING))",
    "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
    "(lam (prev_dc_inv_2 (cons RPAREN empty) (cons LPAREN $0)))",
    "(lam (cons LPAREN (prev_dc_inv_2 (cons RPAREN empty) $0)))"
  ],
  "invs": [
    {
      "body": "(lam (fold $0 $0 (lam (lam (if (char-eq? #0 $1) empty (cons $1 $0))))))",
      "dreamcoder": "#(lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $3 $1) empty (cons $1 $0)))))))",
      "arity": 1,
      "name": "fn_4",
      "rewritten": [
        "(lam (prev_dc_inv_1 '.' ',' $0))",
        "(lam (prev_dc_inv_1 '.' ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 LPAREN SPACE $0))",
        "(lam (map (lam (if (char-eq? SPACE $0) LPAREN $0)) $0))",
        "(fn_4 ',')",
        "(lam (prev_dc_inv_0 $0 (fold (cdr $0) 0 (lam (lam (+ (if (char-eq? ',' $1) 0 $0) 1))))))",
        "(fn_4 LPAREN)",
        "(lam (fold $0 empty (lam (lam (if (char-eq? LPAREN $1) empty (cons $1 $0))))))",
        "(lam (lam (prev_dc_inv_2 (cons LPAREN $0) $1)))",
        "(lam (lam (prev_dc_inv_2 (cons (fold $0 ',' (lam (lam LPAREN))) $0) $1)))",
        "(lam (lam (prev_dc_inv_2 (cons '-' $0) $1)))",
        "(lam (lam (prev_dc_inv_2 (cons '-' $0) (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_2 (cons LPAREN (cons ',' $0)) $1)))",
        "(lam (lam (prev_dc_inv_2 (cons LPAREN (cons ',' $0)) (map (lam $0) $1))))",
        "(lam (prev_dc_inv_0 $0 (length (cdr (cdr $0)))))",
        "(lam (prev_dc_inv_0 $0 (- (length (cdr $0)) 1)))",
        "(lam (prev_dc_inv_0 $0 (+ 1 (+ 1 (+ 1 1)))))",
        "(lam (prev_dc_inv_0 $0 (+ 1 (+ 1 (fold (cdr $0) (+ 1 1) (lam (lam $0)))))))",
        "(lam (cons (car $0) (cons '-' empty)))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (lam (prev_dc_inv_3 $1 $0)))",
        "(lam (lam (cons (car $1) (cons '.' (cons (car $0) (prev_dc_inv_0 (cons '.' empty) 1))))))",
        "(lam (lam (prev_dc_inv_3 $1 $0)))",
        "(lam (lam (prev_dc_inv_2 (cons '.' (cons (car $0) (cons '.' empty))) (prev_dc_inv_0 $1 1))))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 (map (lam $0) $0) $1)))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_2 $0 $1)))",
        "(lam (lam (prev_dc_inv_2 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_2 STRING $0))",
        "(lam (prev_dc_inv_2 (map (lam $0) STRING) $0))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_2 (cons RPAREN empty) (cons LPAREN $0)))",
        "(lam (cons LPAREN (prev_dc_inv_2 (cons RPAREN empty) $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN SPACE $0))",
        "(lambda (map (lambda (if (char-eq? SPACE $0) LPAREN $0)) $0))",
        "(#(lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $3 $1) empty (cons $1 $0))))))) ',')",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (fold (cdr $0) 0 (lambda (lambda (+ (if (char-eq? ',' $1) 0 $0) 1))))))",
        "(#(lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $3 $1) empty (cons $1 $0))))))) LPAREN)",
        "(lambda (fold $0 empty (lambda (lambda (if (char-eq? LPAREN $1) empty (cons $1 $0))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons (fold $0 ',' (lambda (lambda LPAREN))) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '-' $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '-' $0) (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN (cons ',' $0)) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN (cons ',' $0)) (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (length (cdr (cdr $0)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (- (length (cdr $0)) 1)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ 1 (+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ 1 (+ 1 (fold (cdr $0) (+ 1 1) (lambda (lambda $0)))))))",
        "(lambda (cons (car $0) (cons '-' empty)))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $1 $0)))",
        "(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (cons '.' empty) 1))))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '.' (cons (car $0) (cons '.' empty))) (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 1))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0)))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))"
      ],
      "utility": 811,
      "expected_cost": 8187,
      "final_cost": 8187,
      "multiplier": 1.2227922315866617,
      "multiplier_wrt_orig": 1.2227922315866617,
      "num_uses": 2,
      "uses": [
        {
          "fn_4 ','": "(lam (fold $0 $0 (lam (lam (if (char-eq? ',' $1) empty (cons $1 $0))))))"
        },
        {
          "fn_4 LPAREN": "(lam (fold $0 $0 (lam (lam (if (char-eq? LPAREN $1) empty (cons $1 $0))))))"
        }
      ]
    }
  ]
}