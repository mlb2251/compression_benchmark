{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T21.49.39/bench009_it10.json --max-arity=3 --threads=1 --iterations=1 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T21.49.39/out/stitch/2022-10-04_19-36-09/raw/bench009_it10.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.49.39/bench009_it10.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.49.39/out/stitch/2022-10-04_19-36-09/raw/bench009_it10.json",
    "iterations": 1,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 82203,
  "original": [
    "(lam (prev_dc_inv_5 LPAREN ',' $0))",
    "(lam (prev_dc_inv_5 LPAREN ',' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 RPAREN '.' $0))",
    "(lam (prev_dc_inv_5 RPAREN '.' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 ',' '-' $0))",
    "(lam (prev_dc_inv_5 ',' '-' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 '.' LPAREN $0))",
    "(lam (prev_dc_inv_5 '.' LPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 '.' ',' $0))",
    "(lam (prev_dc_inv_5 '.' ',' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 RPAREN LPAREN $0))",
    "(lam (prev_dc_inv_5 RPAREN LPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 SPACE '-' $0))",
    "(lam (prev_dc_inv_5 SPACE '-' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 LPAREN SPACE $0))",
    "(lam (map (lam (if (char-eq? SPACE $0) LPAREN $0)) $0))",
    "(lam (prev_dc_inv_9 $0 '.'))",
    "(lam (prev_dc_inv_9 (prev_dc_inv_6 $0 $0) '.'))",
    "(lam (prev_dc_inv_16 $0 ',' '.'))",
    "(lam (prev_dc_inv_9 (cdr (prev_dc_inv_9 (cdr (fold (cdr (prev_dc_inv_9 $0 '.')) $0 (lam (lam (cdr $0))))) SPACE)) '.'))",
    "(lam (prev_dc_inv_14 (prev_dc_inv_12 $0) (lam ($0 ',')) RPAREN))",
    "(lam (prev_dc_inv_14 $0 (lam (cdr (prev_dc_inv_12 ($0 ',')))) RPAREN))",
    "(lam (prev_dc_inv_9 $0 ','))",
    "(lam (prev_dc_inv_4 $0 (fold (cdr $0) 0 (lam (lam (prev_dc_inv_0 (if (char-eq? ',' $1) 0 $0)))))))",
    "(lam (prev_dc_inv_9 $0 SPACE))",
    "(lam (prev_dc_inv_9 (prev_dc_inv_9 $0 '.') SPACE))",
    "(lam (prev_dc_inv_16 $0 '.' SPACE))",
    "(lam (prev_dc_inv_16 $0 ',' SPACE))",
    "(lam (prev_dc_inv_9 $0 LPAREN))",
    "(lam (fold $0 empty (lam (lam (if (char-eq? LPAREN $1) empty (cons $1 $0))))))",
    "(lam (prev_dc_inv_16 $0 SPACE LPAREN))",
    "(lam (prev_dc_inv_14 $0 (lam ($0 LPAREN)) LPAREN))",
    "(lam (prev_dc_inv_15 (prev_dc_inv_10 $0 '.' $0) '.'))",
    "(lam (prev_dc_inv_15 (prev_dc_inv_10 $0 SPACE $0) SPACE))",
    "(lam (prev_dc_inv_16 $0 '.' RPAREN))",
    "(lam (prev_dc_inv_16 $0 SPACE RPAREN))",
    "(lam (prev_dc_inv_14 (prev_dc_inv_12 $0) (lam ($0 '-')) RPAREN))",
    "(lam (prev_dc_inv_14 $0 (lam (cdr (prev_dc_inv_12 ($0 '-')))) RPAREN))",
    "(lam (prev_dc_inv_9 $0 '-'))",
    "(lam (prev_dc_inv_9 (prev_dc_inv_9 $0 '.') '-'))",
    "(lam (prev_dc_inv_16 $0 '.' '-'))",
    "(lam (prev_dc_inv_16 $0 SPACE '-'))",
    "(lam (lam (prev_dc_inv_10 $0 '.' $1)))",
    "(lam (lam (prev_dc_inv_10 (map (lam $0) $0) '.' $1)))",
    "(lam (lam (prev_dc_inv_10 $0 SPACE $1)))",
    "(lam (lam (prev_dc_inv_6 (cons SPACE $0) $1)))",
    "(lam (lam (prev_dc_inv_10 $0 LPAREN $1)))",
    "(lam (lam (prev_dc_inv_10 $0 (fold $0 ',' (lam (lam LPAREN))) $1)))",
    "(lam (lam (prev_dc_inv_10 $0 RPAREN $1)))",
    "(lam (lam (prev_dc_inv_6 (cons RPAREN $0) $1)))",
    "(lam (lam (prev_dc_inv_10 $0 '-' $1)))",
    "(lam (lam (prev_dc_inv_10 $0 '-' (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_11 $0 SPACE SPACE $1)))",
    "(lam (lam (prev_dc_inv_11 $0 SPACE SPACE (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_11 $0 SPACE '.' $1)))",
    "(lam (lam (prev_dc_inv_10 (cons SPACE $0) '.' $1)))",
    "(lam (lam (prev_dc_inv_11 $0 ',' LPAREN $1)))",
    "(lam (lam (prev_dc_inv_11 $0 ',' LPAREN (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_11 $0 '.' '.' $1)))",
    "(lam (lam (prev_dc_inv_10 $0 '.' (prev_dc_inv_10 empty '.' $1))))",
    "(lam (lam (prev_dc_inv_11 $0 '-' '.' $1)))",
    "(lam (lam (prev_dc_inv_10 $0 '-' (prev_dc_inv_10 empty '.' $1))))",
    "(lam (lam (prev_dc_inv_11 $0 '-' SPACE $1)))",
    "(lam (lam (prev_dc_inv_10 (cons '-' $0) SPACE $1)))",
    "(lam (prev_dc_inv_4 $0 (length (cdr $0))))",
    "(lam (prev_dc_inv_4 $0 (- (length $0) 1)))",
    "(lam (prev_dc_inv_4 $0 (length (cdr (cdr $0)))))",
    "(lam (prev_dc_inv_4 $0 (- (length (cdr $0)) 1)))",
    "(lam (prev_dc_inv_4 $0 (prev_dc_inv_0 1)))",
    "(lam (prev_dc_inv_4 $0 (prev_dc_inv_0 (length (range 1)))))",
    "(lam (prev_dc_inv_4 $0 (prev_dc_inv_0 (prev_dc_inv_0 1))))",
    "(lam (prev_dc_inv_4 $0 (- prev_dc_inv_1 1)))",
    "(lam (prev_dc_inv_4 $0 (prev_dc_inv_2 $0)))",
    "(lam (prev_dc_inv_4 $0 (- (length $0) (length (prev_dc_inv_7 $0 $0)))))",
    "(lam (prev_dc_inv_4 $0 prev_dc_inv_1))",
    "(lam (prev_dc_inv_4 $0 (prev_dc_inv_0 (prev_dc_inv_0 (fold (cdr $0) (prev_dc_inv_0 1) (lam (lam $0)))))))",
    "(lam (prev_dc_inv_4 $0 (prev_dc_inv_2 (cdr $0))))",
    "(lam (prev_dc_inv_4 (prev_dc_inv_6 $0 $0) (prev_dc_inv_2 (cdr $0))))",
    "(lam (prev_dc_inv_4 $0 (prev_dc_inv_0 prev_dc_inv_1)))",
    "(lam (prev_dc_inv_4 $0 (prev_dc_inv_0 (length (prev_dc_inv_7 $0 $0)))))",
    "(lam (prev_dc_inv_14 $0 (lam ($0 ',')) '.'))",
    "(lam (prev_dc_inv_16 (prev_dc_inv_9 $0 '.') '.' ','))",
    "(lam (prev_dc_inv_16 $0 '.' LPAREN))",
    "(lam (prev_dc_inv_16 $0 SPACE LPAREN))",
    "(lam (prev_dc_inv_16 $0 '.' ','))",
    "(lam (prev_dc_inv_16 $0 SPACE ','))",
    "(lam (prev_dc_inv_14 $0 (lam ($0 '-')) RPAREN))",
    "(lam (prev_dc_inv_9 (prev_dc_inv_16 $0 '.' '-') RPAREN))",
    "(lam (prev_dc_inv_15 $0 ','))",
    "(lam (prev_dc_inv_9 (cdr (cdr (fold (cdr (prev_dc_inv_9 $0 RPAREN)) $0 (lam (lam (cdr $0)))))) ','))",
    "(lam (prev_dc_inv_3 $0 '.'))",
    "(lam (cdr (cdr (prev_dc_inv_7 $0 $0))))",
    "(lam (prev_dc_inv_3 $0 ','))",
    "(lam (prev_dc_inv_3 (prev_dc_inv_9 $0 '.') ','))",
    "(lam (prev_dc_inv_3 $0 SPACE))",
    "(lam (prev_dc_inv_10 empty SPACE (prev_dc_inv_4 $0 1)))",
    "(lam (prev_dc_inv_3 $0 LPAREN))",
    "(lam (prev_dc_inv_3 (prev_dc_inv_9 $0 '.') LPAREN))",
    "(lam (prev_dc_inv_3 $0 RPAREN))",
    "(lam (prev_dc_inv_3 (prev_dc_inv_9 $0 '.') RPAREN))",
    "(lam (prev_dc_inv_3 $0 '-'))",
    "(lam (cons (car $0) (map (lam '-') (range 1))))",
    "(lam (prev_dc_inv_7 $0 (prev_dc_inv_14 $0 (lam ($0 '.')) '.')))",
    "(lam (prev_dc_inv_7 $0 (prev_dc_inv_14 $0 (lam ($0 '.')) SPACE)))",
    "(lam (lam (prev_dc_inv_7 $1 $0)))",
    "(lam (lam (prev_dc_inv_7 $1 (prev_dc_inv_9 $0 LPAREN))))",
    "(lam (prev_dc_inv_7 $0 (prev_dc_inv_16 $0 '.' ',')))",
    "(lam (prev_dc_inv_7 $0 (prev_dc_inv_16 $0 SPACE ',')))",
    "(lam (lam (prev_dc_inv_7 $1 $0)))",
    "(lam (lam (cons (car $1) (cons '.' (cons (car $0) (prev_dc_inv_4 (cons '.' empty) 1))))))",
    "(lam (prev_dc_inv_7 $0 (prev_dc_inv_16 $0 '.' SPACE)))",
    "(lam (prev_dc_inv_7 $0 (prev_dc_inv_16 $0 ',' SPACE)))",
    "(lam (lam (prev_dc_inv_7 $1 $0)))",
    "(lam (lam (prev_dc_inv_7 $1 (prev_dc_inv_9 $0 '.'))))",
    "(lam (lam (prev_dc_inv_7 $1 $0)))",
    "(lam (lam (prev_dc_inv_10 (prev_dc_inv_3 $0 '.') '.' (prev_dc_inv_4 $1 1))))",
    "(lam (prev_dc_inv_7 $0 (prev_dc_inv_15 $0 '.')))",
    "(lam (prev_dc_inv_7 $0 (prev_dc_inv_15 $0 SPACE)))",
    "(lam (lam (prev_dc_inv_7 $1 $0)))",
    "(lam (lam (prev_dc_inv_7 $1 (prev_dc_inv_9 $0 '.'))))",
    "(lam (lam (prev_dc_inv_6 $0 $1)))",
    "(lam (lam (prev_dc_inv_6 (map (lam $0) $0) $1)))",
    "(lam (lam (prev_dc_inv_6 $0 $1)))",
    "(lam (lam (prev_dc_inv_6 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_6 $0 $1)))",
    "(lam (lam (prev_dc_inv_6 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_6 $0 $1)))",
    "(lam (lam (prev_dc_inv_6 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_6 $0 $1)))",
    "(lam (lam (prev_dc_inv_6 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_6 $0 $1)))",
    "(lam (lam (prev_dc_inv_6 $0 (map (lam $0) $1))))",
    "(lam (prev_dc_inv_8 $0))",
    "(lam (prev_dc_inv_6 $0 STRING))",
    "(lam (prev_dc_inv_6 STRING $0))",
    "(lam (prev_dc_inv_6 (prev_dc_inv_8 empty) $0))",
    "(lam (prev_dc_inv_13 $0))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_9 $0 SPACE)))",
    "(lam (prev_dc_inv_8 $0))",
    "(lam (prev_dc_inv_6 $0 STRING))",
    "(lam (prev_dc_inv_6 STRING $0))",
    "(lam (prev_dc_inv_6 (map (lam $0) STRING) $0))",
    "(lam (prev_dc_inv_8 $0))",
    "(lam (prev_dc_inv_8 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_13 $0))",
    "(lam (prev_dc_inv_13 (prev_dc_inv_6 $0 $0)))",
    "(lam (prev_dc_inv_8 $0))",
    "(lam (prev_dc_inv_8 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_13 $0))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_9 $0 SPACE)))",
    "(lam (prev_dc_inv_6 STRING $0))",
    "(lam (prev_dc_inv_6 (prev_dc_inv_8 empty) $0))",
    "(lam (prev_dc_inv_13 $0))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_9 $0 SPACE)))",
    "(lam (prev_dc_inv_8 $0))",
    "(lam (prev_dc_inv_8 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_6 STRING $0))",
    "(lam (prev_dc_inv_6 (prev_dc_inv_8 empty) $0))",
    "(lam (prev_dc_inv_13 $0))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_9 $0 SPACE)))",
    "(lam (prev_dc_inv_12 $0))",
    "(lam (prev_dc_inv_12 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_12 $0))",
    "(lam (prev_dc_inv_10 empty RPAREN (cons LPAREN $0)))",
    "(lam (prev_dc_inv_12 $0))",
    "(lam (prev_dc_inv_12 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_12 $0))",
    "(lam (prev_dc_inv_10 empty RPAREN (cons LPAREN $0)))",
    "(lam (prev_dc_inv_12 (prev_dc_inv_16 $0 '.' SPACE)))",
    "(lam (prev_dc_inv_12 (prev_dc_inv_16 $0 ',' SPACE)))"
  ],
  "invs": [
    {
      "body": "(lam (lam (prev_dc_inv_6 $0 $1)))",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
      "arity": 0,
      "name": "fn_17",
      "rewritten": [
        "(lam (prev_dc_inv_5 LPAREN ',' $0))",
        "(lam (prev_dc_inv_5 LPAREN ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 RPAREN '.' $0))",
        "(lam (prev_dc_inv_5 RPAREN '.' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 ',' '-' $0))",
        "(lam (prev_dc_inv_5 ',' '-' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 '.' LPAREN $0))",
        "(lam (prev_dc_inv_5 '.' LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 '.' ',' $0))",
        "(lam (prev_dc_inv_5 '.' ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 RPAREN LPAREN $0))",
        "(lam (prev_dc_inv_5 RPAREN LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 SPACE '-' $0))",
        "(lam (prev_dc_inv_5 SPACE '-' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 LPAREN SPACE $0))",
        "(lam (map (lam (if (char-eq? SPACE $0) LPAREN $0)) $0))",
        "(lam (prev_dc_inv_9 $0 '.'))",
        "(lam (prev_dc_inv_9 (prev_dc_inv_6 $0 $0) '.'))",
        "(lam (prev_dc_inv_16 $0 ',' '.'))",
        "(lam (prev_dc_inv_9 (cdr (prev_dc_inv_9 (cdr (fold (cdr (prev_dc_inv_9 $0 '.')) $0 (lam (lam (cdr $0))))) SPACE)) '.'))",
        "(lam (prev_dc_inv_14 (prev_dc_inv_12 $0) (lam ($0 ',')) RPAREN))",
        "(lam (prev_dc_inv_14 $0 (lam (cdr (prev_dc_inv_12 ($0 ',')))) RPAREN))",
        "(lam (prev_dc_inv_9 $0 ','))",
        "(lam (prev_dc_inv_4 $0 (fold (cdr $0) 0 (lam (lam (prev_dc_inv_0 (if (char-eq? ',' $1) 0 $0)))))))",
        "(lam (prev_dc_inv_9 $0 SPACE))",
        "(lam (prev_dc_inv_9 (prev_dc_inv_9 $0 '.') SPACE))",
        "(lam (prev_dc_inv_16 $0 '.' SPACE))",
        "(lam (prev_dc_inv_16 $0 ',' SPACE))",
        "(lam (prev_dc_inv_9 $0 LPAREN))",
        "(lam (fold $0 empty (lam (lam (if (char-eq? LPAREN $1) empty (cons $1 $0))))))",
        "(lam (prev_dc_inv_16 $0 SPACE LPAREN))",
        "(lam (prev_dc_inv_14 $0 (lam ($0 LPAREN)) LPAREN))",
        "(lam (prev_dc_inv_15 (prev_dc_inv_10 $0 '.' $0) '.'))",
        "(lam (prev_dc_inv_15 (prev_dc_inv_10 $0 SPACE $0) SPACE))",
        "(lam (prev_dc_inv_16 $0 '.' RPAREN))",
        "(lam (prev_dc_inv_16 $0 SPACE RPAREN))",
        "(lam (prev_dc_inv_14 (prev_dc_inv_12 $0) (lam ($0 '-')) RPAREN))",
        "(lam (prev_dc_inv_14 $0 (lam (cdr (prev_dc_inv_12 ($0 '-')))) RPAREN))",
        "(lam (prev_dc_inv_9 $0 '-'))",
        "(lam (prev_dc_inv_9 (prev_dc_inv_9 $0 '.') '-'))",
        "(lam (prev_dc_inv_16 $0 '.' '-'))",
        "(lam (prev_dc_inv_16 $0 SPACE '-'))",
        "(lam (lam (prev_dc_inv_10 $0 '.' $1)))",
        "(lam (lam (prev_dc_inv_10 (map (lam $0) $0) '.' $1)))",
        "(lam (lam (prev_dc_inv_10 $0 SPACE $1)))",
        "(lam (lam (prev_dc_inv_6 (cons SPACE $0) $1)))",
        "(lam (lam (prev_dc_inv_10 $0 LPAREN $1)))",
        "(lam (lam (prev_dc_inv_10 $0 (fold $0 ',' (lam (lam LPAREN))) $1)))",
        "(lam (lam (prev_dc_inv_10 $0 RPAREN $1)))",
        "(lam (lam (prev_dc_inv_6 (cons RPAREN $0) $1)))",
        "(lam (lam (prev_dc_inv_10 $0 '-' $1)))",
        "(lam (lam (prev_dc_inv_10 $0 '-' (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_11 $0 SPACE SPACE $1)))",
        "(lam (lam (prev_dc_inv_11 $0 SPACE SPACE (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_11 $0 SPACE '.' $1)))",
        "(lam (lam (prev_dc_inv_10 (cons SPACE $0) '.' $1)))",
        "(lam (lam (prev_dc_inv_11 $0 ',' LPAREN $1)))",
        "(lam (lam (prev_dc_inv_11 $0 ',' LPAREN (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_11 $0 '.' '.' $1)))",
        "(lam (lam (prev_dc_inv_10 $0 '.' (prev_dc_inv_10 empty '.' $1))))",
        "(lam (lam (prev_dc_inv_11 $0 '-' '.' $1)))",
        "(lam (lam (prev_dc_inv_10 $0 '-' (prev_dc_inv_10 empty '.' $1))))",
        "(lam (lam (prev_dc_inv_11 $0 '-' SPACE $1)))",
        "(lam (lam (prev_dc_inv_10 (cons '-' $0) SPACE $1)))",
        "(lam (prev_dc_inv_4 $0 (length (cdr $0))))",
        "(lam (prev_dc_inv_4 $0 (- (length $0) 1)))",
        "(lam (prev_dc_inv_4 $0 (length (cdr (cdr $0)))))",
        "(lam (prev_dc_inv_4 $0 (- (length (cdr $0)) 1)))",
        "(lam (prev_dc_inv_4 $0 (prev_dc_inv_0 1)))",
        "(lam (prev_dc_inv_4 $0 (prev_dc_inv_0 (length (range 1)))))",
        "(lam (prev_dc_inv_4 $0 (prev_dc_inv_0 (prev_dc_inv_0 1))))",
        "(lam (prev_dc_inv_4 $0 (- prev_dc_inv_1 1)))",
        "(lam (prev_dc_inv_4 $0 (prev_dc_inv_2 $0)))",
        "(lam (prev_dc_inv_4 $0 (- (length $0) (length (prev_dc_inv_7 $0 $0)))))",
        "(lam (prev_dc_inv_4 $0 prev_dc_inv_1))",
        "(lam (prev_dc_inv_4 $0 (prev_dc_inv_0 (prev_dc_inv_0 (fold (cdr $0) (prev_dc_inv_0 1) (lam (lam $0)))))))",
        "(lam (prev_dc_inv_4 $0 (prev_dc_inv_2 (cdr $0))))",
        "(lam (prev_dc_inv_4 (prev_dc_inv_6 $0 $0) (prev_dc_inv_2 (cdr $0))))",
        "(lam (prev_dc_inv_4 $0 (prev_dc_inv_0 prev_dc_inv_1)))",
        "(lam (prev_dc_inv_4 $0 (prev_dc_inv_0 (length (prev_dc_inv_7 $0 $0)))))",
        "(lam (prev_dc_inv_14 $0 (lam ($0 ',')) '.'))",
        "(lam (prev_dc_inv_16 (prev_dc_inv_9 $0 '.') '.' ','))",
        "(lam (prev_dc_inv_16 $0 '.' LPAREN))",
        "(lam (prev_dc_inv_16 $0 SPACE LPAREN))",
        "(lam (prev_dc_inv_16 $0 '.' ','))",
        "(lam (prev_dc_inv_16 $0 SPACE ','))",
        "(lam (prev_dc_inv_14 $0 (lam ($0 '-')) RPAREN))",
        "(lam (prev_dc_inv_9 (prev_dc_inv_16 $0 '.' '-') RPAREN))",
        "(lam (prev_dc_inv_15 $0 ','))",
        "(lam (prev_dc_inv_9 (cdr (cdr (fold (cdr (prev_dc_inv_9 $0 RPAREN)) $0 (lam (lam (cdr $0)))))) ','))",
        "(lam (prev_dc_inv_3 $0 '.'))",
        "(lam (cdr (cdr (prev_dc_inv_7 $0 $0))))",
        "(lam (prev_dc_inv_3 $0 ','))",
        "(lam (prev_dc_inv_3 (prev_dc_inv_9 $0 '.') ','))",
        "(lam (prev_dc_inv_3 $0 SPACE))",
        "(lam (prev_dc_inv_10 empty SPACE (prev_dc_inv_4 $0 1)))",
        "(lam (prev_dc_inv_3 $0 LPAREN))",
        "(lam (prev_dc_inv_3 (prev_dc_inv_9 $0 '.') LPAREN))",
        "(lam (prev_dc_inv_3 $0 RPAREN))",
        "(lam (prev_dc_inv_3 (prev_dc_inv_9 $0 '.') RPAREN))",
        "(lam (prev_dc_inv_3 $0 '-'))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_14 $0 (lam ($0 '.')) '.')))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_14 $0 (lam ($0 '.')) SPACE)))",
        "(lam (lam (prev_dc_inv_7 $1 $0)))",
        "(lam (lam (prev_dc_inv_7 $1 (prev_dc_inv_9 $0 LPAREN))))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_16 $0 '.' ',')))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_16 $0 SPACE ',')))",
        "(lam (lam (prev_dc_inv_7 $1 $0)))",
        "(lam (lam (cons (car $1) (cons '.' (cons (car $0) (prev_dc_inv_4 (cons '.' empty) 1))))))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_16 $0 '.' SPACE)))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_16 $0 ',' SPACE)))",
        "(lam (lam (prev_dc_inv_7 $1 $0)))",
        "(lam (lam (prev_dc_inv_7 $1 (prev_dc_inv_9 $0 '.'))))",
        "(lam (lam (prev_dc_inv_7 $1 $0)))",
        "(lam (lam (prev_dc_inv_10 (prev_dc_inv_3 $0 '.') '.' (prev_dc_inv_4 $1 1))))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_15 $0 '.')))",
        "(lam (prev_dc_inv_7 $0 (prev_dc_inv_15 $0 SPACE)))",
        "(lam (lam (prev_dc_inv_7 $1 $0)))",
        "(lam (lam (prev_dc_inv_7 $1 (prev_dc_inv_9 $0 '.'))))",
        "fn_17",
        "(lam (lam (prev_dc_inv_6 (map (lam $0) $0) $1)))",
        "fn_17",
        "(lam (lam (prev_dc_inv_6 $0 (map (lam $0) $1))))",
        "fn_17",
        "(lam (lam (prev_dc_inv_6 $0 (map (lam $0) $1))))",
        "fn_17",
        "(lam (lam (prev_dc_inv_6 $0 (map (lam $0) $1))))",
        "fn_17",
        "(lam (lam (prev_dc_inv_6 $0 (map (lam $0) $1))))",
        "fn_17",
        "(lam (lam (prev_dc_inv_6 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (prev_dc_inv_6 $0 STRING))",
        "(lam (prev_dc_inv_6 STRING $0))",
        "(lam (prev_dc_inv_6 (prev_dc_inv_8 empty) $0))",
        "(lam (prev_dc_inv_13 $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_9 $0 SPACE)))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (prev_dc_inv_6 $0 STRING))",
        "(lam (prev_dc_inv_6 STRING $0))",
        "(lam (prev_dc_inv_6 (map (lam $0) STRING) $0))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (prev_dc_inv_8 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_13 $0))",
        "(lam (prev_dc_inv_13 (prev_dc_inv_6 $0 $0)))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (prev_dc_inv_8 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_13 $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_9 $0 SPACE)))",
        "(lam (prev_dc_inv_6 STRING $0))",
        "(lam (prev_dc_inv_6 (prev_dc_inv_8 empty) $0))",
        "(lam (prev_dc_inv_13 $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_9 $0 SPACE)))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (prev_dc_inv_8 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_6 STRING $0))",
        "(lam (prev_dc_inv_6 (prev_dc_inv_8 empty) $0))",
        "(lam (prev_dc_inv_13 $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_9 $0 SPACE)))",
        "(lam (prev_dc_inv_12 $0))",
        "(lam (prev_dc_inv_12 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_12 $0))",
        "(lam (prev_dc_inv_10 empty RPAREN (cons LPAREN $0)))",
        "(lam (prev_dc_inv_12 $0))",
        "(lam (prev_dc_inv_12 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_12 $0))",
        "(lam (prev_dc_inv_10 empty RPAREN (cons LPAREN $0)))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_16 $0 '.' SPACE)))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_16 $0 ',' SPACE)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN '.' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN '.' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) ',' '-' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) ',' '-' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) RPAREN LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) SPACE '-' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) SPACE '-' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN SPACE $0))",
        "(lambda (map (lambda (if (char-eq? SPACE $0) LPAREN $0)) $0))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 '.'))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) '.'))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 ',' '.'))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr (fold (cdr (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 '.')) $0 (lambda (lambda (cdr $0))))) SPACE)) '.'))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) $0) (lambda ($0 ',')) RPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $0 (lambda (cdr (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) ($0 ',')))) RPAREN))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 ','))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (fold (cdr $0) 0 (lambda (lambda (#(+ 1) (if (char-eq? ',' $1) 0 $0)))))))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 SPACE))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 '.') SPACE))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 '.' SPACE))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 ',' SPACE))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 LPAREN))",
        "(lambda (fold $0 empty (lambda (lambda (if (char-eq? LPAREN $1) empty (cons $1 $0))))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 SPACE LPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $0 (lambda ($0 LPAREN)) LPAREN))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $0 (lambda ($0 RPAREN)))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) $0 '.' $0) '.'))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $0 (lambda ($0 RPAREN)))) (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) $0 SPACE $0) SPACE))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 '.' RPAREN))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 SPACE RPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) $0) (lambda ($0 '-')) RPAREN))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $0 (lambda (cdr (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) ($0 '-')))) RPAREN))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 '-'))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 '.') '-'))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 '.' '-'))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 SPACE '-'))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) $0 '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) (map (lambda $0) $0) '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) $0 SPACE $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons SPACE $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) $0 LPAREN $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) $0 (fold $0 ',' (lambda (lambda LPAREN))) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) $0 RPAREN $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) $0 '-' $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) $0 '-' (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) (cons $0 $1)))) $0 SPACE SPACE $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) (cons $0 $1)))) $0 SPACE SPACE (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) (cons $0 $1)))) $0 SPACE '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) (cons SPACE $0) '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) (cons $0 $1)))) $0 ',' LPAREN $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) (cons $0 $1)))) $0 ',' LPAREN (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) (cons $0 $1)))) $0 '.' '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) $0 '.' (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty '.' $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) (cons $0 $1)))) $0 '-' '.' $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) $0 '-' (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty '.' $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) (cons $0 $1)))) $0 '-' SPACE $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) (cons '-' $0) SPACE $1)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (length (cdr $0))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (- (length $0) 1)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (length (cdr (cdr $0)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (- (length (cdr $0)) 1)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(+ 1) 1)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(+ 1) (length (range 1)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(+ 1) (#(+ 1) 1))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (- #(#(+ 1) (#(+ 1) (#(+ 1) 1))) 1)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(lambda (length (cdr (cdr (cdr (cdr $0)))))) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (- (length $0) (length (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $0 $0)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 #(#(+ 1) (#(+ 1) (#(+ 1) 1)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(+ 1) (#(+ 1) (fold (cdr $0) (#(+ 1) 1) (lambda (lambda $0)))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(lambda (length (cdr (cdr (cdr (cdr $0)))))) (cdr $0))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0) (#(lambda (length (cdr (cdr (cdr (cdr $0)))))) (cdr $0))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(+ 1) #(#(+ 1) (#(+ 1) (#(+ 1) 1))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (#(+ 1) (length (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $0 $0)))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $0 (lambda ($0 ',')) '.'))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 '.') '.' ','))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 '.' LPAREN))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 SPACE LPAREN))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 '.' ','))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 SPACE ','))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $0 (lambda ($0 '-')) RPAREN))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 '.' '-') RPAREN))",
        "(lambda (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $0 (lambda ($0 RPAREN)))) $0 ','))",
        "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr (cdr (fold (cdr (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 RPAREN)) $0 (lambda (lambda (cdr $0)))))) ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.'))",
        "(lambda (cdr (cdr (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $0 $0))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 '.') ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty SPACE (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 1)))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 LPAREN))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 '.') LPAREN))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 RPAREN))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 '.') RPAREN))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $0 (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $0 (lambda ($0 '.')) '.')))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $0 (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $0 (lambda ($0 '.')) SPACE)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $1 (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 LPAREN))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $0 (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 '.' ',')))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $0 (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 SPACE ',')))",
        "(lambda (lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $1 $0)))",
        "(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (cons '.' empty) 1))))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $0 (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 '.' SPACE)))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $0 (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 ',' SPACE)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $1 (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 '.'))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.') '.' (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $1 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $0 (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $0 (lambda ($0 RPAREN)))) $0 '.')))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $0 (#(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $0 (lambda ($0 RPAREN)))) $0 SPACE)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $1 (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 '.'))))",
        "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) empty) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 SPACE)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE)) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 SPACE)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) empty) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 SPACE)))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) empty) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) $0) SPACE)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING)) (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $0 SPACE)))",
        "(lambda (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) $0))",
        "(lambda (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN (cons LPAREN $0)))",
        "(lambda (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) $0))",
        "(lambda (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) $0))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN (cons LPAREN $0)))",
        "(lambda (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 '.' SPACE)))",
        "(lambda (#(lambda (cons LPAREN (#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1)))) empty RPAREN $0))) (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) (cdr ($0 (lambda (fold (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) $2 $0) $2 (lambda (lambda (cdr $0)))))))))) $2 (lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $2 $1) empty (cons $1 $0))))))) ($0 $1) $2)) $0)))) $0 ',' SPACE)))"
      ],
      "utility": 920,
      "expected_cost": 30315,
      "final_cost": 30315,
      "multiplier": 1.0403760514596734,
      "multiplier_wrt_orig": 1.0403760514596734,
      "num_uses": 6,
      "uses": [
        {
          "fn_17 ": "(lam (lam (prev_dc_inv_6 $0 $1)))"
        }
      ]
    }
  ]
}