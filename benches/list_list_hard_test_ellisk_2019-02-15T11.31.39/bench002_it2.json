{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.425683,
        "productions": [
            {
                "expression": "gt?",
                "logProbability": -0.031935
            },
            {
                "expression": "eq?",
                "logProbability": -0.031935
            },
            {
                "expression": "is-prime",
                "logProbability": -0.064725
            },
            {
                "expression": "empty?",
                "logProbability": -0.064725
            },
            {
                "expression": "is-square",
                "logProbability": -0.064726
            },
            {
                "expression": "1",
                "logProbability": -0.517405
            },
            {
                "expression": "+",
                "logProbability": -0.60261
            },
            {
                "expression": "length",
                "logProbability": -0.61298
            },
            {
                "expression": "-",
                "logProbability": -0.657921
            },
            {
                "expression": "0",
                "logProbability": -0.676362
            },
            {
                "expression": "mod",
                "logProbability": -0.678154
            },
            {
                "expression": "*",
                "logProbability": -0.678728
            },
            {
                "expression": "map",
                "logProbability": -0.818802
            },
            {
                "expression": "range",
                "logProbability": -0.827397
            },
            {
                "expression": "cdr",
                "logProbability": -0.848832
            },
            {
                "expression": "cons",
                "logProbability": -0.87838
            },
            {
                "expression": "empty",
                "logProbability": -0.910371
            },
            {
                "expression": "unfold",
                "logProbability": -0.944845
            },
            {
                "expression": "fold",
                "logProbability": -1.219247
            },
            {
                "expression": "index",
                "logProbability": -1.219268
            },
            {
                "expression": "if",
                "logProbability": -1.283808
            },
            {
                "expression": "car",
                "logProbability": -1.283809
            },
            {
                "expression": "#(lambda (map (lambda (eq? (mod $0 $1) 0))))",
                "logProbability": -0.294928
            },
            {
                "expression": "#(+ 1 #(+ 1 (+ 1 1)))",
                "logProbability": -0.50977
            },
            {
                "expression": "#(+ 1 (+ 1 1))",
                "logProbability": -0.51911
            },
            {
                "expression": "#(lambda (map (lambda (+ $0 $1))))",
                "logProbability": -0.736644
            },
            {
                "expression": "#(lambda (map (lambda (mod $0 $1))))",
                "logProbability": -0.796848
            },
            {
                "expression": "#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1))))))",
                "logProbability": -0.880308
            }
        ]
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "add-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (+ $0 $1)))) 1 $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (+ 1 $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "add-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (+ 1 (+ $0 (+ 1 1)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "add-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (+ 1 (+ $0 #(+ 1 (+ 1 1))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-index-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 (cdr (cdr (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (cons (index #(+ 1 (+ 1 1)) $0) empty) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-k with k=0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 (range 1) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (cons 0 empty) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 (cons #(+ 1 #(+ 1 (+ 1 1))) empty) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (cons #(+ 1 #(+ 1 (+ 1 1))) (cdr (range 1))) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-k with k=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 (cons (+ #(+ 1 #(+ 1 (+ 1 1))) 1) empty) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) (cdr (cdr (range #(+ 1 (+ 1 1)))))) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-geq-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (gt? $0 #(+ 1 (+ 1 1)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 empty (lambda (lambda (cons (gt? $1 #(+ 1 (+ 1 1))) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-is-mod-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 (+ 1 1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (gt? 1 (mod $0 #(+ 1 (+ 1 1))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-is-mod-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (eq? #(+ 1 #(+ 1 (+ 1 1))) $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (eq? $0 #(+ 1 #(+ 1 (+ 1 1))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=1 and n=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=1 and n=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 $1)))) (+ #(+ 1 #(+ 1 (+ 1 1))) 1) (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 $1)))) (+ 1 #(+ 1 #(+ 1 (+ 1 1)))) (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=5 and n=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (map (lambda (+ $0 $1)))) 1 $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "is-mod-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (is-prime (+ (index (length $0) (cons #(+ 1 #(+ 1 (+ 1 1))) $0)) #(+ 1 (+ 1 1)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (is-prime (+ #(+ 1 (+ 1 1)) (index (length $0) (cons #(+ 1 #(+ 1 (+ 1 1))) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "is-mod-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $0 $1))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $1 $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "len",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (length $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (length (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "modulo-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 $1)))) (+ 1 1) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (mod $0 $1)))) (- #(+ 1 (+ 1 1)) 1) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "mult-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (+ $0 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "reverse",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (cdr (range 1)) (lambda (lambda (cons (index (length $0) $2) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=1 and n=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cons (car $0) empty))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (map (lambda (+ $0 $1)))) (car $0) (range 1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=2 and n=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index $0 $1)) (cdr (range #(+ 1 #(+ 1 (+ 1 1)))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=3 and n=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (index $0 (cdr (cdr $1)))) (range (+ #(+ 1 #(+ 1 (+ 1 1))) 1))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index $0 (cdr (cdr $1)))) (range (+ 1 #(+ 1 #(+ 1 (+ 1 1)))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "take-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold (range #(+ 1 #(+ 1 (+ 1 1)))) empty (lambda (lambda (cons (index $1 $2) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 2,
        "num_learned": 3,
        "new_grammar": {
            "logVariable": -0.431038,
            "productions": [
                {
                    "expression": "is-prime",
                    "logProbability": -0.092523
                },
                {
                    "expression": "eq?",
                    "logProbability": -0.09253
                },
                {
                    "expression": "gt?",
                    "logProbability": -0.09253
                },
                {
                    "expression": "is-square",
                    "logProbability": -0.092537
                },
                {
                    "expression": "empty?",
                    "logProbability": -0.12532
                },
                {
                    "expression": "length",
                    "logProbability": -0.763533
                },
                {
                    "expression": "+",
                    "logProbability": -0.766732
                },
                {
                    "expression": "1",
                    "logProbability": -0.784168
                },
                {
                    "expression": "0",
                    "logProbability": -0.82003
                },
                {
                    "expression": "-",
                    "logProbability": -0.839007
                },
                {
                    "expression": "mod",
                    "logProbability": -0.861292
                },
                {
                    "expression": "*",
                    "logProbability": -0.8613
                },
                {
                    "expression": "map",
                    "logProbability": -0.966994
                },
                {
                    "expression": "cdr",
                    "logProbability": -0.997401
                },
                {
                    "expression": "cons",
                    "logProbability": -1.000826
                },
                {
                    "expression": "range",
                    "logProbability": -1.008738
                },
                {
                    "expression": "empty",
                    "logProbability": -1.032039
                },
                {
                    "expression": "unfold",
                    "logProbability": -1.093317
                },
                {
                    "expression": "index",
                    "logProbability": -1.373324
                },
                {
                    "expression": "fold",
                    "logProbability": -1.435894
                },
                {
                    "expression": "car",
                    "logProbability": -1.469824
                },
                {
                    "expression": "if",
                    "logProbability": -1.500456
                },
                {
                    "expression": "#(lambda (map (lambda (eq? (mod $0 $1) 0))))",
                    "logProbability": -0.299662
                },
                {
                    "expression": "#(+ 1 (+ 1 1))",
                    "logProbability": -0.6274
                },
                {
                    "expression": "#(+ 1 #(+ 1 (+ 1 1)))",
                    "logProbability": -0.660217
                },
                {
                    "expression": "#(+ #(+ 1 #(+ 1 (+ 1 1))) 1)",
                    "logProbability": -0.76717
                },
                {
                    "expression": "#(lambda (map (lambda (+ $0 $1))))",
                    "logProbability": -0.93815
                },
                {
                    "expression": "#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1))))",
                    "logProbability": -0.952471
                },
                {
                    "expression": "#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0))))))",
                    "logProbability": -0.968154
                },
                {
                    "expression": "#(lambda (map (lambda (mod $0 $1))))",
                    "logProbability": -0.982925
                },
                {
                    "expression": "#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1))))))",
                    "logProbability": -1.02878
                }
            ]
        }
    }
}