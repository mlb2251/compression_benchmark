{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/bench002_it2.json --max-arity=3 --threads=1 --iterations=3 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/out/stitch/2022-10-04_19-36-07/raw/bench002_it2.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/bench002_it2.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/out/stitch/2022-10-04_19-36-07/raw/bench002_it2.json",
    "iterations": 3,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 31351,
  "original": [
    "(lam (prev_dc_inv_2 1 $0))",
    "(lam (map (lam (+ 1 $0)) $0))",
    "(lam (prev_dc_inv_2 prev_dc_inv_0 $0))",
    "(lam (map (lam (+ 1 (+ $0 (+ 1 1)))) $0))",
    "(lam (prev_dc_inv_2 prev_dc_inv_1 $0))",
    "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
    "(lam (fold $0 (cdr (cdr (cdr (prev_dc_inv_5 $0)))) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (cons (index prev_dc_inv_0 $0) empty) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (range 1) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (cons 0 empty) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (cons prev_dc_inv_1 empty) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (cons prev_dc_inv_1 (cdr (range 1))) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (cons (+ prev_dc_inv_1 1) empty) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (prev_dc_inv_2 prev_dc_inv_0 (cdr (cdr (range prev_dc_inv_0)))) (lam (lam (cons $1 $0)))))",
    "(lam (map (lam (gt? $0 prev_dc_inv_0)) $0))",
    "(lam (fold $0 empty (lam (lam (cons (gt? $1 prev_dc_inv_0) $0)))))",
    "(lam (prev_dc_inv_4 prev_dc_inv_0 $0))",
    "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_0))) $0))",
    "(lam (prev_dc_inv_4 prev_dc_inv_1 $0))",
    "(lam (map (lam (eq? prev_dc_inv_1 $0)) $0))",
    "(lam (map (lam (eq? $0 prev_dc_inv_1)) $0))",
    "(lam (prev_dc_inv_3 prev_dc_inv_0 (prev_dc_inv_2 prev_dc_inv_1 $0)))",
    "(lam (prev_dc_inv_3 prev_dc_inv_0 (prev_dc_inv_2 1 $0)))",
    "(lam (prev_dc_inv_3 (+ prev_dc_inv_1 1) (prev_dc_inv_2 1 $0)))",
    "(lam (prev_dc_inv_3 (+ 1 prev_dc_inv_1) (prev_dc_inv_2 1 $0)))",
    "(lam (prev_dc_inv_3 prev_dc_inv_1 (prev_dc_inv_2 1 $0)))",
    "(lam (prev_dc_inv_3 prev_dc_inv_1 (prev_dc_inv_2 prev_dc_inv_1 (prev_dc_inv_2 1 $0))))",
    "(lam (is-prime (+ (index (length $0) (cons prev_dc_inv_1 $0)) prev_dc_inv_0)))",
    "(lam (is-prime (+ prev_dc_inv_0 (index (length $0) (cons prev_dc_inv_1 $0)))))",
    "(lam (is-square (fold (prev_dc_inv_3 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $0 $1))))))",
    "(lam (is-square (fold (prev_dc_inv_3 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $1 $0))))))",
    "(lam (length $0))",
    "(lam (length (prev_dc_inv_2 prev_dc_inv_1 $0)))",
    "(lam (prev_dc_inv_3 (+ 1 1) $0))",
    "(lam (prev_dc_inv_3 (- prev_dc_inv_0 1) $0))",
    "(lam (map (lam (+ $0 $0)) $0))",
    "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
    "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
    "(lam (fold $0 (cdr (range 1)) (lam (lam (cons (index (length $0) $2) $0)))))",
    "(lam (cons (car $0) empty))",
    "(lam (prev_dc_inv_2 (car $0) (range 1)))",
    "(lam (cdr (prev_dc_inv_5 $0)))",
    "(lam (map (lam (index $0 $1)) (cdr (range prev_dc_inv_1))))",
    "(lam (map (lam (index $0 (cdr (cdr $1)))) (range (+ prev_dc_inv_1 1))))",
    "(lam (map (lam (index $0 (cdr (cdr $1)))) (range (+ 1 prev_dc_inv_1))))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (fold (range prev_dc_inv_1) empty (lam (lam (cons (index $1 $2) $0)))))"
  ],
  "invs": [
    {
      "body": "(lam (fold $0 (cons #0 empty) (lam (lam (cons $1 $0)))))",
      "dreamcoder": "#(lambda (lambda (fold $0 (cons $1 empty) (lambda (lambda (cons $1 $0))))))",
      "arity": 1,
      "name": "fn_6",
      "rewritten": [
        "(lam (prev_dc_inv_2 1 $0))",
        "(lam (map (lam (+ 1 $0)) $0))",
        "(lam (prev_dc_inv_2 prev_dc_inv_0 $0))",
        "(lam (map (lam (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lam (prev_dc_inv_2 prev_dc_inv_1 $0))",
        "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
        "(lam (fold $0 (cdr (cdr (cdr (prev_dc_inv_5 $0)))) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (cons (index prev_dc_inv_0 $0) empty) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (range 1) (lam (lam (cons $1 $0)))))",
        "(fn_6 0)",
        "(fn_6 prev_dc_inv_1)",
        "(lam (fold $0 (cons prev_dc_inv_1 (cdr (range 1))) (lam (lam (cons $1 $0)))))",
        "(fn_6 (+ prev_dc_inv_1 1))",
        "(lam (fold $0 (prev_dc_inv_2 prev_dc_inv_0 (cdr (cdr (range prev_dc_inv_0)))) (lam (lam (cons $1 $0)))))",
        "(lam (map (lam (gt? $0 prev_dc_inv_0)) $0))",
        "(lam (fold $0 empty (lam (lam (cons (gt? $1 prev_dc_inv_0) $0)))))",
        "(lam (prev_dc_inv_4 prev_dc_inv_0 $0))",
        "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_0))) $0))",
        "(lam (prev_dc_inv_4 prev_dc_inv_1 $0))",
        "(lam (map (lam (eq? prev_dc_inv_1 $0)) $0))",
        "(lam (map (lam (eq? $0 prev_dc_inv_1)) $0))",
        "(lam (prev_dc_inv_3 prev_dc_inv_0 (prev_dc_inv_2 prev_dc_inv_1 $0)))",
        "(lam (prev_dc_inv_3 prev_dc_inv_0 (prev_dc_inv_2 1 $0)))",
        "(lam (prev_dc_inv_3 (+ prev_dc_inv_1 1) (prev_dc_inv_2 1 $0)))",
        "(lam (prev_dc_inv_3 (+ 1 prev_dc_inv_1) (prev_dc_inv_2 1 $0)))",
        "(lam (prev_dc_inv_3 prev_dc_inv_1 (prev_dc_inv_2 1 $0)))",
        "(lam (prev_dc_inv_3 prev_dc_inv_1 (prev_dc_inv_2 prev_dc_inv_1 (prev_dc_inv_2 1 $0))))",
        "(lam (is-prime (+ (index (length $0) (cons prev_dc_inv_1 $0)) prev_dc_inv_0)))",
        "(lam (is-prime (+ prev_dc_inv_0 (index (length $0) (cons prev_dc_inv_1 $0)))))",
        "(lam (is-square (fold (prev_dc_inv_3 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $0 $1))))))",
        "(lam (is-square (fold (prev_dc_inv_3 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $1 $0))))))",
        "(lam (length $0))",
        "(lam (length (prev_dc_inv_2 prev_dc_inv_1 $0)))",
        "(lam (prev_dc_inv_3 (+ 1 1) $0))",
        "(lam (prev_dc_inv_3 (- prev_dc_inv_0 1) $0))",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
        "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (fold $0 (cdr (range 1)) (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (cons (car $0) empty))",
        "(lam (prev_dc_inv_2 (car $0) (range 1)))",
        "(lam (cdr (prev_dc_inv_5 $0)))",
        "(lam (map (lam (index $0 $1)) (cdr (range prev_dc_inv_1))))",
        "(lam (map (lam (index $0 (cdr (cdr $1)))) (range (+ prev_dc_inv_1 1))))",
        "(lam (map (lam (index $0 (cdr (cdr $1)))) (range (+ 1 prev_dc_inv_1))))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (fold (range prev_dc_inv_1) empty (lam (lam (cons (index $1 $2) $0)))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) 1 $0))",
        "(lambda (map (lambda (+ 1 $0)) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (fold $0 (cdr (cdr (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (cons (index #(+ 1 (+ 1 1)) $0) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (range 1) (lambda (lambda (cons $1 $0)))))",
        "(#(lambda (lambda (fold $0 (cons $1 empty) (lambda (lambda (cons $1 $0)))))) 0)",
        "(#(lambda (lambda (fold $0 (cons $1 empty) (lambda (lambda (cons $1 $0)))))) #(+ 1 #(+ 1 (+ 1 1))))",
        "(lambda (fold $0 (cons #(+ 1 #(+ 1 (+ 1 1))) (cdr (range 1))) (lambda (lambda (cons $1 $0)))))",
        "(#(lambda (lambda (fold $0 (cons $1 empty) (lambda (lambda (cons $1 $0)))))) (+ #(+ 1 #(+ 1 (+ 1 1))) 1))",
        "(lambda (fold $0 (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) (cdr (cdr (range #(+ 1 (+ 1 1)))))) (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda (gt? $0 #(+ 1 (+ 1 1)))) $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (gt? $1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (gt? 1 (mod $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (eq? #(+ 1 #(+ 1 (+ 1 1))) $0)) $0))",
        "(lambda (map (lambda (eq? $0 #(+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (+ #(+ 1 #(+ 1 (+ 1 1))) 1) (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (+ 1 #(+ 1 #(+ 1 (+ 1 1)))) (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (map (lambda (+ $0 $1)))) 1 $0))))",
        "(lambda (is-prime (+ (index (length $0) (cons #(+ 1 #(+ 1 (+ 1 1))) $0)) #(+ 1 (+ 1 1)))))",
        "(lambda (is-prime (+ #(+ 1 (+ 1 1)) (index (length $0) (cons #(+ 1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $0 $1))))))",
        "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $1 $0))))))",
        "(lambda (length $0))",
        "(lambda (length (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (+ 1 1) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (- #(+ 1 (+ 1 1)) 1) $0))",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
        "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (fold $0 (cdr (range 1)) (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (cons (car $0) empty))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) (car $0) (range 1)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))",
        "(lambda (map (lambda (index $0 $1)) (cdr (range #(+ 1 #(+ 1 (+ 1 1)))))))",
        "(lambda (map (lambda (index $0 (cdr (cdr $1)))) (range (+ #(+ 1 #(+ 1 (+ 1 1))) 1))))",
        "(lambda (map (lambda (index $0 (cdr (cdr $1)))) (range (+ 1 #(+ 1 #(+ 1 (+ 1 1)))))))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))",
        "(lambda (fold (range #(+ 1 #(+ 1 (+ 1 1)))) empty (lambda (lambda (cons (index $1 $2) $0)))))"
      ],
      "utility": 1016,
      "expected_cost": 11925,
      "final_cost": 11925,
      "multiplier": 1.1447379454926625,
      "multiplier_wrt_orig": 1.1447379454926625,
      "num_uses": 4,
      "uses": [
        {
          "fn_6 (+ prev_dc_inv_1 1)": "(lam (fold $0 (cons (+ prev_dc_inv_1 1) empty) (lam (lam (cons $1 $0)))))"
        },
        {
          "fn_6 (index prev_dc_inv_0 #0)": "(lam (fold $0 (cons (index prev_dc_inv_0 $0) empty) (lam (lam (cons $1 $0)))))"
        },
        {
          "fn_6 0": "(lam (fold $0 (cons 0 empty) (lam (lam (cons $1 $0)))))"
        },
        {
          "fn_6 prev_dc_inv_1": "(lam (fold $0 (cons prev_dc_inv_1 empty) (lam (lam (cons $1 $0)))))"
        }
      ]
    },
    {
      "body": "(lam (prev_dc_inv_3 #0 (prev_dc_inv_2 1 $0)))",
      "dreamcoder": "#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $1 (#(lambda (map (lambda (+ $0 $1)))) 1 $0))))",
      "arity": 1,
      "name": "fn_7",
      "rewritten": [
        "(lam (prev_dc_inv_2 1 $0))",
        "(lam (map (lam (+ 1 $0)) $0))",
        "(lam (prev_dc_inv_2 prev_dc_inv_0 $0))",
        "(lam (map (lam (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lam (prev_dc_inv_2 prev_dc_inv_1 $0))",
        "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
        "(lam (fold $0 (cdr (cdr (cdr (prev_dc_inv_5 $0)))) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (cons (index prev_dc_inv_0 $0) empty) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (range 1) (lam (lam (cons $1 $0)))))",
        "(fn_6 0)",
        "(fn_6 prev_dc_inv_1)",
        "(lam (fold $0 (cons prev_dc_inv_1 (cdr (range 1))) (lam (lam (cons $1 $0)))))",
        "(fn_6 (+ prev_dc_inv_1 1))",
        "(lam (fold $0 (prev_dc_inv_2 prev_dc_inv_0 (cdr (cdr (range prev_dc_inv_0)))) (lam (lam (cons $1 $0)))))",
        "(lam (map (lam (gt? $0 prev_dc_inv_0)) $0))",
        "(lam (fold $0 empty (lam (lam (cons (gt? $1 prev_dc_inv_0) $0)))))",
        "(lam (prev_dc_inv_4 prev_dc_inv_0 $0))",
        "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_0))) $0))",
        "(lam (prev_dc_inv_4 prev_dc_inv_1 $0))",
        "(lam (map (lam (eq? prev_dc_inv_1 $0)) $0))",
        "(lam (map (lam (eq? $0 prev_dc_inv_1)) $0))",
        "(lam (prev_dc_inv_3 prev_dc_inv_0 (prev_dc_inv_2 prev_dc_inv_1 $0)))",
        "(fn_7 prev_dc_inv_0)",
        "(fn_7 (+ prev_dc_inv_1 1))",
        "(fn_7 (+ 1 prev_dc_inv_1))",
        "(fn_7 prev_dc_inv_1)",
        "(lam (prev_dc_inv_3 prev_dc_inv_1 (prev_dc_inv_2 prev_dc_inv_1 (prev_dc_inv_2 1 $0))))",
        "(lam (is-prime (+ (index (length $0) (cons prev_dc_inv_1 $0)) prev_dc_inv_0)))",
        "(lam (is-prime (+ prev_dc_inv_0 (index (length $0) (cons prev_dc_inv_1 $0)))))",
        "(lam (is-square (fold (prev_dc_inv_3 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $0 $1))))))",
        "(lam (is-square (fold (prev_dc_inv_3 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $1 $0))))))",
        "(lam (length $0))",
        "(lam (length (prev_dc_inv_2 prev_dc_inv_1 $0)))",
        "(lam (prev_dc_inv_3 (+ 1 1) $0))",
        "(lam (prev_dc_inv_3 (- prev_dc_inv_0 1) $0))",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
        "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (fold $0 (cdr (range 1)) (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (cons (car $0) empty))",
        "(lam (prev_dc_inv_2 (car $0) (range 1)))",
        "(lam (cdr (prev_dc_inv_5 $0)))",
        "(lam (map (lam (index $0 $1)) (cdr (range prev_dc_inv_1))))",
        "(lam (map (lam (index $0 (cdr (cdr $1)))) (range (+ prev_dc_inv_1 1))))",
        "(lam (map (lam (index $0 (cdr (cdr $1)))) (range (+ 1 prev_dc_inv_1))))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (fold (range prev_dc_inv_1) empty (lam (lam (cons (index $1 $2) $0)))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) 1 $0))",
        "(lambda (map (lambda (+ 1 $0)) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (fold $0 (cdr (cdr (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (cons (index #(+ 1 (+ 1 1)) $0) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (range 1) (lambda (lambda (cons $1 $0)))))",
        "(fn_6 0)",
        "(fn_6 #(+ 1 #(+ 1 (+ 1 1))))",
        "(lambda (fold $0 (cons #(+ 1 #(+ 1 (+ 1 1))) (cdr (range 1))) (lambda (lambda (cons $1 $0)))))",
        "(fn_6 (+ #(+ 1 #(+ 1 (+ 1 1))) 1))",
        "(lambda (fold $0 (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) (cdr (cdr (range #(+ 1 (+ 1 1)))))) (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda (gt? $0 #(+ 1 (+ 1 1)))) $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (gt? $1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (gt? 1 (mod $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (eq? #(+ 1 #(+ 1 (+ 1 1))) $0)) $0))",
        "(lambda (map (lambda (eq? $0 #(+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
        "(#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $1 (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))) #(+ 1 (+ 1 1)))",
        "(#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $1 (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))) (+ #(+ 1 #(+ 1 (+ 1 1))) 1))",
        "(#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $1 (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))) (+ 1 #(+ 1 #(+ 1 (+ 1 1)))))",
        "(#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $1 (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))) #(+ 1 #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (map (lambda (+ $0 $1)))) 1 $0))))",
        "(lambda (is-prime (+ (index (length $0) (cons #(+ 1 #(+ 1 (+ 1 1))) $0)) #(+ 1 (+ 1 1)))))",
        "(lambda (is-prime (+ #(+ 1 (+ 1 1)) (index (length $0) (cons #(+ 1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $0 $1))))))",
        "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $1 $0))))))",
        "(lambda (length $0))",
        "(lambda (length (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (+ 1 1) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (- #(+ 1 (+ 1 1)) 1) $0))",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
        "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (fold $0 (cdr (range 1)) (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (cons (car $0) empty))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) (car $0) (range 1)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))",
        "(lambda (map (lambda (index $0 $1)) (cdr (range #(+ 1 #(+ 1 (+ 1 1)))))))",
        "(lambda (map (lambda (index $0 (cdr (cdr $1)))) (range (+ #(+ 1 #(+ 1 (+ 1 1))) 1))))",
        "(lambda (map (lambda (index $0 (cdr (cdr $1)))) (range (+ 1 #(+ 1 #(+ 1 (+ 1 1)))))))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))",
        "(lambda (fold (range #(+ 1 #(+ 1 (+ 1 1)))) empty (lambda (lambda (cons (index $1 $2) $0)))))"
      ],
      "utility": 507,
      "expected_cost": 11013,
      "final_cost": 11013,
      "multiplier": 1.0828112230999727,
      "multiplier_wrt_orig": 1.2395350948878598,
      "num_uses": 4,
      "uses": [
        {
          "fn_7 (+ 1 prev_dc_inv_1)": "(lam (prev_dc_inv_3 (+ 1 prev_dc_inv_1) (prev_dc_inv_2 1 $0)))"
        },
        {
          "fn_7 (+ prev_dc_inv_1 1)": "(lam (prev_dc_inv_3 (+ prev_dc_inv_1 1) (prev_dc_inv_2 1 $0)))"
        },
        {
          "fn_7 prev_dc_inv_0": "(lam (prev_dc_inv_3 prev_dc_inv_0 (prev_dc_inv_2 1 $0)))"
        },
        {
          "fn_7 prev_dc_inv_1": "(lam (prev_dc_inv_3 prev_dc_inv_1 (prev_dc_inv_2 1 $0)))"
        }
      ]
    },
    {
      "body": "(+ prev_dc_inv_1 1)",
      "dreamcoder": "#(+ #(+ 1 #(+ 1 (+ 1 1))) 1)",
      "arity": 0,
      "name": "fn_8",
      "rewritten": [
        "(lam (prev_dc_inv_2 1 $0))",
        "(lam (map (lam (+ 1 $0)) $0))",
        "(lam (prev_dc_inv_2 prev_dc_inv_0 $0))",
        "(lam (map (lam (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lam (prev_dc_inv_2 prev_dc_inv_1 $0))",
        "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
        "(lam (fold $0 (cdr (cdr (cdr (prev_dc_inv_5 $0)))) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (cons (index prev_dc_inv_0 $0) empty) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (range 1) (lam (lam (cons $1 $0)))))",
        "(fn_6 0)",
        "(fn_6 prev_dc_inv_1)",
        "(lam (fold $0 (cons prev_dc_inv_1 (cdr (range 1))) (lam (lam (cons $1 $0)))))",
        "(fn_6 fn_8)",
        "(lam (fold $0 (prev_dc_inv_2 prev_dc_inv_0 (cdr (cdr (range prev_dc_inv_0)))) (lam (lam (cons $1 $0)))))",
        "(lam (map (lam (gt? $0 prev_dc_inv_0)) $0))",
        "(lam (fold $0 empty (lam (lam (cons (gt? $1 prev_dc_inv_0) $0)))))",
        "(lam (prev_dc_inv_4 prev_dc_inv_0 $0))",
        "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_0))) $0))",
        "(lam (prev_dc_inv_4 prev_dc_inv_1 $0))",
        "(lam (map (lam (eq? prev_dc_inv_1 $0)) $0))",
        "(lam (map (lam (eq? $0 prev_dc_inv_1)) $0))",
        "(lam (prev_dc_inv_3 prev_dc_inv_0 (prev_dc_inv_2 prev_dc_inv_1 $0)))",
        "(fn_7 prev_dc_inv_0)",
        "(fn_7 fn_8)",
        "(fn_7 (+ 1 prev_dc_inv_1))",
        "(fn_7 prev_dc_inv_1)",
        "(lam (prev_dc_inv_3 prev_dc_inv_1 (prev_dc_inv_2 prev_dc_inv_1 (prev_dc_inv_2 1 $0))))",
        "(lam (is-prime (+ (index (length $0) (cons prev_dc_inv_1 $0)) prev_dc_inv_0)))",
        "(lam (is-prime (+ prev_dc_inv_0 (index (length $0) (cons prev_dc_inv_1 $0)))))",
        "(lam (is-square (fold (prev_dc_inv_3 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $0 $1))))))",
        "(lam (is-square (fold (prev_dc_inv_3 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $1 $0))))))",
        "(lam (length $0))",
        "(lam (length (prev_dc_inv_2 prev_dc_inv_1 $0)))",
        "(lam (prev_dc_inv_3 (+ 1 1) $0))",
        "(lam (prev_dc_inv_3 (- prev_dc_inv_0 1) $0))",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
        "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (fold $0 (cdr (range 1)) (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (cons (car $0) empty))",
        "(lam (prev_dc_inv_2 (car $0) (range 1)))",
        "(lam (cdr (prev_dc_inv_5 $0)))",
        "(lam (map (lam (index $0 $1)) (cdr (range prev_dc_inv_1))))",
        "(lam (map (lam (index $0 (cdr (cdr $1)))) (range fn_8)))",
        "(lam (map (lam (index $0 (cdr (cdr $1)))) (range (+ 1 prev_dc_inv_1))))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (fold (range prev_dc_inv_1) empty (lam (lam (cons (index $1 $2) $0)))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) 1 $0))",
        "(lambda (map (lambda (+ 1 $0)) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (fold $0 (cdr (cdr (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (cons (index #(+ 1 (+ 1 1)) $0) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (range 1) (lambda (lambda (cons $1 $0)))))",
        "(fn_6 0)",
        "(fn_6 #(+ 1 #(+ 1 (+ 1 1))))",
        "(lambda (fold $0 (cons #(+ 1 #(+ 1 (+ 1 1))) (cdr (range 1))) (lambda (lambda (cons $1 $0)))))",
        "(fn_6 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1))",
        "(lambda (fold $0 (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) (cdr (cdr (range #(+ 1 (+ 1 1)))))) (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda (gt? $0 #(+ 1 (+ 1 1)))) $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (gt? $1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (gt? 1 (mod $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (eq? #(+ 1 #(+ 1 (+ 1 1))) $0)) $0))",
        "(lambda (map (lambda (eq? $0 #(+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
        "(fn_7 #(+ 1 (+ 1 1)))",
        "(fn_7 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1))",
        "(fn_7 (+ 1 #(+ 1 #(+ 1 (+ 1 1)))))",
        "(fn_7 #(+ 1 #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (map (lambda (+ $0 $1)))) 1 $0))))",
        "(lambda (is-prime (+ (index (length $0) (cons #(+ 1 #(+ 1 (+ 1 1))) $0)) #(+ 1 (+ 1 1)))))",
        "(lambda (is-prime (+ #(+ 1 (+ 1 1)) (index (length $0) (cons #(+ 1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $0 $1))))))",
        "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $1 $0))))))",
        "(lambda (length $0))",
        "(lambda (length (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (+ 1 1) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (- #(+ 1 (+ 1 1)) 1) $0))",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
        "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (fold $0 (cdr (range 1)) (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (cons (car $0) empty))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) (car $0) (range 1)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))",
        "(lambda (map (lambda (index $0 $1)) (cdr (range #(+ 1 #(+ 1 (+ 1 1)))))))",
        "(lambda (map (lambda (index $0 (cdr (cdr $1)))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1))))",
        "(lambda (map (lambda (index $0 (cdr (cdr $1)))) (range (+ 1 #(+ 1 #(+ 1 (+ 1 1)))))))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))",
        "(lambda (fold (range #(+ 1 #(+ 1 (+ 1 1)))) empty (lambda (lambda (cons (index $1 $2) $0)))))"
      ],
      "utility": 304,
      "expected_cost": 10407,
      "final_cost": 10407,
      "multiplier": 1.0582300374747766,
      "multiplier_wrt_orig": 1.3117132699144807,
      "num_uses": 3,
      "uses": [
        {
          "fn_8 ": "(+ prev_dc_inv_1 1)"
        }
      ]
    }
  ]
}