{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/bench001_it1.json --max-arity=3 --threads=1 --iterations=2 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/out/stitch/2022-10-04_19-36-07/raw/bench001_it1.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/bench001_it1.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/out/stitch/2022-10-04_19-36-07/raw/bench001_it1.json",
    "iterations": 2,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 22053,
  "original": [
    "(lam (prev_dc_inv_2 1 $0))",
    "(lam (map (lam (+ 1 $0)) $0))",
    "(lam (prev_dc_inv_2 prev_dc_inv_0 $0))",
    "(lam (map (lam (+ 1 (+ $0 (+ 1 1)))) $0))",
    "(lam (prev_dc_inv_2 prev_dc_inv_1 $0))",
    "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
    "(lam (fold $0 (range 1) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (cons 0 empty) (lam (lam (cons $1 $0)))))",
    "(lam (map (lam (gt? $0 prev_dc_inv_0)) $0))",
    "(lam (fold $0 empty (lam (lam (cons (gt? $1 prev_dc_inv_0) $0)))))",
    "(lam (map (lam (empty? (range (mod $0 prev_dc_inv_0)))) $0))",
    "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_0))) $0))",
    "(lam (map (lam (eq? (mod $0 prev_dc_inv_1) 0)) $0))",
    "(lam (map (lam (eq? prev_dc_inv_1 $0)) $0))",
    "(lam (map (lam (eq? $0 prev_dc_inv_1)) $0))",
    "(lam (map (lam (mod $0 prev_dc_inv_0)) (prev_dc_inv_2 prev_dc_inv_1 $0)))",
    "(lam (map (lam (mod $0 prev_dc_inv_0)) (prev_dc_inv_2 1 $0)))",
    "(lam (map (lam (mod $0 prev_dc_inv_1)) (prev_dc_inv_2 1 $0)))",
    "(lam (map (lam (mod (+ $0 1) prev_dc_inv_1)) $0))",
    "(lam (length $0))",
    "(lam (length (prev_dc_inv_2 prev_dc_inv_1 $0)))",
    "(lam (map (lam (mod (* $0 $0) prev_dc_inv_1)) $0))",
    "(lam (map (lam (mod $0 (+ 1 1))) $0))",
    "(lam (map (lam (+ $0 $0)) $0))",
    "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
    "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
    "(lam (fold $0 (cdr (range 1)) (lam (lam (cons (index (length $0) $2) $0)))))",
    "(lam (cdr (map (lam (index $0 $1)) (range prev_dc_inv_1))))",
    "(lam (map (lam (index $0 $1)) (cdr (range prev_dc_inv_1))))",
    "(lam (cdr (map (lam (index $0 $1)) (cdr (range (+ prev_dc_inv_1 prev_dc_inv_0))))))",
    "(lam (map (lam (index $0 $1)) (cdr (cdr (range (+ prev_dc_inv_1 prev_dc_inv_0))))))",
    "(lam (map (lam (index $0 $1)) (range prev_dc_inv_1)))",
    "(lam (fold (range prev_dc_inv_1) empty (lam (lam (cons (index $1 $2) $0)))))"
  ],
  "invs": [
    {
      "body": "(map (lam (#1 $0 #0)))",
      "dreamcoder": "#(lambda (lambda (map (lambda ($1 $0 $2)))))",
      "arity": 2,
      "name": "fn_3",
      "rewritten": [
        "(lam (prev_dc_inv_2 1 $0))",
        "(lam (map (lam (+ 1 $0)) $0))",
        "(lam (prev_dc_inv_2 prev_dc_inv_0 $0))",
        "(lam (map (lam (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lam (prev_dc_inv_2 prev_dc_inv_1 $0))",
        "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
        "(lam (fold $0 (range 1) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (cons 0 empty) (lam (lam (cons $1 $0)))))",
        "(lam (fn_3 prev_dc_inv_0 gt? $0))",
        "(lam (fold $0 empty (lam (lam (cons (gt? $1 prev_dc_inv_0) $0)))))",
        "(lam (map (lam (empty? (range (mod $0 prev_dc_inv_0)))) $0))",
        "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_0))) $0))",
        "(lam (map (lam (eq? (mod $0 prev_dc_inv_1) 0)) $0))",
        "(lam (map (lam (eq? prev_dc_inv_1 $0)) $0))",
        "(lam (fn_3 prev_dc_inv_1 eq? $0))",
        "(lam (fn_3 prev_dc_inv_0 mod (prev_dc_inv_2 prev_dc_inv_1 $0)))",
        "(lam (fn_3 prev_dc_inv_0 mod (prev_dc_inv_2 1 $0)))",
        "(lam (fn_3 prev_dc_inv_1 mod (prev_dc_inv_2 1 $0)))",
        "(lam (map (lam (mod (+ $0 1) prev_dc_inv_1)) $0))",
        "(lam (length $0))",
        "(lam (length (prev_dc_inv_2 prev_dc_inv_1 $0)))",
        "(lam (map (lam (mod (* $0 $0) prev_dc_inv_1)) $0))",
        "(lam (fn_3 (+ 1 1) mod $0))",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
        "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (fold $0 (cdr (range 1)) (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (cdr (fn_3 $0 index (range prev_dc_inv_1))))",
        "(lam (fn_3 $0 index (cdr (range prev_dc_inv_1))))",
        "(lam (cdr (fn_3 $0 index (cdr (range (+ prev_dc_inv_1 prev_dc_inv_0))))))",
        "(lam (fn_3 $0 index (cdr (cdr (range (+ prev_dc_inv_1 prev_dc_inv_0))))))",
        "(lam (fn_3 $0 index (range prev_dc_inv_1)))",
        "(lam (fold (range prev_dc_inv_1) empty (lam (lam (cons (index $1 $2) $0)))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) 1 $0))",
        "(lambda (map (lambda (+ 1 $0)) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (fold $0 (range 1) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (cons 0 empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) #(+ 1 (+ 1 1)) gt? $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (gt? $1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (map (lambda (empty? (range (mod $0 #(+ 1 (+ 1 1)))))) $0))",
        "(lambda (map (lambda (gt? 1 (mod $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (map (lambda (eq? (mod $0 #(+ 1 #(+ 1 (+ 1 1)))) 0)) $0))",
        "(lambda (map (lambda (eq? #(+ 1 #(+ 1 (+ 1 1))) $0)) $0))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) #(+ 1 #(+ 1 (+ 1 1))) eq? $0))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) #(+ 1 (+ 1 1)) mod (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) #(+ 1 (+ 1 1)) mod (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) #(+ 1 #(+ 1 (+ 1 1))) mod (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))",
        "(lambda (map (lambda (mod (+ $0 1) #(+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (length $0))",
        "(lambda (length (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
        "(lambda (map (lambda (mod (* $0 $0) #(+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) (+ 1 1) mod $0))",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
        "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (fold $0 (cdr (range 1)) (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (cdr (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index (range #(+ 1 #(+ 1 (+ 1 1)))))))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index (cdr (range #(+ 1 #(+ 1 (+ 1 1)))))))",
        "(lambda (cdr (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index (cdr (range (+ #(+ 1 #(+ 1 (+ 1 1))) #(+ 1 (+ 1 1))))))))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index (cdr (cdr (range (+ #(+ 1 #(+ 1 (+ 1 1))) #(+ 1 (+ 1 1))))))))",
        "(lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index (range #(+ 1 #(+ 1 (+ 1 1))))))",
        "(lambda (fold (range #(+ 1 #(+ 1 (+ 1 1)))) empty (lambda (lambda (cons (index $1 $2) $0)))))"
      ],
      "utility": 612,
      "expected_cost": 9299,
      "final_cost": 9299,
      "multiplier": 1.0877513711151736,
      "multiplier_wrt_orig": 1.0877513711151736,
      "num_uses": 13,
      "uses": [
        {
          "fn_3 #0 +": "(map (lam (+ $0 $0)))"
        },
        {
          "fn_3 prev_dc_inv_1 eq?": "(map (lam (eq? $0 prev_dc_inv_1)))"
        },
        {
          "fn_3 prev_dc_inv_0 gt?": "(map (lam (gt? $0 prev_dc_inv_0)))"
        },
        {
          "fn_3 $0 index": "(map (lam (index $0 $1)))"
        },
        {
          "fn_3 (+ 1 1) mod": "(map (lam (mod $0 (+ 1 1))))"
        },
        {
          "fn_3 prev_dc_inv_0 mod": "(map (lam (mod $0 prev_dc_inv_0)))"
        },
        {
          "fn_3 prev_dc_inv_1 mod": "(map (lam (mod $0 prev_dc_inv_1)))"
        }
      ]
    },
    {
      "body": "(lam (fn_3 $0 index #0))",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index $1)))",
      "arity": 1,
      "name": "fn_4",
      "rewritten": [
        "(lam (prev_dc_inv_2 1 $0))",
        "(lam (map (lam (+ 1 $0)) $0))",
        "(lam (prev_dc_inv_2 prev_dc_inv_0 $0))",
        "(lam (map (lam (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lam (prev_dc_inv_2 prev_dc_inv_1 $0))",
        "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
        "(lam (fold $0 (range 1) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (cons 0 empty) (lam (lam (cons $1 $0)))))",
        "(lam (fn_3 prev_dc_inv_0 gt? $0))",
        "(lam (fold $0 empty (lam (lam (cons (gt? $1 prev_dc_inv_0) $0)))))",
        "(lam (map (lam (empty? (range (mod $0 prev_dc_inv_0)))) $0))",
        "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_0))) $0))",
        "(lam (map (lam (eq? (mod $0 prev_dc_inv_1) 0)) $0))",
        "(lam (map (lam (eq? prev_dc_inv_1 $0)) $0))",
        "(lam (fn_3 prev_dc_inv_1 eq? $0))",
        "(lam (fn_3 prev_dc_inv_0 mod (prev_dc_inv_2 prev_dc_inv_1 $0)))",
        "(lam (fn_3 prev_dc_inv_0 mod (prev_dc_inv_2 1 $0)))",
        "(lam (fn_3 prev_dc_inv_1 mod (prev_dc_inv_2 1 $0)))",
        "(lam (map (lam (mod (+ $0 1) prev_dc_inv_1)) $0))",
        "(lam (length $0))",
        "(lam (length (prev_dc_inv_2 prev_dc_inv_1 $0)))",
        "(lam (map (lam (mod (* $0 $0) prev_dc_inv_1)) $0))",
        "(lam (fn_3 (+ 1 1) mod $0))",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
        "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (fold $0 (cdr (range 1)) (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (cdr (fn_3 $0 index (range prev_dc_inv_1))))",
        "(fn_4 (cdr (range prev_dc_inv_1)))",
        "(lam (cdr (fn_3 $0 index (cdr (range (+ prev_dc_inv_1 prev_dc_inv_0))))))",
        "(fn_4 (cdr (cdr (range (+ prev_dc_inv_1 prev_dc_inv_0)))))",
        "(fn_4 (range prev_dc_inv_1))",
        "(lam (fold (range prev_dc_inv_1) empty (lam (lam (cons (index $1 $2) $0)))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) 1 $0))",
        "(lambda (map (lambda (+ 1 $0)) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (fold $0 (range 1) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (cons 0 empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fn_3 #(+ 1 (+ 1 1)) gt? $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (gt? $1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (map (lambda (empty? (range (mod $0 #(+ 1 (+ 1 1)))))) $0))",
        "(lambda (map (lambda (gt? 1 (mod $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (map (lambda (eq? (mod $0 #(+ 1 #(+ 1 (+ 1 1)))) 0)) $0))",
        "(lambda (map (lambda (eq? #(+ 1 #(+ 1 (+ 1 1))) $0)) $0))",
        "(lambda (fn_3 #(+ 1 #(+ 1 (+ 1 1))) eq? $0))",
        "(lambda (fn_3 #(+ 1 (+ 1 1)) mod (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
        "(lambda (fn_3 #(+ 1 (+ 1 1)) mod (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))",
        "(lambda (fn_3 #(+ 1 #(+ 1 (+ 1 1))) mod (#(lambda (map (lambda (+ $0 $1)))) 1 $0)))",
        "(lambda (map (lambda (mod (+ $0 1) #(+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (length $0))",
        "(lambda (length (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
        "(lambda (map (lambda (mod (* $0 $0) #(+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (fn_3 (+ 1 1) mod $0))",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
        "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (fold $0 (cdr (range 1)) (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (cdr (fn_3 $0 index (range #(+ 1 #(+ 1 (+ 1 1)))))))",
        "(#(lambda (lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index $1))) (cdr (range #(+ 1 #(+ 1 (+ 1 1))))))",
        "(lambda (cdr (fn_3 $0 index (cdr (range (+ #(+ 1 #(+ 1 (+ 1 1))) #(+ 1 (+ 1 1))))))))",
        "(#(lambda (lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index $1))) (cdr (cdr (range (+ #(+ 1 #(+ 1 (+ 1 1))) #(+ 1 (+ 1 1)))))))",
        "(#(lambda (lambda (#(lambda (lambda (map (lambda ($1 $0 $2))))) $0 index $1))) (range #(+ 1 #(+ 1 (+ 1 1)))))",
        "(lambda (fold (range #(+ 1 #(+ 1 (+ 1 1)))) empty (lambda (lambda (cons (index $1 $2) $0)))))"
      ],
      "utility": 305,
      "expected_cost": 8690,
      "final_cost": 8690,
      "multiplier": 1.0700805523590333,
      "multiplier_wrt_orig": 1.1639815880322208,
      "num_uses": 3,
      "uses": [
        {
          "fn_4 (cdr (cdr (range (+ prev_dc_inv_1 prev_dc_inv_0))))": "(lam (fn_3 $0 index (cdr (cdr (range (+ prev_dc_inv_1 prev_dc_inv_0))))))"
        },
        {
          "fn_4 (cdr (range prev_dc_inv_1))": "(lam (fn_3 $0 index (cdr (range prev_dc_inv_1))))"
        },
        {
          "fn_4 (range prev_dc_inv_1)": "(lam (fn_3 $0 index (range prev_dc_inv_1)))"
        }
      ]
    }
  ]
}