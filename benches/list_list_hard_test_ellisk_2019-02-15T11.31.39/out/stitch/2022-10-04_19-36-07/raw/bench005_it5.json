{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/bench005_it5.json --max-arity=3 --threads=1 --iterations=1 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/out/stitch/2022-10-04_19-36-07/raw/bench005_it5.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/bench005_it5.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/out/stitch/2022-10-04_19-36-07/raw/bench005_it5.json",
    "iterations": 1,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 54100,
  "original": [
    "(lam (prev_dc_inv_3 1 $0))",
    "(lam (map (lam (+ 1 $0)) $0))",
    "(lam (prev_dc_inv_3 prev_dc_inv_0 $0))",
    "(lam (map (lam (+ 1 (+ $0 (+ 1 1)))) $0))",
    "(lam (prev_dc_inv_3 prev_dc_inv_1 $0))",
    "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
    "(lam (prev_dc_inv_7 $0 (index prev_dc_inv_0 $0)))",
    "(lam (fold $0 (cdr (cdr (cdr (prev_dc_inv_6 $0)))) (lam (lam (cons $1 $0)))))",
    "(lam (prev_dc_inv_7 $0 0))",
    "(lam (prev_dc_inv_7 $0 (length empty)))",
    "(lam (prev_dc_inv_7 $0 prev_dc_inv_1))",
    "(lam (prev_dc_inv_7 $0 (fold $0 prev_dc_inv_1 (lam (lam prev_dc_inv_1)))))",
    "(lam (prev_dc_inv_7 $0 prev_dc_inv_2))",
    "(lam (fold $0 (map (lam prev_dc_inv_2) (range 1)) (lam (lam (cons $1 $0)))))",
    "(lam (map (lam (gt? $0 prev_dc_inv_0)) $0))",
    "(lam (fold $0 empty (lam (lam (cons (gt? $1 prev_dc_inv_0) $0)))))",
    "(lam (prev_dc_inv_5 prev_dc_inv_0 $0))",
    "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_0))) $0))",
    "(lam (prev_dc_inv_5 prev_dc_inv_1 $0))",
    "(lam (map (lam (eq? prev_dc_inv_0 $0)) $0))",
    "(lam (map (lam (eq? $0 prev_dc_inv_0)) $0))",
    "(lam (map (lam (eq? prev_dc_inv_1 $0)) $0))",
    "(lam (map (lam (eq? $0 prev_dc_inv_1)) $0))",
    "(lam (prev_dc_inv_10 $0 prev_dc_inv_0))",
    "(lam (prev_dc_inv_4 prev_dc_inv_0 (prev_dc_inv_3 prev_dc_inv_1 $0)))",
    "(lam (prev_dc_inv_10 $0 prev_dc_inv_2))",
    "(lam (prev_dc_inv_10 $0 (+ 1 prev_dc_inv_1)))",
    "(lam (prev_dc_inv_10 $0 prev_dc_inv_1))",
    "(lam (prev_dc_inv_10 (prev_dc_inv_3 prev_dc_inv_1 $0) prev_dc_inv_1))",
    "(lam (length (prev_dc_inv_8 $0 (lam (gt? 1 $0)))))",
    "(lam (length (prev_dc_inv_8 $0 (lam (eq? $0 0)))))",
    "(lam (empty? $0))",
    "(lam (empty? (prev_dc_inv_5 prev_dc_inv_0 $0)))",
    "(lam (is-square (fold $0 prev_dc_inv_2 (lam (lam (* $0 $1))))))",
    "(lam (is-square (fold $0 prev_dc_inv_2 (lam (lam (* $1 $0))))))",
    "(lam (is-square (fold $0 prev_dc_inv_0 (lam (lam (mod $0 $1))))))",
    "(lam (gt? (mod (car (prev_dc_inv_7 $0 prev_dc_inv_1)) prev_dc_inv_1) 0))",
    "(lam (is-prime (- (length (prev_dc_inv_8 $0 (lam (is-prime $0)))) 1)))",
    "(lam (gt? (length (prev_dc_inv_8 $0 (lam (eq? prev_dc_inv_2 $0)))) 1))",
    "(lam (car $0))",
    "(lam (index 0 $0))",
    "(lam (is-prime (+ prev_dc_inv_0 (index (length $0) (cons prev_dc_inv_1 $0)))))",
    "(lam (is-prime (+ (index (length $0) (cons prev_dc_inv_1 $0)) prev_dc_inv_0)))",
    "(lam (is-square (fold (prev_dc_inv_4 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $0 $1))))))",
    "(lam (is-square (fold (prev_dc_inv_4 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $1 $0))))))",
    "(lam (fold $0 (is-prime prev_dc_inv_0) (lam (lam (if $0 (is-prime $1) $0)))))",
    "(lam (fold $0 (is-square prev_dc_inv_1) (lam (lam (if $0 (is-prime $1) $0)))))",
    "(lam (fold $0 prev_dc_inv_0 (lam (lam (if (gt? $0 $1) $0 $1)))))",
    "(lam (fold $0 prev_dc_inv_0 (lam (lam (if (gt? $1 $0) $1 $0)))))",
    "(lam (length $0))",
    "(lam (length (prev_dc_inv_3 prev_dc_inv_0 $0)))",
    "(lam (prev_dc_inv_10 $0 1))",
    "(lam (prev_dc_inv_4 1 $0))",
    "(lam (prev_dc_inv_4 (- prev_dc_inv_0 1) $0))",
    "(lam (prev_dc_inv_4 (- 1 prev_dc_inv_0) $0))",
    "(lam (map (lam (+ $0 $0)) $0))",
    "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
    "(lam (map (lam (* prev_dc_inv_2 $0)) $0))",
    "(lam (map (lam (* $0 prev_dc_inv_2)) $0))",
    "(lam (prev_dc_inv_8 $0 (lam (is-prime (mod (+ $0 $0) prev_dc_inv_1)))))",
    "(lam (prev_dc_inv_8 $0 (lam (is-prime (+ prev_dc_inv_1 (mod $0 prev_dc_inv_1))))))",
    "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
    "(lam (map (lam (index $0 $1)) (range (length (cdr (prev_dc_inv_5 prev_dc_inv_1 $0))))))",
    "(lam (cons (car $0) $0))",
    "(lam (cons (index 0 $0) $0))",
    "(lam (cons 0 $0))",
    "(lam (cons (length empty) $0))",
    "(lam (prev_dc_inv_8 $0 (lam (is-prime (mod (+ $0 $0) prev_dc_inv_1)))))",
    "(lam (prev_dc_inv_8 $0 (lam (is-prime (+ prev_dc_inv_1 (mod $0 prev_dc_inv_1))))))",
    "(lam (map (lam (index prev_dc_inv_0 $1)) $0))",
    "(lam (map (lam (index prev_dc_inv_0 (prev_dc_inv_6 $1))) $0))",
    "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
    "(lam (fold $0 (cdr (range 1)) (lam (lam (cons (index (length $0) $2) $0)))))",
    "(lam (cons (car $0) empty))",
    "(lam (prev_dc_inv_3 (car $0) (range 1)))",
    "(lam (cdr (prev_dc_inv_6 $0)))",
    "(lam (map (lam (index $0 (cdr $1))) (range prev_dc_inv_0)))",
    "(lam (prev_dc_inv_9 $0))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_6 (cdr $0)) (index prev_dc_inv_2 $0)))",
    "(lam (cdr (prev_dc_inv_6 (cdr $0))))",
    "(lam (cdr (prev_dc_inv_6 (prev_dc_inv_6 (cdr $0)))))",
    "(lam (prev_dc_inv_9 (cdr $0)))",
    "(lam (cdr (map (lam (index $0 $1)) (cdr (range (+ prev_dc_inv_1 prev_dc_inv_0))))))",
    "(lam (cdr (cdr (prev_dc_inv_9 $0))))",
    "(lam (cdr (prev_dc_inv_6 (cdr (cdr $0)))))",
    "(lam (cdr (prev_dc_inv_9 (cdr (cdr $0)))))",
    "(lam (prev_dc_inv_6 (cdr (cdr (cdr (cdr $0))))))",
    "(lam (cdr $0))",
    "(lam (cdr (map (lam $0) $0)))",
    "(lam (cdr (prev_dc_inv_6 (cons prev_dc_inv_0 $0))))",
    "(lam (cdr (prev_dc_inv_6 (cons prev_dc_inv_1 $0))))",
    "(lam (prev_dc_inv_6 $0))",
    "(lam (fold (range prev_dc_inv_1) empty (lam (lam (cons (index $1 $2) $0)))))",
    "(lam (prev_dc_inv_8 $0 (lam (is-square $0))))",
    "(lam (prev_dc_inv_8 $0 (lam (is-square (* prev_dc_inv_1 $0)))))",
    "(lam (prev_dc_inv_8 $0 (lam (is-prime $0))))"
  ],
  "invs": [
    {
      "body": "(lam (prev_dc_inv_8 $0 (lam (is-prime (mod (+ $0 $0) prev_dc_inv_1)))))",
      "dreamcoder": "#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (mod (+ $0 $0) #(+ 1 #(+ 1 (+ 1 1))))))))",
      "arity": 0,
      "name": "fn_11",
      "rewritten": [
        "(lam (prev_dc_inv_3 1 $0))",
        "(lam (map (lam (+ 1 $0)) $0))",
        "(lam (prev_dc_inv_3 prev_dc_inv_0 $0))",
        "(lam (map (lam (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lam (prev_dc_inv_3 prev_dc_inv_1 $0))",
        "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
        "(lam (prev_dc_inv_7 $0 (index prev_dc_inv_0 $0)))",
        "(lam (fold $0 (cdr (cdr (cdr (prev_dc_inv_6 $0)))) (lam (lam (cons $1 $0)))))",
        "(lam (prev_dc_inv_7 $0 0))",
        "(lam (prev_dc_inv_7 $0 (length empty)))",
        "(lam (prev_dc_inv_7 $0 prev_dc_inv_1))",
        "(lam (prev_dc_inv_7 $0 (fold $0 prev_dc_inv_1 (lam (lam prev_dc_inv_1)))))",
        "(lam (prev_dc_inv_7 $0 prev_dc_inv_2))",
        "(lam (fold $0 (map (lam prev_dc_inv_2) (range 1)) (lam (lam (cons $1 $0)))))",
        "(lam (map (lam (gt? $0 prev_dc_inv_0)) $0))",
        "(lam (fold $0 empty (lam (lam (cons (gt? $1 prev_dc_inv_0) $0)))))",
        "(lam (prev_dc_inv_5 prev_dc_inv_0 $0))",
        "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_0))) $0))",
        "(lam (prev_dc_inv_5 prev_dc_inv_1 $0))",
        "(lam (map (lam (eq? prev_dc_inv_0 $0)) $0))",
        "(lam (map (lam (eq? $0 prev_dc_inv_0)) $0))",
        "(lam (map (lam (eq? prev_dc_inv_1 $0)) $0))",
        "(lam (map (lam (eq? $0 prev_dc_inv_1)) $0))",
        "(lam (prev_dc_inv_10 $0 prev_dc_inv_0))",
        "(lam (prev_dc_inv_4 prev_dc_inv_0 (prev_dc_inv_3 prev_dc_inv_1 $0)))",
        "(lam (prev_dc_inv_10 $0 prev_dc_inv_2))",
        "(lam (prev_dc_inv_10 $0 (+ 1 prev_dc_inv_1)))",
        "(lam (prev_dc_inv_10 $0 prev_dc_inv_1))",
        "(lam (prev_dc_inv_10 (prev_dc_inv_3 prev_dc_inv_1 $0) prev_dc_inv_1))",
        "(lam (length (prev_dc_inv_8 $0 (lam (gt? 1 $0)))))",
        "(lam (length (prev_dc_inv_8 $0 (lam (eq? $0 0)))))",
        "(lam (empty? $0))",
        "(lam (empty? (prev_dc_inv_5 prev_dc_inv_0 $0)))",
        "(lam (is-square (fold $0 prev_dc_inv_2 (lam (lam (* $0 $1))))))",
        "(lam (is-square (fold $0 prev_dc_inv_2 (lam (lam (* $1 $0))))))",
        "(lam (is-square (fold $0 prev_dc_inv_0 (lam (lam (mod $0 $1))))))",
        "(lam (gt? (mod (car (prev_dc_inv_7 $0 prev_dc_inv_1)) prev_dc_inv_1) 0))",
        "(lam (is-prime (- (length (prev_dc_inv_8 $0 (lam (is-prime $0)))) 1)))",
        "(lam (gt? (length (prev_dc_inv_8 $0 (lam (eq? prev_dc_inv_2 $0)))) 1))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (is-prime (+ prev_dc_inv_0 (index (length $0) (cons prev_dc_inv_1 $0)))))",
        "(lam (is-prime (+ (index (length $0) (cons prev_dc_inv_1 $0)) prev_dc_inv_0)))",
        "(lam (is-square (fold (prev_dc_inv_4 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $0 $1))))))",
        "(lam (is-square (fold (prev_dc_inv_4 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $1 $0))))))",
        "(lam (fold $0 (is-prime prev_dc_inv_0) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (fold $0 (is-square prev_dc_inv_1) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (fold $0 prev_dc_inv_0 (lam (lam (if (gt? $0 $1) $0 $1)))))",
        "(lam (fold $0 prev_dc_inv_0 (lam (lam (if (gt? $1 $0) $1 $0)))))",
        "(lam (length $0))",
        "(lam (length (prev_dc_inv_3 prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_10 $0 1))",
        "(lam (prev_dc_inv_4 1 $0))",
        "(lam (prev_dc_inv_4 (- prev_dc_inv_0 1) $0))",
        "(lam (prev_dc_inv_4 (- 1 prev_dc_inv_0) $0))",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
        "(lam (map (lam (* prev_dc_inv_2 $0)) $0))",
        "(lam (map (lam (* $0 prev_dc_inv_2)) $0))",
        "fn_11",
        "(lam (prev_dc_inv_8 $0 (lam (is-prime (+ prev_dc_inv_1 (mod $0 prev_dc_inv_1))))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr (prev_dc_inv_5 prev_dc_inv_1 $0))))))",
        "(lam (cons (car $0) $0))",
        "(lam (cons (index 0 $0) $0))",
        "(lam (cons 0 $0))",
        "(lam (cons (length empty) $0))",
        "fn_11",
        "(lam (prev_dc_inv_8 $0 (lam (is-prime (+ prev_dc_inv_1 (mod $0 prev_dc_inv_1))))))",
        "(lam (map (lam (index prev_dc_inv_0 $1)) $0))",
        "(lam (map (lam (index prev_dc_inv_0 (prev_dc_inv_6 $1))) $0))",
        "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (fold $0 (cdr (range 1)) (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (cons (car $0) empty))",
        "(lam (prev_dc_inv_3 (car $0) (range 1)))",
        "(lam (cdr (prev_dc_inv_6 $0)))",
        "(lam (map (lam (index $0 (cdr $1))) (range prev_dc_inv_0)))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_6 (cdr $0)) (index prev_dc_inv_2 $0)))",
        "(lam (cdr (prev_dc_inv_6 (cdr $0))))",
        "(lam (cdr (prev_dc_inv_6 (prev_dc_inv_6 (cdr $0)))))",
        "(lam (prev_dc_inv_9 (cdr $0)))",
        "(lam (cdr (map (lam (index $0 $1)) (cdr (range (+ prev_dc_inv_1 prev_dc_inv_0))))))",
        "(lam (cdr (cdr (prev_dc_inv_9 $0))))",
        "(lam (cdr (prev_dc_inv_6 (cdr (cdr $0)))))",
        "(lam (cdr (prev_dc_inv_9 (cdr (cdr $0)))))",
        "(lam (prev_dc_inv_6 (cdr (cdr (cdr (cdr $0))))))",
        "(lam (cdr $0))",
        "(lam (cdr (map (lam $0) $0)))",
        "(lam (cdr (prev_dc_inv_6 (cons prev_dc_inv_0 $0))))",
        "(lam (cdr (prev_dc_inv_6 (cons prev_dc_inv_1 $0))))",
        "(lam (prev_dc_inv_6 $0))",
        "(lam (fold (range prev_dc_inv_1) empty (lam (lam (cons (index $1 $2) $0)))))",
        "(lam (prev_dc_inv_8 $0 (lam (is-square $0))))",
        "(lam (prev_dc_inv_8 $0 (lam (is-square (* prev_dc_inv_1 $0)))))",
        "(lam (prev_dc_inv_8 $0 (lam (is-prime $0))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) 1 $0))",
        "(lambda (map (lambda (+ 1 $0)) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (index #(+ 1 (+ 1 1)) $0)))",
        "(lambda (fold $0 (cdr (cdr (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))) (lambda (lambda (cons $1 $0)))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 0))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (length empty)))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ 1 #(+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (fold $0 #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda #(+ 1 #(+ 1 (+ 1 1))))))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))",
        "(lambda (fold $0 (map (lambda #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)) (range 1)) (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda (gt? $0 #(+ 1 (+ 1 1)))) $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (gt? $1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (gt? 1 (mod $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (eq? #(+ 1 (+ 1 1)) $0)) $0))",
        "(lambda (map (lambda (eq? $0 #(+ 1 (+ 1 1)))) $0))",
        "(lambda (map (lambda (eq? #(+ 1 #(+ 1 (+ 1 1))) $0)) $0))",
        "(lambda (map (lambda (eq? $0 #(+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 (+ 1 #(+ 1 #(+ 1 (+ 1 1))))))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 #(+ 1 #(+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0) #(+ 1 #(+ 1 (+ 1 1)))))",
        "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? 1 $0)))))",
        "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? $0 0)))))",
        "(lambda (empty? $0))",
        "(lambda (empty? (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 (+ 1 1)) $0)))",
        "(lambda (is-square (fold $0 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) (lambda (lambda (* $0 $1))))))",
        "(lambda (is-square (fold $0 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) (lambda (lambda (* $1 $0))))))",
        "(lambda (is-square (fold $0 #(+ 1 (+ 1 1)) (lambda (lambda (mod $0 $1))))))",
        "(lambda (gt? (mod (car (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ 1 #(+ 1 (+ 1 1))))) #(+ 1 #(+ 1 (+ 1 1)))) 0))",
        "(lambda (is-prime (- (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime $0)))) 1)))",
        "(lambda (gt? (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)))) 1))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (is-prime (+ #(+ 1 (+ 1 1)) (index (length $0) (cons #(+ 1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (is-prime (+ (index (length $0) (cons #(+ 1 #(+ 1 (+ 1 1))) $0)) #(+ 1 (+ 1 1)))))",
        "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $0 $1))))))",
        "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $1 $0))))))",
        "(lambda (fold $0 (is-prime #(+ 1 (+ 1 1))) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (fold $0 (is-square #(+ 1 #(+ 1 (+ 1 1)))) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (fold $0 #(+ 1 (+ 1 1)) (lambda (lambda (if (gt? $0 $1) $0 $1)))))",
        "(lambda (fold $0 #(+ 1 (+ 1 1)) (lambda (lambda (if (gt? $1 $0) $1 $0)))))",
        "(lambda (length $0))",
        "(lambda (length (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0)))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 1))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) 1 $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (- #(+ 1 (+ 1 1)) 1) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (- 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
        "(lambda (map (lambda (* #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)) $0))",
        "(lambda (map (lambda (* $0 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1))) $0))",
        "#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (mod (+ $0 $0) #(+ 1 #(+ 1 (+ 1 1))))))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1)))))))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 #(+ 1 (+ 1 1))) $0))))))",
        "(lambda (cons (car $0) $0))",
        "(lambda (cons (index 0 $0) $0))",
        "(lambda (cons 0 $0))",
        "(lambda (cons (length empty) $0))",
        "#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (mod (+ $0 $0) #(+ 1 #(+ 1 (+ 1 1))))))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1)))))))))",
        "(lambda (map (lambda (index #(+ 1 (+ 1 1)) $1)) $0))",
        "(lambda (map (lambda (index #(+ 1 (+ 1 1)) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $1))) $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (fold $0 (cdr (range 1)) (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (cons (car $0) empty))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) (car $0) (range 1)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))",
        "(lambda (map (lambda (index $0 (cdr $1))) (range #(+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) $0))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cdr $0)) (index #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cdr $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cdr $0)))))",
        "(lambda (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) (cdr $0)))",
        "(lambda (cdr (map (lambda (index $0 $1)) (cdr (range (+ #(+ 1 #(+ 1 (+ 1 1))) #(+ 1 (+ 1 1))))))))",
        "(lambda (cdr (cdr (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cdr (cdr $0)))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) (cdr (cdr $0)))))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cdr (cdr (cdr (cdr $0))))))",
        "(lambda (cdr $0))",
        "(lambda (cdr (map (lambda $0) $0)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cons #(+ 1 (+ 1 1)) $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cons #(+ 1 #(+ 1 (+ 1 1))) $0))))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))",
        "(lambda (fold (range #(+ 1 #(+ 1 (+ 1 1)))) empty (lambda (lambda (cons (index $1 $2) $0)))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-square $0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-square (* #(+ 1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime $0))))"
      ],
      "utility": 609,
      "expected_cost": 21635,
      "final_cost": 21635,
      "multiplier": 1.0655419459209614,
      "multiplier_wrt_orig": 1.0655419459209614,
      "num_uses": 2,
      "uses": [
        {
          "fn_11 ": "(lam (prev_dc_inv_8 $0 (lam (is-prime (mod (+ $0 $0) prev_dc_inv_1)))))"
        }
      ]
    }
  ]
}