{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/bench009_it11.json --max-arity=3 --threads=1 --iterations=3 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/out/stitch/2022-10-04_19-36-07/raw/bench009_it11.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/bench009_it11.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.31.39/out/stitch/2022-10-04_19-36-07/raw/bench009_it11.json",
    "iterations": 3,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 98385,
  "original": [
    "(lam (prev_dc_inv_5 1 $0))",
    "(lam (map (lam (+ 1 $0)) $0))",
    "(lam (prev_dc_inv_5 prev_dc_inv_0 $0))",
    "(lam (map (lam (+ 1 (+ $0 (+ 1 1)))) $0))",
    "(lam (prev_dc_inv_5 prev_dc_inv_1 $0))",
    "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
    "(lam (prev_dc_inv_9 $0 (index 1 $0)))",
    "(lam (prev_dc_inv_9 $0 (car (cdr $0))))",
    "(lam (prev_dc_inv_9 $0 (car (prev_dc_inv_2 $0))))",
    "(lam (prev_dc_inv_9 $0 (index 1 (cdr $0))))",
    "(lam (prev_dc_inv_9 $0 (index prev_dc_inv_0 $0)))",
    "(lam (fold $0 (cdr (prev_dc_inv_2 (prev_dc_inv_8 $0))) (lam (lam (cons $1 $0)))))",
    "(lam (prev_dc_inv_9 $0 0))",
    "(lam (prev_dc_inv_9 $0 (length empty)))",
    "(lam (prev_dc_inv_9 $0 prev_dc_inv_0))",
    "(lam (prev_dc_inv_9 (map (lam $0) $0) prev_dc_inv_0))",
    "(lam (prev_dc_inv_9 $0 prev_dc_inv_1))",
    "(lam (prev_dc_inv_9 $0 (fold $0 prev_dc_inv_1 (lam (lam prev_dc_inv_1)))))",
    "(lam (prev_dc_inv_9 $0 prev_dc_inv_4))",
    "(lam (fold $0 (map (lam prev_dc_inv_4) (range 1)) (lam (lam (cons $1 $0)))))",
    "(lam (map (lam (gt? (+ prev_dc_inv_1 $0) prev_dc_inv_0)) $0))",
    "(lam (map (lam (gt? (+ $0 prev_dc_inv_1) prev_dc_inv_0)) $0))",
    "(lam (map (lam (gt? $0 0)) $0))",
    "(lam (map (lam (gt? $0 (length empty))) $0))",
    "(lam (map (lam (gt? $0 prev_dc_inv_0)) $0))",
    "(lam (fold $0 empty (lam (lam (cons (gt? $1 prev_dc_inv_0) $0)))))",
    "(lam (prev_dc_inv_7 prev_dc_inv_0 $0))",
    "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_0))) $0))",
    "(lam (prev_dc_inv_7 prev_dc_inv_1 $0))",
    "(lam (map (lam (eq? prev_dc_inv_0 $0)) $0))",
    "(lam (map (lam (eq? $0 prev_dc_inv_0)) $0))",
    "(lam (map (lam (eq? prev_dc_inv_1 $0)) $0))",
    "(lam (map (lam (eq? $0 prev_dc_inv_1)) $0))",
    "(lam (map (lam (- 1 $0)) $0))",
    "(lam (prev_dc_inv_12 $0 (- 1 prev_dc_inv_0)))",
    "(lam (prev_dc_inv_12 $0 prev_dc_inv_0))",
    "(lam (prev_dc_inv_6 prev_dc_inv_0 (prev_dc_inv_5 prev_dc_inv_1 $0)))",
    "(lam (prev_dc_inv_12 $0 prev_dc_inv_4))",
    "(lam (prev_dc_inv_12 $0 (+ 1 prev_dc_inv_1)))",
    "(lam (prev_dc_inv_6 prev_dc_inv_1 (prev_dc_inv_5 prev_dc_inv_0 $0)))",
    "(lam (map (lam (mod (+ prev_dc_inv_0 $0) prev_dc_inv_1)) $0))",
    "(lam (prev_dc_inv_12 $0 prev_dc_inv_0))",
    "(lam (prev_dc_inv_12 (map (lam $0) $0) prev_dc_inv_0))",
    "(lam (map (lam (- 1 $0)) $0))",
    "(lam (prev_dc_inv_12 $0 (- prev_dc_inv_0 1)))",
    "(lam (prev_dc_inv_12 (prev_dc_inv_12 $0 prev_dc_inv_0) prev_dc_inv_0))",
    "(lam (prev_dc_inv_12 (prev_dc_inv_12 $0 prev_dc_inv_1) prev_dc_inv_0))",
    "(lam (prev_dc_inv_12 $0 prev_dc_inv_1))",
    "(lam (prev_dc_inv_12 (prev_dc_inv_5 prev_dc_inv_1 $0) prev_dc_inv_1))",
    "(lam (length (prev_dc_inv_10 $0 (lam (gt? 1 $0)))))",
    "(lam (length (prev_dc_inv_10 $0 (lam (eq? $0 0)))))",
    "(lam (length (prev_dc_inv_10 $0 (lam (eq? prev_dc_inv_0 $0)))))",
    "(lam (length (prev_dc_inv_10 $0 (lam (eq? $0 prev_dc_inv_0)))))",
    "(lam (prev_dc_inv_13 $0))",
    "(lam (length (prev_dc_inv_10 $0 (lam (eq? $0 prev_dc_inv_4)))))",
    "(lam (cdr (prev_dc_inv_2 $0)))",
    "(lam (prev_dc_inv_2 (map (lam $0) (cdr $0))))",
    "(lam (cdr (prev_dc_inv_2 (prev_dc_inv_2 $0))))",
    "(lam (fold (range prev_dc_inv_4) $0 (lam (lam (cdr $0)))))",
    "(lam (empty? $0))",
    "(lam (empty? (prev_dc_inv_7 prev_dc_inv_0 $0)))",
    "(lam (prev_dc_inv_10 $0 (lam (empty? (prev_dc_inv_14 (map (lam $1) $1))))))",
    "(lam (prev_dc_inv_10 $0 (lam (empty? (prev_dc_inv_14 (cons $0 empty))))))",
    "(lam (gt? (length (prev_dc_inv_10 $0 (lam (eq? $0 (car $1))))) 1))",
    "(lam (gt? (length (prev_dc_inv_10 $0 (lam (eq? (car $1) $0)))) 1))",
    "(lam (gt? (prev_dc_inv_13 (prev_dc_inv_5 prev_dc_inv_4 $0)) 0))",
    "(lam (is-prime (+ prev_dc_inv_1 (prev_dc_inv_13 (prev_dc_inv_5 prev_dc_inv_4 $0)))))",
    "(lam (is-square (fold $0 prev_dc_inv_0 (lam (lam (mod $0 $1))))))",
    "(lam (gt? (mod (car (prev_dc_inv_9 $0 prev_dc_inv_1)) prev_dc_inv_1) 0))",
    "(lam (gt? (prev_dc_inv_13 $0) 1))",
    "(lam (gt? (prev_dc_inv_13 $0) 0))",
    "(lam (car $0))",
    "(lam (index 0 $0))",
    "(lam (car $0))",
    "(lam (index 0 $0))",
    "(lam (car (prev_dc_inv_2 $0)))",
    "(lam (index 1 (cdr $0)))",
    "(lam (index prev_dc_inv_1 $0))",
    "(lam (index prev_dc_inv_0 (cdr $0)))",
    "(lam (empty? (prev_dc_inv_14 $0)))",
    "(lam (empty? (prev_dc_inv_14 (prev_dc_inv_14 $0))))",
    "(lam (is-square (fold (prev_dc_inv_6 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $0 $1))))))",
    "(lam (is-square (fold (prev_dc_inv_6 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $1 $0))))))",
    "(lam (fold $0 (is-prime prev_dc_inv_0) (lam (lam (if $0 (is-prime $1) $0)))))",
    "(lam (fold $0 (is-square 1) (lam (lam (if $0 (is-prime $1) $0)))))",
    "(lam (car (prev_dc_inv_10 $0 (lam (empty? (prev_dc_inv_10 $1 (lam (gt? $0 $1))))))))",
    "(lam (fold $0 prev_dc_inv_0 (lam (lam (if (gt? $0 $1) $0 $1)))))",
    "(lam (car (prev_dc_inv_10 (range (* prev_dc_inv_1 prev_dc_inv_1)) (lam (is-prime (- prev_dc_inv_1 (length (prev_dc_inv_10 $1 (lam (gt? $0 $1))))))))))",
    "(lam (car (prev_dc_inv_10 (range (* prev_dc_inv_1 prev_dc_inv_4)) (lam (is-prime (- prev_dc_inv_1 (length (prev_dc_inv_10 $1 (lam (gt? $0 $1))))))))))",
    "(lam (car (prev_dc_inv_10 $0 (lam (eq? prev_dc_inv_0 (length (prev_dc_inv_10 $1 (lam (gt? $1 $0)))))))))",
    "(lam (car (prev_dc_inv_10 $0 (lam (eq? (length (prev_dc_inv_10 $1 (lam (gt? $1 $0)))) prev_dc_inv_0)))))",
    "(lam (index (length (cdr $0)) $0))",
    "(lam (index (- (length $0) 1) $0))",
    "(lam (length $0))",
    "(lam (length (prev_dc_inv_5 prev_dc_inv_0 $0)))",
    "(lam (prev_dc_inv_12 $0 1))",
    "(lam (prev_dc_inv_6 1 $0))",
    "(lam (prev_dc_inv_6 (- prev_dc_inv_0 1) $0))",
    "(lam (prev_dc_inv_6 (- 1 prev_dc_inv_0) $0))",
    "(lam (prev_dc_inv_6 prev_dc_inv_0 $0))",
    "(lam (map (lam (mod $0 prev_dc_inv_0)) $0))",
    "(lam (prev_dc_inv_6 prev_dc_inv_1 $0))",
    "(lam (map (lam (mod $0 prev_dc_inv_1)) $0))",
    "(lam (prev_dc_inv_6 prev_dc_inv_4 $0))",
    "(lam (map (lam (mod $0 prev_dc_inv_4)) $0))",
    "(lam (prev_dc_inv_12 $0 1))",
    "(lam (prev_dc_inv_6 1 $0))",
    "(lam (map (lam (+ $0 $0)) $0))",
    "(lam (map (lam $0) (map (lam (+ $0 $0)) $0)))",
    "(lam (map (lam (* prev_dc_inv_0 $0)) $0))",
    "(lam (map (lam (* $0 prev_dc_inv_0)) $0))",
    "(lam (map (lam (* prev_dc_inv_4 $0)) $0))",
    "(lam (map (lam (* $0 prev_dc_inv_4)) $0))",
    "(lam (prev_dc_inv_14 $0))",
    "(lam (prev_dc_inv_14 (prev_dc_inv_14 $0)))",
    "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
    "(lam (map (lam (index $0 $1)) (range (length (cdr (prev_dc_inv_7 prev_dc_inv_1 $0))))))",
    "(lam (prev_dc_inv_3 $0 $0))",
    "(lam (prev_dc_inv_3 $0 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_3 (cdr $0) $0))",
    "(lam (cons (index 1 $0) $0))",
    "(lam (cons (index prev_dc_inv_0 $0) $0))",
    "(lam (prev_dc_inv_3 (prev_dc_inv_2 (cdr $0)) $0))",
    "(lam (cons 0 $0))",
    "(lam (cons (length empty) $0))",
    "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
    "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
    "(lam (prev_dc_inv_3 $0 (prev_dc_inv_2 $0)))",
    "(lam (prev_dc_inv_3 $0 (map (lam $0) (prev_dc_inv_2 $0))))",
    "(lam (prev_dc_inv_3 $0 (cons (index 1 $0) (prev_dc_inv_3 (prev_dc_inv_2 $0) (prev_dc_inv_2 (prev_dc_inv_2 $0))))))",
    "(lam (prev_dc_inv_14 $0))",
    "(lam (prev_dc_inv_10 $0 (lam (is-prime (mod (+ $0 $0) prev_dc_inv_1)))))",
    "(lam (prev_dc_inv_10 $0 (lam (gt? (mod $0 prev_dc_inv_0) 0))))",
    "(lam (prev_dc_inv_10 $0 (lam (is-prime (+ (mod $0 prev_dc_inv_0) 1)))))",
    "(lam (fold $0 $0 (lam (lam (cons $1 $0)))))",
    "(lam (map (lam $0) (fold $0 $0 (lam (lam (cons $1 $0))))))",
    "(lam (map (lam (car $1)) $0))",
    "(lam (map (lam (index 0 $1)) $0))",
    "(lam (map (lam (index prev_dc_inv_0 $1)) $0))",
    "(lam (map (lam (index prev_dc_inv_0 (prev_dc_inv_8 $1))) $0))",
    "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
    "(lam (fold $0 (cdr (range 1)) (lam (lam (cons (index (length $0) $2) $0)))))",
    "(lam (prev_dc_inv_3 $0 empty))",
    "(lam (prev_dc_inv_3 $0 (range 0)))",
    "(lam (prev_dc_inv_8 $0))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_8 $0)))",
    "(lam (prev_dc_inv_2 (prev_dc_inv_8 (prev_dc_inv_3 $0 $0))))",
    "(lam (prev_dc_inv_2 (prev_dc_inv_8 (cons prev_dc_inv_0 $0))))",
    "(lam (cdr (prev_dc_inv_8 $0)))",
    "(lam (map (lam (index $0 (cdr $1))) (range prev_dc_inv_0)))",
    "(lam (prev_dc_inv_11 $0))",
    "(lam (prev_dc_inv_9 (prev_dc_inv_8 (cdr $0)) (index prev_dc_inv_4 $0)))",
    "(lam (cdr (prev_dc_inv_8 (cdr $0))))",
    "(lam (cdr (prev_dc_inv_8 (prev_dc_inv_8 (cdr $0)))))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_2 $0)))",
    "(lam (cdr (prev_dc_inv_11 $0)))",
    "(lam (prev_dc_inv_11 (cdr $0)))",
    "(lam (map (lam (index $0 $1)) (prev_dc_inv_2 (range (+ prev_dc_inv_1 prev_dc_inv_0)))))",
    "(lam (prev_dc_inv_2 (cdr (prev_dc_inv_8 $0))))",
    "(lam (cdr (prev_dc_inv_2 (prev_dc_inv_8 $0))))",
    "(lam (prev_dc_inv_2 (prev_dc_inv_11 $0)))",
    "(lam (cdr (prev_dc_inv_8 (prev_dc_inv_2 $0))))",
    "(lam (prev_dc_inv_11 (prev_dc_inv_2 $0)))",
    "(lam (prev_dc_inv_11 (prev_dc_inv_2 (map (lam $0) $0))))",
    "(lam (prev_dc_inv_2 (prev_dc_inv_8 (prev_dc_inv_2 $0))))",
    "(lam (cdr (prev_dc_inv_2 (prev_dc_inv_11 $0))))",
    "(lam (prev_dc_inv_8 (prev_dc_inv_2 (prev_dc_inv_2 $0))))",
    "(lam (cdr (prev_dc_inv_11 (prev_dc_inv_2 $0))))",
    "(lam (cdr $0))",
    "(lam (cdr (map (lam $0) $0)))",
    "(lam (prev_dc_inv_3 $0 empty))",
    "(lam (prev_dc_inv_3 $0 (range 0)))",
    "(lam (prev_dc_inv_3 $0 (prev_dc_inv_3 (cdr $0) empty)))",
    "(lam (prev_dc_inv_2 (prev_dc_inv_8 (prev_dc_inv_3 $0 (prev_dc_inv_3 $0 $0)))))",
    "(lam (cdr (prev_dc_inv_8 (cons prev_dc_inv_0 $0))))",
    "(lam (cdr (prev_dc_inv_8 (cons 1 $0))))",
    "(lam (prev_dc_inv_8 $0))",
    "(lam (fold (range prev_dc_inv_1) empty (lam (lam (cons (index $1 $2) $0)))))",
    "(lam (prev_dc_inv_10 $0 (lam (is-square $0))))",
    "(lam (prev_dc_inv_10 $0 (lam (is-square (* prev_dc_inv_1 $0)))))",
    "(lam (prev_dc_inv_10 $0 (lam (is-prime $0))))",
    "(lam (prev_dc_inv_10 $0 (lam (gt? $0 0))))",
    "(lam (prev_dc_inv_10 $0 (lam (gt? $0 (length empty)))))",
    "(lam (prev_dc_inv_10 $0 (lam (gt? 1 $0))))",
    "(lam (prev_dc_inv_10 $0 (lam (eq? $0 0))))",
    "(lam (prev_dc_inv_10 $0 (lam (gt? $0 prev_dc_inv_0))))",
    "(lam (prev_dc_inv_10 (map (lam $0) $0) (lam (gt? $0 prev_dc_inv_0))))"
  ],
  "invs": [
    {
      "body": "(lam (map (lam (#1 $0 #0)) $0))",
      "dreamcoder": "#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0))))",
      "arity": 2,
      "name": "fn_15",
      "rewritten": [
        "(lam (prev_dc_inv_5 1 $0))",
        "(lam (map (lam (+ 1 $0)) $0))",
        "(lam (prev_dc_inv_5 prev_dc_inv_0 $0))",
        "(lam (map (lam (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lam (prev_dc_inv_5 prev_dc_inv_1 $0))",
        "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
        "(lam (prev_dc_inv_9 $0 (index 1 $0)))",
        "(lam (prev_dc_inv_9 $0 (car (cdr $0))))",
        "(lam (prev_dc_inv_9 $0 (car (prev_dc_inv_2 $0))))",
        "(lam (prev_dc_inv_9 $0 (index 1 (cdr $0))))",
        "(lam (prev_dc_inv_9 $0 (index prev_dc_inv_0 $0)))",
        "(lam (fold $0 (cdr (prev_dc_inv_2 (prev_dc_inv_8 $0))) (lam (lam (cons $1 $0)))))",
        "(lam (prev_dc_inv_9 $0 0))",
        "(lam (prev_dc_inv_9 $0 (length empty)))",
        "(lam (prev_dc_inv_9 $0 prev_dc_inv_0))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0) prev_dc_inv_0))",
        "(lam (prev_dc_inv_9 $0 prev_dc_inv_1))",
        "(lam (prev_dc_inv_9 $0 (fold $0 prev_dc_inv_1 (lam (lam prev_dc_inv_1)))))",
        "(lam (prev_dc_inv_9 $0 prev_dc_inv_4))",
        "(lam (fold $0 (map (lam prev_dc_inv_4) (range 1)) (lam (lam (cons $1 $0)))))",
        "(lam (map (lam (gt? (+ prev_dc_inv_1 $0) prev_dc_inv_0)) $0))",
        "(lam (map (lam (gt? (+ $0 prev_dc_inv_1) prev_dc_inv_0)) $0))",
        "(fn_15 0 gt?)",
        "(fn_15 (length empty) gt?)",
        "(fn_15 prev_dc_inv_0 gt?)",
        "(lam (fold $0 empty (lam (lam (cons (gt? $1 prev_dc_inv_0) $0)))))",
        "(lam (prev_dc_inv_7 prev_dc_inv_0 $0))",
        "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_0))) $0))",
        "(lam (prev_dc_inv_7 prev_dc_inv_1 $0))",
        "(lam (map (lam (eq? prev_dc_inv_0 $0)) $0))",
        "(fn_15 prev_dc_inv_0 eq?)",
        "(lam (map (lam (eq? prev_dc_inv_1 $0)) $0))",
        "(fn_15 prev_dc_inv_1 eq?)",
        "(lam (map (lam (- 1 $0)) $0))",
        "(lam (prev_dc_inv_12 $0 (- 1 prev_dc_inv_0)))",
        "(lam (prev_dc_inv_12 $0 prev_dc_inv_0))",
        "(lam (prev_dc_inv_6 prev_dc_inv_0 (prev_dc_inv_5 prev_dc_inv_1 $0)))",
        "(lam (prev_dc_inv_12 $0 prev_dc_inv_4))",
        "(lam (prev_dc_inv_12 $0 (+ 1 prev_dc_inv_1)))",
        "(lam (prev_dc_inv_6 prev_dc_inv_1 (prev_dc_inv_5 prev_dc_inv_0 $0)))",
        "(lam (map (lam (mod (+ prev_dc_inv_0 $0) prev_dc_inv_1)) $0))",
        "(lam (prev_dc_inv_12 $0 prev_dc_inv_0))",
        "(lam (prev_dc_inv_12 (map (lam $0) $0) prev_dc_inv_0))",
        "(lam (map (lam (- 1 $0)) $0))",
        "(lam (prev_dc_inv_12 $0 (- prev_dc_inv_0 1)))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_12 $0 prev_dc_inv_0) prev_dc_inv_0))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_12 $0 prev_dc_inv_1) prev_dc_inv_0))",
        "(lam (prev_dc_inv_12 $0 prev_dc_inv_1))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_5 prev_dc_inv_1 $0) prev_dc_inv_1))",
        "(lam (length (prev_dc_inv_10 $0 (lam (gt? 1 $0)))))",
        "(lam (length (prev_dc_inv_10 $0 (lam (eq? $0 0)))))",
        "(lam (length (prev_dc_inv_10 $0 (lam (eq? prev_dc_inv_0 $0)))))",
        "(lam (length (prev_dc_inv_10 $0 (lam (eq? $0 prev_dc_inv_0)))))",
        "(lam (prev_dc_inv_13 $0))",
        "(lam (length (prev_dc_inv_10 $0 (lam (eq? $0 prev_dc_inv_4)))))",
        "(lam (cdr (prev_dc_inv_2 $0)))",
        "(lam (prev_dc_inv_2 (map (lam $0) (cdr $0))))",
        "(lam (cdr (prev_dc_inv_2 (prev_dc_inv_2 $0))))",
        "(lam (fold (range prev_dc_inv_4) $0 (lam (lam (cdr $0)))))",
        "(lam (empty? $0))",
        "(lam (empty? (prev_dc_inv_7 prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_10 $0 (lam (empty? (prev_dc_inv_14 (map (lam $1) $1))))))",
        "(lam (prev_dc_inv_10 $0 (lam (empty? (prev_dc_inv_14 (cons $0 empty))))))",
        "(lam (gt? (length (prev_dc_inv_10 $0 (lam (eq? $0 (car $1))))) 1))",
        "(lam (gt? (length (prev_dc_inv_10 $0 (lam (eq? (car $1) $0)))) 1))",
        "(lam (gt? (prev_dc_inv_13 (prev_dc_inv_5 prev_dc_inv_4 $0)) 0))",
        "(lam (is-prime (+ prev_dc_inv_1 (prev_dc_inv_13 (prev_dc_inv_5 prev_dc_inv_4 $0)))))",
        "(lam (is-square (fold $0 prev_dc_inv_0 (lam (lam (mod $0 $1))))))",
        "(lam (gt? (mod (car (prev_dc_inv_9 $0 prev_dc_inv_1)) prev_dc_inv_1) 0))",
        "(lam (gt? (prev_dc_inv_13 $0) 1))",
        "(lam (gt? (prev_dc_inv_13 $0) 0))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (car (prev_dc_inv_2 $0)))",
        "(lam (index 1 (cdr $0)))",
        "(lam (index prev_dc_inv_1 $0))",
        "(lam (index prev_dc_inv_0 (cdr $0)))",
        "(lam (empty? (prev_dc_inv_14 $0)))",
        "(lam (empty? (prev_dc_inv_14 (prev_dc_inv_14 $0))))",
        "(lam (is-square (fold (prev_dc_inv_6 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $0 $1))))))",
        "(lam (is-square (fold (prev_dc_inv_6 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $1 $0))))))",
        "(lam (fold $0 (is-prime prev_dc_inv_0) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (fold $0 (is-square 1) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (car (prev_dc_inv_10 $0 (lam (empty? (prev_dc_inv_10 $1 (lam (gt? $0 $1))))))))",
        "(lam (fold $0 prev_dc_inv_0 (lam (lam (if (gt? $0 $1) $0 $1)))))",
        "(lam (car (prev_dc_inv_10 (range (* prev_dc_inv_1 prev_dc_inv_1)) (lam (is-prime (- prev_dc_inv_1 (length (prev_dc_inv_10 $1 (lam (gt? $0 $1))))))))))",
        "(lam (car (prev_dc_inv_10 (range (* prev_dc_inv_1 prev_dc_inv_4)) (lam (is-prime (- prev_dc_inv_1 (length (prev_dc_inv_10 $1 (lam (gt? $0 $1))))))))))",
        "(lam (car (prev_dc_inv_10 $0 (lam (eq? prev_dc_inv_0 (length (prev_dc_inv_10 $1 (lam (gt? $1 $0)))))))))",
        "(lam (car (prev_dc_inv_10 $0 (lam (eq? (length (prev_dc_inv_10 $1 (lam (gt? $1 $0)))) prev_dc_inv_0)))))",
        "(lam (index (length (cdr $0)) $0))",
        "(lam (index (- (length $0) 1) $0))",
        "(lam (length $0))",
        "(lam (length (prev_dc_inv_5 prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_12 $0 1))",
        "(lam (prev_dc_inv_6 1 $0))",
        "(lam (prev_dc_inv_6 (- prev_dc_inv_0 1) $0))",
        "(lam (prev_dc_inv_6 (- 1 prev_dc_inv_0) $0))",
        "(lam (prev_dc_inv_6 prev_dc_inv_0 $0))",
        "(fn_15 prev_dc_inv_0 mod)",
        "(lam (prev_dc_inv_6 prev_dc_inv_1 $0))",
        "(fn_15 prev_dc_inv_1 mod)",
        "(lam (prev_dc_inv_6 prev_dc_inv_4 $0))",
        "(fn_15 prev_dc_inv_4 mod)",
        "(lam (prev_dc_inv_12 $0 1))",
        "(lam (prev_dc_inv_6 1 $0))",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(lam (map (lam $0) (map (lam (+ $0 $0)) $0)))",
        "(lam (map (lam (* prev_dc_inv_0 $0)) $0))",
        "(fn_15 prev_dc_inv_0 *)",
        "(lam (map (lam (* prev_dc_inv_4 $0)) $0))",
        "(fn_15 prev_dc_inv_4 *)",
        "(lam (prev_dc_inv_14 $0))",
        "(lam (prev_dc_inv_14 (prev_dc_inv_14 $0)))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr (prev_dc_inv_7 prev_dc_inv_1 $0))))))",
        "(lam (prev_dc_inv_3 $0 $0))",
        "(lam (prev_dc_inv_3 $0 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_3 (cdr $0) $0))",
        "(lam (cons (index 1 $0) $0))",
        "(lam (cons (index prev_dc_inv_0 $0) $0))",
        "(lam (prev_dc_inv_3 (prev_dc_inv_2 (cdr $0)) $0))",
        "(lam (cons 0 $0))",
        "(lam (cons (length empty) $0))",
        "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
        "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
        "(lam (prev_dc_inv_3 $0 (prev_dc_inv_2 $0)))",
        "(lam (prev_dc_inv_3 $0 (map (lam $0) (prev_dc_inv_2 $0))))",
        "(lam (prev_dc_inv_3 $0 (cons (index 1 $0) (prev_dc_inv_3 (prev_dc_inv_2 $0) (prev_dc_inv_2 (prev_dc_inv_2 $0))))))",
        "(lam (prev_dc_inv_14 $0))",
        "(lam (prev_dc_inv_10 $0 (lam (is-prime (mod (+ $0 $0) prev_dc_inv_1)))))",
        "(lam (prev_dc_inv_10 $0 (lam (gt? (mod $0 prev_dc_inv_0) 0))))",
        "(lam (prev_dc_inv_10 $0 (lam (is-prime (+ (mod $0 prev_dc_inv_0) 1)))))",
        "(lam (fold $0 $0 (lam (lam (cons $1 $0)))))",
        "(lam (map (lam $0) (fold $0 $0 (lam (lam (cons $1 $0))))))",
        "(lam (map (lam (car $1)) $0))",
        "(lam (map (lam (index 0 $1)) $0))",
        "(lam (map (lam (index prev_dc_inv_0 $1)) $0))",
        "(lam (map (lam (index prev_dc_inv_0 (prev_dc_inv_8 $1))) $0))",
        "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (fold $0 (cdr (range 1)) (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (prev_dc_inv_3 $0 empty))",
        "(lam (prev_dc_inv_3 $0 (range 0)))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_8 $0)))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_8 (prev_dc_inv_3 $0 $0))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_8 (cons prev_dc_inv_0 $0))))",
        "(lam (cdr (prev_dc_inv_8 $0)))",
        "(lam (map (lam (index $0 (cdr $1))) (range prev_dc_inv_0)))",
        "(lam (prev_dc_inv_11 $0))",
        "(lam (prev_dc_inv_9 (prev_dc_inv_8 (cdr $0)) (index prev_dc_inv_4 $0)))",
        "(lam (cdr (prev_dc_inv_8 (cdr $0))))",
        "(lam (cdr (prev_dc_inv_8 (prev_dc_inv_8 (cdr $0)))))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_2 $0)))",
        "(lam (cdr (prev_dc_inv_11 $0)))",
        "(lam (prev_dc_inv_11 (cdr $0)))",
        "(lam (map (lam (index $0 $1)) (prev_dc_inv_2 (range (+ prev_dc_inv_1 prev_dc_inv_0)))))",
        "(lam (prev_dc_inv_2 (cdr (prev_dc_inv_8 $0))))",
        "(lam (cdr (prev_dc_inv_2 (prev_dc_inv_8 $0))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_11 $0)))",
        "(lam (cdr (prev_dc_inv_8 (prev_dc_inv_2 $0))))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_2 $0)))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_2 (map (lam $0) $0))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_8 (prev_dc_inv_2 $0))))",
        "(lam (cdr (prev_dc_inv_2 (prev_dc_inv_11 $0))))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_2 (prev_dc_inv_2 $0))))",
        "(lam (cdr (prev_dc_inv_11 (prev_dc_inv_2 $0))))",
        "(lam (cdr $0))",
        "(lam (cdr (map (lam $0) $0)))",
        "(lam (prev_dc_inv_3 $0 empty))",
        "(lam (prev_dc_inv_3 $0 (range 0)))",
        "(lam (prev_dc_inv_3 $0 (prev_dc_inv_3 (cdr $0) empty)))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_8 (prev_dc_inv_3 $0 (prev_dc_inv_3 $0 $0)))))",
        "(lam (cdr (prev_dc_inv_8 (cons prev_dc_inv_0 $0))))",
        "(lam (cdr (prev_dc_inv_8 (cons 1 $0))))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (fold (range prev_dc_inv_1) empty (lam (lam (cons (index $1 $2) $0)))))",
        "(lam (prev_dc_inv_10 $0 (lam (is-square $0))))",
        "(lam (prev_dc_inv_10 $0 (lam (is-square (* prev_dc_inv_1 $0)))))",
        "(lam (prev_dc_inv_10 $0 (lam (is-prime $0))))",
        "(lam (prev_dc_inv_10 $0 (lam (gt? $0 0))))",
        "(lam (prev_dc_inv_10 $0 (lam (gt? $0 (length empty)))))",
        "(lam (prev_dc_inv_10 $0 (lam (gt? 1 $0))))",
        "(lam (prev_dc_inv_10 $0 (lam (eq? $0 0))))",
        "(lam (prev_dc_inv_10 $0 (lam (gt? $0 prev_dc_inv_0))))",
        "(lam (prev_dc_inv_10 (map (lam $0) $0) (lam (gt? $0 prev_dc_inv_0))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) 1 $0))",
        "(lambda (map (lambda (+ 1 $0)) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (index 1 $0)))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (car (cdr $0))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (car (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (index 1 (cdr $0))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (index #(+ 1 (+ 1 1)) $0)))",
        "(lambda (fold $0 (cdr (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))) (lambda (lambda (cons $1 $0)))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 0))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (length empty)))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ 1 #(+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (fold $0 #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda #(+ 1 #(+ 1 (+ 1 1))))))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))",
        "(lambda (fold $0 (map (lambda #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)) (range 1)) (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda (gt? (+ #(+ 1 #(+ 1 (+ 1 1))) $0) #(+ 1 (+ 1 1)))) $0))",
        "(lambda (map (lambda (gt? (+ $0 #(+ 1 #(+ 1 (+ 1 1)))) #(+ 1 (+ 1 1)))) $0))",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) 0 gt?)",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) (length empty) gt?)",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) #(+ 1 (+ 1 1)) gt?)",
        "(lambda (fold $0 empty (lambda (lambda (cons (gt? $1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (gt? 1 (mod $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (eq? #(+ 1 (+ 1 1)) $0)) $0))",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) #(+ 1 (+ 1 1)) eq?)",
        "(lambda (map (lambda (eq? #(+ 1 #(+ 1 (+ 1 1))) $0)) $0))",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) #(+ 1 #(+ 1 (+ 1 1))) eq?)",
        "(lambda (map (lambda (- 1 $0)) $0))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 (- 1 #(+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 (+ 1 #(+ 1 #(+ 1 (+ 1 1))))))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0)))",
        "(lambda (map (lambda (mod (+ #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) (map (lambda $0) $0) #(+ 1 (+ 1 1))))",
        "(lambda (map (lambda (- 1 $0)) $0))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 (- #(+ 1 (+ 1 1)) 1)))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 #(+ 1 (+ 1 1))) #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 #(+ 1 #(+ 1 (+ 1 1)))) #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 #(+ 1 #(+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0) #(+ 1 #(+ 1 (+ 1 1)))))",
        "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? 1 $0)))))",
        "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? $0 0)))))",
        "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ 1 (+ 1 1)) $0)))))",
        "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? $0 #(+ 1 (+ 1 1)))))))",
        "(lambda (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) $0))",
        "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? $0 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1))))))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (#(lambda (cdr (cdr $0))) (map (lambda $0) (cdr $0))))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (fold (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)) $0 (lambda (lambda (cdr $0)))))",
        "(lambda (empty? $0))",
        "(lambda (empty? (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 (+ 1 1)) $0)))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (empty? (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) (map (lambda $1) $1))))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (empty? (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) (cons $0 empty))))))",
        "(lambda (gt? (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? $0 (car $1))))) 1))",
        "(lambda (gt? (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? (car $1) $0)))) 1))",
        "(lambda (gt? (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) (#(lambda (map (lambda (+ $0 $1)))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)) 0))",
        "(lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) (#(lambda (map (lambda (+ $0 $1)))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)))))",
        "(lambda (is-square (fold $0 #(+ 1 (+ 1 1)) (lambda (lambda (mod $0 $1))))))",
        "(lambda (gt? (mod (car (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ 1 #(+ 1 (+ 1 1))))) #(+ 1 #(+ 1 (+ 1 1)))) 0))",
        "(lambda (gt? (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) $0) 1))",
        "(lambda (gt? (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) $0) 0))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (car (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (index 1 (cdr $0)))",
        "(lambda (index #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (index #(+ 1 (+ 1 1)) (cdr $0)))",
        "(lambda (empty? (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0)))",
        "(lambda (empty? (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0))))",
        "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $0 $1))))))",
        "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $1 $0))))))",
        "(lambda (fold $0 (is-prime #(+ 1 (+ 1 1))) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (fold $0 (is-square 1) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (empty? (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $0 $1))))))))",
        "(lambda (fold $0 #(+ 1 (+ 1 1)) (lambda (lambda (if (gt? $0 $1) $0 $1)))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) (range (* #(+ 1 #(+ 1 (+ 1 1))) #(+ 1 #(+ 1 (+ 1 1))))) (lambda (is-prime (- #(+ 1 #(+ 1 (+ 1 1))) (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $0 $1))))))))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) (range (* #(+ 1 #(+ 1 (+ 1 1))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1))) (lambda (is-prime (- #(+ 1 #(+ 1 (+ 1 1))) (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $0 $1))))))))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ 1 (+ 1 1)) (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $1 $0)))))))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $1 $0)))) #(+ 1 (+ 1 1)))))))",
        "(lambda (index (length (cdr $0)) $0))",
        "(lambda (index (- (length $0) 1) $0))",
        "(lambda (length $0))",
        "(lambda (length (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0)))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 1))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) 1 $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (- #(+ 1 (+ 1 1)) 1) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (- 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0))",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) #(+ 1 (+ 1 1)) mod)",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) #(+ 1 #(+ 1 (+ 1 1))) mod)",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) mod)",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 1))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) 1 $0))",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(lambda (map (lambda $0) (map (lambda (+ $0 $0)) $0)))",
        "(lambda (map (lambda (* #(+ 1 (+ 1 1)) $0)) $0))",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) #(+ 1 (+ 1 1)) *)",
        "(lambda (map (lambda (* #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)) $0))",
        "(#(lambda (lambda (lambda (map (lambda ($2 $0 $3)) $0)))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) *)",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0)))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 #(+ 1 (+ 1 1))) $0))))))",
        "(lambda (#(lambda (cons (car $0))) $0 $0))",
        "(lambda (#(lambda (cons (car $0))) $0 (map (lambda $0) $0)))",
        "(lambda (#(lambda (cons (car $0))) (cdr $0) $0))",
        "(lambda (cons (index 1 $0) $0))",
        "(lambda (cons (index #(+ 1 (+ 1 1)) $0) $0))",
        "(lambda (#(lambda (cons (car $0))) (#(lambda (cdr (cdr $0))) (cdr $0)) $0))",
        "(lambda (cons 0 $0))",
        "(lambda (cons (length empty) $0))",
        "(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))",
        "(lambda (fold $0 1 (lambda (lambda (* $1 $0)))))",
        "(lambda (#(lambda (cons (car $0))) $0 (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (#(lambda (cons (car $0))) $0 (map (lambda $0) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (#(lambda (cons (car $0))) $0 (cons (index 1 $0) (#(lambda (cons (car $0))) (#(lambda (cdr (cdr $0))) $0) (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (mod (+ $0 $0) #(+ 1 #(+ 1 (+ 1 1))))))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? (mod $0 #(+ 1 (+ 1 1))) 0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ (mod $0 #(+ 1 (+ 1 1))) 1)))))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda $0) (fold $0 $0 (lambda (lambda (cons $1 $0))))))",
        "(lambda (map (lambda (car $1)) $0))",
        "(lambda (map (lambda (index 0 $1)) $0))",
        "(lambda (map (lambda (index #(+ 1 (+ 1 1)) $1)) $0))",
        "(lambda (map (lambda (index #(+ 1 (+ 1 1)) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $1))) $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (fold $0 (cdr (range 1)) (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (#(lambda (cons (car $0))) $0 empty))",
        "(lambda (#(lambda (cons (car $0))) $0 (range 0)))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cons (car $0))) $0 $0))))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cons #(+ 1 (+ 1 1)) $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))",
        "(lambda (map (lambda (index $0 (cdr $1))) (range #(+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) $0))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cdr $0)) (index #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cdr $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cdr $0)))))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) $0)))",
        "(lambda (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) (cdr $0)))",
        "(lambda (map (lambda (index $0 $1)) (#(lambda (cdr (cdr $0))) (range (+ #(+ 1 #(+ 1 (+ 1 1))) #(+ 1 (+ 1 1)))))))",
        "(lambda (#(lambda (cdr (cdr $0))) (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) $0)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) (#(lambda (cdr (cdr $0))) (map (lambda $0) $0))))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) $0))))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (cdr $0))",
        "(lambda (cdr (map (lambda $0) $0)))",
        "(lambda (#(lambda (cons (car $0))) $0 empty))",
        "(lambda (#(lambda (cons (car $0))) $0 (range 0)))",
        "(lambda (#(lambda (cons (car $0))) $0 (#(lambda (cons (car $0))) (cdr $0) empty)))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cons (car $0))) $0 (#(lambda (cons (car $0))) $0 $0)))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cons #(+ 1 (+ 1 1)) $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cons 1 $0))))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))",
        "(lambda (fold (range #(+ 1 #(+ 1 (+ 1 1)))) empty (lambda (lambda (cons (index $1 $2) $0)))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-square $0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-square (* #(+ 1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime $0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? $0 0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? $0 (length empty)))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? 1 $0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? $0 0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? $0 #(+ 1 (+ 1 1))))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) (map (lambda $0) $0) (lambda (gt? $0 #(+ 1 (+ 1 1))))))"
      ],
      "utility": 921,
      "expected_cost": 42141,
      "final_cost": 42141,
      "multiplier": 1.0291165373389335,
      "multiplier_wrt_orig": 1.0291165373389335,
      "num_uses": 11,
      "uses": [
        {
          "fn_15 prev_dc_inv_0 *": "(lam (map (lam (* $0 prev_dc_inv_0)) $0))"
        },
        {
          "fn_15 prev_dc_inv_4 *": "(lam (map (lam (* $0 prev_dc_inv_4)) $0))"
        },
        {
          "fn_15 #0 +": "(lam (map (lam (+ $0 $0)) $0))"
        },
        {
          "fn_15 prev_dc_inv_0 eq?": "(lam (map (lam (eq? $0 prev_dc_inv_0)) $0))"
        },
        {
          "fn_15 prev_dc_inv_1 eq?": "(lam (map (lam (eq? $0 prev_dc_inv_1)) $0))"
        },
        {
          "fn_15 (length empty) gt?": "(lam (map (lam (gt? $0 (length empty))) $0))"
        },
        {
          "fn_15 0 gt?": "(lam (map (lam (gt? $0 0)) $0))"
        },
        {
          "fn_15 prev_dc_inv_0 gt?": "(lam (map (lam (gt? $0 prev_dc_inv_0)) $0))"
        },
        {
          "fn_15 prev_dc_inv_0 mod": "(lam (map (lam (mod $0 prev_dc_inv_0)) $0))"
        },
        {
          "fn_15 prev_dc_inv_1 mod": "(lam (map (lam (mod $0 prev_dc_inv_1)) $0))"
        },
        {
          "fn_15 prev_dc_inv_4 mod": "(lam (map (lam (mod $0 prev_dc_inv_4)) $0))"
        }
      ]
    },
    {
      "body": "(lam (prev_dc_inv_12 $0 #0))",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 $1)))",
      "arity": 1,
      "name": "fn_16",
      "rewritten": [
        "(lam (prev_dc_inv_5 1 $0))",
        "(lam (map (lam (+ 1 $0)) $0))",
        "(lam (prev_dc_inv_5 prev_dc_inv_0 $0))",
        "(lam (map (lam (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lam (prev_dc_inv_5 prev_dc_inv_1 $0))",
        "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
        "(lam (prev_dc_inv_9 $0 (index 1 $0)))",
        "(lam (prev_dc_inv_9 $0 (car (cdr $0))))",
        "(lam (prev_dc_inv_9 $0 (car (prev_dc_inv_2 $0))))",
        "(lam (prev_dc_inv_9 $0 (index 1 (cdr $0))))",
        "(lam (prev_dc_inv_9 $0 (index prev_dc_inv_0 $0)))",
        "(lam (fold $0 (cdr (prev_dc_inv_2 (prev_dc_inv_8 $0))) (lam (lam (cons $1 $0)))))",
        "(lam (prev_dc_inv_9 $0 0))",
        "(lam (prev_dc_inv_9 $0 (length empty)))",
        "(lam (prev_dc_inv_9 $0 prev_dc_inv_0))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0) prev_dc_inv_0))",
        "(lam (prev_dc_inv_9 $0 prev_dc_inv_1))",
        "(lam (prev_dc_inv_9 $0 (fold $0 prev_dc_inv_1 (lam (lam prev_dc_inv_1)))))",
        "(lam (prev_dc_inv_9 $0 prev_dc_inv_4))",
        "(lam (fold $0 (map (lam prev_dc_inv_4) (range 1)) (lam (lam (cons $1 $0)))))",
        "(lam (map (lam (gt? (+ prev_dc_inv_1 $0) prev_dc_inv_0)) $0))",
        "(lam (map (lam (gt? (+ $0 prev_dc_inv_1) prev_dc_inv_0)) $0))",
        "(fn_15 0 gt?)",
        "(fn_15 (length empty) gt?)",
        "(fn_15 prev_dc_inv_0 gt?)",
        "(lam (fold $0 empty (lam (lam (cons (gt? $1 prev_dc_inv_0) $0)))))",
        "(lam (prev_dc_inv_7 prev_dc_inv_0 $0))",
        "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_0))) $0))",
        "(lam (prev_dc_inv_7 prev_dc_inv_1 $0))",
        "(lam (map (lam (eq? prev_dc_inv_0 $0)) $0))",
        "(fn_15 prev_dc_inv_0 eq?)",
        "(lam (map (lam (eq? prev_dc_inv_1 $0)) $0))",
        "(fn_15 prev_dc_inv_1 eq?)",
        "(lam (map (lam (- 1 $0)) $0))",
        "(fn_16 (- 1 prev_dc_inv_0))",
        "(fn_16 prev_dc_inv_0)",
        "(lam (prev_dc_inv_6 prev_dc_inv_0 (prev_dc_inv_5 prev_dc_inv_1 $0)))",
        "(fn_16 prev_dc_inv_4)",
        "(fn_16 (+ 1 prev_dc_inv_1))",
        "(lam (prev_dc_inv_6 prev_dc_inv_1 (prev_dc_inv_5 prev_dc_inv_0 $0)))",
        "(lam (map (lam (mod (+ prev_dc_inv_0 $0) prev_dc_inv_1)) $0))",
        "(fn_16 prev_dc_inv_0)",
        "(lam (prev_dc_inv_12 (map (lam $0) $0) prev_dc_inv_0))",
        "(lam (map (lam (- 1 $0)) $0))",
        "(fn_16 (- prev_dc_inv_0 1))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_12 $0 prev_dc_inv_0) prev_dc_inv_0))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_12 $0 prev_dc_inv_1) prev_dc_inv_0))",
        "(fn_16 prev_dc_inv_1)",
        "(lam (prev_dc_inv_12 (prev_dc_inv_5 prev_dc_inv_1 $0) prev_dc_inv_1))",
        "(lam (length (prev_dc_inv_10 $0 (lam (gt? 1 $0)))))",
        "(lam (length (prev_dc_inv_10 $0 (lam (eq? $0 0)))))",
        "(lam (length (prev_dc_inv_10 $0 (lam (eq? prev_dc_inv_0 $0)))))",
        "(lam (length (prev_dc_inv_10 $0 (lam (eq? $0 prev_dc_inv_0)))))",
        "(lam (prev_dc_inv_13 $0))",
        "(lam (length (prev_dc_inv_10 $0 (lam (eq? $0 prev_dc_inv_4)))))",
        "(lam (cdr (prev_dc_inv_2 $0)))",
        "(lam (prev_dc_inv_2 (map (lam $0) (cdr $0))))",
        "(lam (cdr (prev_dc_inv_2 (prev_dc_inv_2 $0))))",
        "(lam (fold (range prev_dc_inv_4) $0 (lam (lam (cdr $0)))))",
        "(lam (empty? $0))",
        "(lam (empty? (prev_dc_inv_7 prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_10 $0 (lam (empty? (prev_dc_inv_14 (map (lam $1) $1))))))",
        "(lam (prev_dc_inv_10 $0 (lam (empty? (prev_dc_inv_14 (cons $0 empty))))))",
        "(lam (gt? (length (prev_dc_inv_10 $0 (lam (eq? $0 (car $1))))) 1))",
        "(lam (gt? (length (prev_dc_inv_10 $0 (lam (eq? (car $1) $0)))) 1))",
        "(lam (gt? (prev_dc_inv_13 (prev_dc_inv_5 prev_dc_inv_4 $0)) 0))",
        "(lam (is-prime (+ prev_dc_inv_1 (prev_dc_inv_13 (prev_dc_inv_5 prev_dc_inv_4 $0)))))",
        "(lam (is-square (fold $0 prev_dc_inv_0 (lam (lam (mod $0 $1))))))",
        "(lam (gt? (mod (car (prev_dc_inv_9 $0 prev_dc_inv_1)) prev_dc_inv_1) 0))",
        "(lam (gt? (prev_dc_inv_13 $0) 1))",
        "(lam (gt? (prev_dc_inv_13 $0) 0))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (car (prev_dc_inv_2 $0)))",
        "(lam (index 1 (cdr $0)))",
        "(lam (index prev_dc_inv_1 $0))",
        "(lam (index prev_dc_inv_0 (cdr $0)))",
        "(lam (empty? (prev_dc_inv_14 $0)))",
        "(lam (empty? (prev_dc_inv_14 (prev_dc_inv_14 $0))))",
        "(lam (is-square (fold (prev_dc_inv_6 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $0 $1))))))",
        "(lam (is-square (fold (prev_dc_inv_6 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $1 $0))))))",
        "(lam (fold $0 (is-prime prev_dc_inv_0) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (fold $0 (is-square 1) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (car (prev_dc_inv_10 $0 (lam (empty? (prev_dc_inv_10 $1 (lam (gt? $0 $1))))))))",
        "(lam (fold $0 prev_dc_inv_0 (lam (lam (if (gt? $0 $1) $0 $1)))))",
        "(lam (car (prev_dc_inv_10 (range (* prev_dc_inv_1 prev_dc_inv_1)) (lam (is-prime (- prev_dc_inv_1 (length (prev_dc_inv_10 $1 (lam (gt? $0 $1))))))))))",
        "(lam (car (prev_dc_inv_10 (range (* prev_dc_inv_1 prev_dc_inv_4)) (lam (is-prime (- prev_dc_inv_1 (length (prev_dc_inv_10 $1 (lam (gt? $0 $1))))))))))",
        "(lam (car (prev_dc_inv_10 $0 (lam (eq? prev_dc_inv_0 (length (prev_dc_inv_10 $1 (lam (gt? $1 $0)))))))))",
        "(lam (car (prev_dc_inv_10 $0 (lam (eq? (length (prev_dc_inv_10 $1 (lam (gt? $1 $0)))) prev_dc_inv_0)))))",
        "(lam (index (length (cdr $0)) $0))",
        "(lam (index (- (length $0) 1) $0))",
        "(lam (length $0))",
        "(lam (length (prev_dc_inv_5 prev_dc_inv_0 $0)))",
        "(fn_16 1)",
        "(lam (prev_dc_inv_6 1 $0))",
        "(lam (prev_dc_inv_6 (- prev_dc_inv_0 1) $0))",
        "(lam (prev_dc_inv_6 (- 1 prev_dc_inv_0) $0))",
        "(lam (prev_dc_inv_6 prev_dc_inv_0 $0))",
        "(fn_15 prev_dc_inv_0 mod)",
        "(lam (prev_dc_inv_6 prev_dc_inv_1 $0))",
        "(fn_15 prev_dc_inv_1 mod)",
        "(lam (prev_dc_inv_6 prev_dc_inv_4 $0))",
        "(fn_15 prev_dc_inv_4 mod)",
        "(fn_16 1)",
        "(lam (prev_dc_inv_6 1 $0))",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(lam (map (lam $0) (map (lam (+ $0 $0)) $0)))",
        "(lam (map (lam (* prev_dc_inv_0 $0)) $0))",
        "(fn_15 prev_dc_inv_0 *)",
        "(lam (map (lam (* prev_dc_inv_4 $0)) $0))",
        "(fn_15 prev_dc_inv_4 *)",
        "(lam (prev_dc_inv_14 $0))",
        "(lam (prev_dc_inv_14 (prev_dc_inv_14 $0)))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr (prev_dc_inv_7 prev_dc_inv_1 $0))))))",
        "(lam (prev_dc_inv_3 $0 $0))",
        "(lam (prev_dc_inv_3 $0 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_3 (cdr $0) $0))",
        "(lam (cons (index 1 $0) $0))",
        "(lam (cons (index prev_dc_inv_0 $0) $0))",
        "(lam (prev_dc_inv_3 (prev_dc_inv_2 (cdr $0)) $0))",
        "(lam (cons 0 $0))",
        "(lam (cons (length empty) $0))",
        "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
        "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
        "(lam (prev_dc_inv_3 $0 (prev_dc_inv_2 $0)))",
        "(lam (prev_dc_inv_3 $0 (map (lam $0) (prev_dc_inv_2 $0))))",
        "(lam (prev_dc_inv_3 $0 (cons (index 1 $0) (prev_dc_inv_3 (prev_dc_inv_2 $0) (prev_dc_inv_2 (prev_dc_inv_2 $0))))))",
        "(lam (prev_dc_inv_14 $0))",
        "(lam (prev_dc_inv_10 $0 (lam (is-prime (mod (+ $0 $0) prev_dc_inv_1)))))",
        "(lam (prev_dc_inv_10 $0 (lam (gt? (mod $0 prev_dc_inv_0) 0))))",
        "(lam (prev_dc_inv_10 $0 (lam (is-prime (+ (mod $0 prev_dc_inv_0) 1)))))",
        "(lam (fold $0 $0 (lam (lam (cons $1 $0)))))",
        "(lam (map (lam $0) (fold $0 $0 (lam (lam (cons $1 $0))))))",
        "(lam (map (lam (car $1)) $0))",
        "(lam (map (lam (index 0 $1)) $0))",
        "(lam (map (lam (index prev_dc_inv_0 $1)) $0))",
        "(lam (map (lam (index prev_dc_inv_0 (prev_dc_inv_8 $1))) $0))",
        "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (fold $0 (cdr (range 1)) (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (prev_dc_inv_3 $0 empty))",
        "(lam (prev_dc_inv_3 $0 (range 0)))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_8 $0)))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_8 (prev_dc_inv_3 $0 $0))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_8 (cons prev_dc_inv_0 $0))))",
        "(lam (cdr (prev_dc_inv_8 $0)))",
        "(lam (map (lam (index $0 (cdr $1))) (range prev_dc_inv_0)))",
        "(lam (prev_dc_inv_11 $0))",
        "(lam (prev_dc_inv_9 (prev_dc_inv_8 (cdr $0)) (index prev_dc_inv_4 $0)))",
        "(lam (cdr (prev_dc_inv_8 (cdr $0))))",
        "(lam (cdr (prev_dc_inv_8 (prev_dc_inv_8 (cdr $0)))))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_2 $0)))",
        "(lam (cdr (prev_dc_inv_11 $0)))",
        "(lam (prev_dc_inv_11 (cdr $0)))",
        "(lam (map (lam (index $0 $1)) (prev_dc_inv_2 (range (+ prev_dc_inv_1 prev_dc_inv_0)))))",
        "(lam (prev_dc_inv_2 (cdr (prev_dc_inv_8 $0))))",
        "(lam (cdr (prev_dc_inv_2 (prev_dc_inv_8 $0))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_11 $0)))",
        "(lam (cdr (prev_dc_inv_8 (prev_dc_inv_2 $0))))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_2 $0)))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_2 (map (lam $0) $0))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_8 (prev_dc_inv_2 $0))))",
        "(lam (cdr (prev_dc_inv_2 (prev_dc_inv_11 $0))))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_2 (prev_dc_inv_2 $0))))",
        "(lam (cdr (prev_dc_inv_11 (prev_dc_inv_2 $0))))",
        "(lam (cdr $0))",
        "(lam (cdr (map (lam $0) $0)))",
        "(lam (prev_dc_inv_3 $0 empty))",
        "(lam (prev_dc_inv_3 $0 (range 0)))",
        "(lam (prev_dc_inv_3 $0 (prev_dc_inv_3 (cdr $0) empty)))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_8 (prev_dc_inv_3 $0 (prev_dc_inv_3 $0 $0)))))",
        "(lam (cdr (prev_dc_inv_8 (cons prev_dc_inv_0 $0))))",
        "(lam (cdr (prev_dc_inv_8 (cons 1 $0))))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (fold (range prev_dc_inv_1) empty (lam (lam (cons (index $1 $2) $0)))))",
        "(lam (prev_dc_inv_10 $0 (lam (is-square $0))))",
        "(lam (prev_dc_inv_10 $0 (lam (is-square (* prev_dc_inv_1 $0)))))",
        "(lam (prev_dc_inv_10 $0 (lam (is-prime $0))))",
        "(lam (prev_dc_inv_10 $0 (lam (gt? $0 0))))",
        "(lam (prev_dc_inv_10 $0 (lam (gt? $0 (length empty)))))",
        "(lam (prev_dc_inv_10 $0 (lam (gt? 1 $0))))",
        "(lam (prev_dc_inv_10 $0 (lam (eq? $0 0))))",
        "(lam (prev_dc_inv_10 $0 (lam (gt? $0 prev_dc_inv_0))))",
        "(lam (prev_dc_inv_10 (map (lam $0) $0) (lam (gt? $0 prev_dc_inv_0))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) 1 $0))",
        "(lambda (map (lambda (+ 1 $0)) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (index 1 $0)))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (car (cdr $0))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (car (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (index 1 (cdr $0))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (index #(+ 1 (+ 1 1)) $0)))",
        "(lambda (fold $0 (cdr (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))) (lambda (lambda (cons $1 $0)))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 0))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (length empty)))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ 1 #(+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (fold $0 #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda #(+ 1 #(+ 1 (+ 1 1))))))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))",
        "(lambda (fold $0 (map (lambda #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)) (range 1)) (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda (gt? (+ #(+ 1 #(+ 1 (+ 1 1))) $0) #(+ 1 (+ 1 1)))) $0))",
        "(lambda (map (lambda (gt? (+ $0 #(+ 1 #(+ 1 (+ 1 1)))) #(+ 1 (+ 1 1)))) $0))",
        "(fn_15 0 gt?)",
        "(fn_15 (length empty) gt?)",
        "(fn_15 #(+ 1 (+ 1 1)) gt?)",
        "(lambda (fold $0 empty (lambda (lambda (cons (gt? $1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (gt? 1 (mod $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (eq? #(+ 1 (+ 1 1)) $0)) $0))",
        "(fn_15 #(+ 1 (+ 1 1)) eq?)",
        "(lambda (map (lambda (eq? #(+ 1 #(+ 1 (+ 1 1))) $0)) $0))",
        "(fn_15 #(+ 1 #(+ 1 (+ 1 1))) eq?)",
        "(lambda (map (lambda (- 1 $0)) $0))",
        "(#(lambda (lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 $1))) (- 1 #(+ 1 (+ 1 1))))",
        "(#(lambda (lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 $1))) #(+ 1 (+ 1 1)))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
        "(#(lambda (lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 $1))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1))",
        "(#(lambda (lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 $1))) (+ 1 #(+ 1 #(+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0)))",
        "(lambda (map (lambda (mod (+ #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(#(lambda (lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 $1))) #(+ 1 (+ 1 1)))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) (map (lambda $0) $0) #(+ 1 (+ 1 1))))",
        "(lambda (map (lambda (- 1 $0)) $0))",
        "(#(lambda (lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 $1))) (- #(+ 1 (+ 1 1)) 1))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 #(+ 1 (+ 1 1))) #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 #(+ 1 #(+ 1 (+ 1 1)))) #(+ 1 (+ 1 1))))",
        "(#(lambda (lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 $1))) #(+ 1 #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0) #(+ 1 #(+ 1 (+ 1 1)))))",
        "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? 1 $0)))))",
        "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? $0 0)))))",
        "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ 1 (+ 1 1)) $0)))))",
        "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? $0 #(+ 1 (+ 1 1)))))))",
        "(lambda (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) $0))",
        "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? $0 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1))))))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (#(lambda (cdr (cdr $0))) (map (lambda $0) (cdr $0))))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (fold (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)) $0 (lambda (lambda (cdr $0)))))",
        "(lambda (empty? $0))",
        "(lambda (empty? (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 (+ 1 1)) $0)))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (empty? (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) (map (lambda $1) $1))))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (empty? (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) (cons $0 empty))))))",
        "(lambda (gt? (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? $0 (car $1))))) 1))",
        "(lambda (gt? (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? (car $1) $0)))) 1))",
        "(lambda (gt? (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) (#(lambda (map (lambda (+ $0 $1)))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)) 0))",
        "(lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) (#(lambda (map (lambda (+ $0 $1)))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)))))",
        "(lambda (is-square (fold $0 #(+ 1 (+ 1 1)) (lambda (lambda (mod $0 $1))))))",
        "(lambda (gt? (mod (car (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ 1 #(+ 1 (+ 1 1))))) #(+ 1 #(+ 1 (+ 1 1)))) 0))",
        "(lambda (gt? (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) $0) 1))",
        "(lambda (gt? (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) $0) 0))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (car (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (index 1 (cdr $0)))",
        "(lambda (index #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (index #(+ 1 (+ 1 1)) (cdr $0)))",
        "(lambda (empty? (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0)))",
        "(lambda (empty? (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0))))",
        "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $0 $1))))))",
        "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $1 $0))))))",
        "(lambda (fold $0 (is-prime #(+ 1 (+ 1 1))) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (fold $0 (is-square 1) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (empty? (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $0 $1))))))))",
        "(lambda (fold $0 #(+ 1 (+ 1 1)) (lambda (lambda (if (gt? $0 $1) $0 $1)))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) (range (* #(+ 1 #(+ 1 (+ 1 1))) #(+ 1 #(+ 1 (+ 1 1))))) (lambda (is-prime (- #(+ 1 #(+ 1 (+ 1 1))) (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $0 $1))))))))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) (range (* #(+ 1 #(+ 1 (+ 1 1))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1))) (lambda (is-prime (- #(+ 1 #(+ 1 (+ 1 1))) (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $0 $1))))))))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ 1 (+ 1 1)) (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $1 $0)))))))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $1 $0)))) #(+ 1 (+ 1 1)))))))",
        "(lambda (index (length (cdr $0)) $0))",
        "(lambda (index (- (length $0) 1) $0))",
        "(lambda (length $0))",
        "(lambda (length (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0)))",
        "(#(lambda (lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 $1))) 1)",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) 1 $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (- #(+ 1 (+ 1 1)) 1) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (- 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0))",
        "(fn_15 #(+ 1 (+ 1 1)) mod)",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(fn_15 #(+ 1 #(+ 1 (+ 1 1))) mod)",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))",
        "(fn_15 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) mod)",
        "(#(lambda (lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 $1))) 1)",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) 1 $0))",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(lambda (map (lambda $0) (map (lambda (+ $0 $0)) $0)))",
        "(lambda (map (lambda (* #(+ 1 (+ 1 1)) $0)) $0))",
        "(fn_15 #(+ 1 (+ 1 1)) *)",
        "(lambda (map (lambda (* #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)) $0))",
        "(fn_15 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) *)",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0)))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 #(+ 1 (+ 1 1))) $0))))))",
        "(lambda (#(lambda (cons (car $0))) $0 $0))",
        "(lambda (#(lambda (cons (car $0))) $0 (map (lambda $0) $0)))",
        "(lambda (#(lambda (cons (car $0))) (cdr $0) $0))",
        "(lambda (cons (index 1 $0) $0))",
        "(lambda (cons (index #(+ 1 (+ 1 1)) $0) $0))",
        "(lambda (#(lambda (cons (car $0))) (#(lambda (cdr (cdr $0))) (cdr $0)) $0))",
        "(lambda (cons 0 $0))",
        "(lambda (cons (length empty) $0))",
        "(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))",
        "(lambda (fold $0 1 (lambda (lambda (* $1 $0)))))",
        "(lambda (#(lambda (cons (car $0))) $0 (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (#(lambda (cons (car $0))) $0 (map (lambda $0) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (#(lambda (cons (car $0))) $0 (cons (index 1 $0) (#(lambda (cons (car $0))) (#(lambda (cdr (cdr $0))) $0) (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (mod (+ $0 $0) #(+ 1 #(+ 1 (+ 1 1))))))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? (mod $0 #(+ 1 (+ 1 1))) 0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ (mod $0 #(+ 1 (+ 1 1))) 1)))))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda $0) (fold $0 $0 (lambda (lambda (cons $1 $0))))))",
        "(lambda (map (lambda (car $1)) $0))",
        "(lambda (map (lambda (index 0 $1)) $0))",
        "(lambda (map (lambda (index #(+ 1 (+ 1 1)) $1)) $0))",
        "(lambda (map (lambda (index #(+ 1 (+ 1 1)) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $1))) $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (fold $0 (cdr (range 1)) (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (#(lambda (cons (car $0))) $0 empty))",
        "(lambda (#(lambda (cons (car $0))) $0 (range 0)))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cons (car $0))) $0 $0))))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cons #(+ 1 (+ 1 1)) $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))",
        "(lambda (map (lambda (index $0 (cdr $1))) (range #(+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) $0))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cdr $0)) (index #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cdr $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cdr $0)))))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) $0)))",
        "(lambda (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) (cdr $0)))",
        "(lambda (map (lambda (index $0 $1)) (#(lambda (cdr (cdr $0))) (range (+ #(+ 1 #(+ 1 (+ 1 1))) #(+ 1 (+ 1 1)))))))",
        "(lambda (#(lambda (cdr (cdr $0))) (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) $0)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) (#(lambda (cdr (cdr $0))) (map (lambda $0) $0))))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) $0))))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (cdr $0))",
        "(lambda (cdr (map (lambda $0) $0)))",
        "(lambda (#(lambda (cons (car $0))) $0 empty))",
        "(lambda (#(lambda (cons (car $0))) $0 (range 0)))",
        "(lambda (#(lambda (cons (car $0))) $0 (#(lambda (cons (car $0))) (cdr $0) empty)))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cons (car $0))) $0 (#(lambda (cons (car $0))) $0 $0)))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cons #(+ 1 (+ 1 1)) $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cons 1 $0))))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))",
        "(lambda (fold (range #(+ 1 #(+ 1 (+ 1 1)))) empty (lambda (lambda (cons (index $1 $2) $0)))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-square $0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-square (* #(+ 1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime $0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? $0 0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? $0 (length empty)))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? 1 $0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? $0 0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? $0 #(+ 1 (+ 1 1))))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) (map (lambda $0) $0) (lambda (gt? $0 #(+ 1 (+ 1 1))))))"
      ],
      "utility": 613,
      "expected_cost": 41325,
      "final_cost": 41325,
      "multiplier": 1.0197459165154266,
      "multiplier_wrt_orig": 1.049437386569873,
      "num_uses": 9,
      "uses": [
        {
          "fn_16 (+ 1 prev_dc_inv_1)": "(lam (prev_dc_inv_12 $0 (+ 1 prev_dc_inv_1)))"
        },
        {
          "fn_16 (- 1 prev_dc_inv_0)": "(lam (prev_dc_inv_12 $0 (- 1 prev_dc_inv_0)))"
        },
        {
          "fn_16 (- prev_dc_inv_0 1)": "(lam (prev_dc_inv_12 $0 (- prev_dc_inv_0 1)))"
        },
        {
          "fn_16 1": "(lam (prev_dc_inv_12 $0 1))"
        },
        {
          "fn_16 prev_dc_inv_0": "(lam (prev_dc_inv_12 $0 prev_dc_inv_0))"
        },
        {
          "fn_16 prev_dc_inv_1": "(lam (prev_dc_inv_12 $0 prev_dc_inv_1))"
        },
        {
          "fn_16 prev_dc_inv_4": "(lam (prev_dc_inv_12 $0 prev_dc_inv_4))"
        }
      ]
    },
    {
      "body": "(prev_dc_inv_10 #2 (lam (#1 $0 #0)))",
      "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda ($2 $0 $3))))))",
      "arity": 3,
      "name": "fn_17",
      "rewritten": [
        "(lam (prev_dc_inv_5 1 $0))",
        "(lam (map (lam (+ 1 $0)) $0))",
        "(lam (prev_dc_inv_5 prev_dc_inv_0 $0))",
        "(lam (map (lam (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lam (prev_dc_inv_5 prev_dc_inv_1 $0))",
        "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
        "(lam (prev_dc_inv_9 $0 (index 1 $0)))",
        "(lam (prev_dc_inv_9 $0 (car (cdr $0))))",
        "(lam (prev_dc_inv_9 $0 (car (prev_dc_inv_2 $0))))",
        "(lam (prev_dc_inv_9 $0 (index 1 (cdr $0))))",
        "(lam (prev_dc_inv_9 $0 (index prev_dc_inv_0 $0)))",
        "(lam (fold $0 (cdr (prev_dc_inv_2 (prev_dc_inv_8 $0))) (lam (lam (cons $1 $0)))))",
        "(lam (prev_dc_inv_9 $0 0))",
        "(lam (prev_dc_inv_9 $0 (length empty)))",
        "(lam (prev_dc_inv_9 $0 prev_dc_inv_0))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0) prev_dc_inv_0))",
        "(lam (prev_dc_inv_9 $0 prev_dc_inv_1))",
        "(lam (prev_dc_inv_9 $0 (fold $0 prev_dc_inv_1 (lam (lam prev_dc_inv_1)))))",
        "(lam (prev_dc_inv_9 $0 prev_dc_inv_4))",
        "(lam (fold $0 (map (lam prev_dc_inv_4) (range 1)) (lam (lam (cons $1 $0)))))",
        "(lam (map (lam (gt? (+ prev_dc_inv_1 $0) prev_dc_inv_0)) $0))",
        "(lam (map (lam (gt? (+ $0 prev_dc_inv_1) prev_dc_inv_0)) $0))",
        "(fn_15 0 gt?)",
        "(fn_15 (length empty) gt?)",
        "(fn_15 prev_dc_inv_0 gt?)",
        "(lam (fold $0 empty (lam (lam (cons (gt? $1 prev_dc_inv_0) $0)))))",
        "(lam (prev_dc_inv_7 prev_dc_inv_0 $0))",
        "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_0))) $0))",
        "(lam (prev_dc_inv_7 prev_dc_inv_1 $0))",
        "(lam (map (lam (eq? prev_dc_inv_0 $0)) $0))",
        "(fn_15 prev_dc_inv_0 eq?)",
        "(lam (map (lam (eq? prev_dc_inv_1 $0)) $0))",
        "(fn_15 prev_dc_inv_1 eq?)",
        "(lam (map (lam (- 1 $0)) $0))",
        "(fn_16 (- 1 prev_dc_inv_0))",
        "(fn_16 prev_dc_inv_0)",
        "(lam (prev_dc_inv_6 prev_dc_inv_0 (prev_dc_inv_5 prev_dc_inv_1 $0)))",
        "(fn_16 prev_dc_inv_4)",
        "(fn_16 (+ 1 prev_dc_inv_1))",
        "(lam (prev_dc_inv_6 prev_dc_inv_1 (prev_dc_inv_5 prev_dc_inv_0 $0)))",
        "(lam (map (lam (mod (+ prev_dc_inv_0 $0) prev_dc_inv_1)) $0))",
        "(fn_16 prev_dc_inv_0)",
        "(lam (prev_dc_inv_12 (map (lam $0) $0) prev_dc_inv_0))",
        "(lam (map (lam (- 1 $0)) $0))",
        "(fn_16 (- prev_dc_inv_0 1))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_12 $0 prev_dc_inv_0) prev_dc_inv_0))",
        "(lam (prev_dc_inv_12 (prev_dc_inv_12 $0 prev_dc_inv_1) prev_dc_inv_0))",
        "(fn_16 prev_dc_inv_1)",
        "(lam (prev_dc_inv_12 (prev_dc_inv_5 prev_dc_inv_1 $0) prev_dc_inv_1))",
        "(lam (length (prev_dc_inv_10 $0 (lam (gt? 1 $0)))))",
        "(lam (length (fn_17 0 eq? $0)))",
        "(lam (length (prev_dc_inv_10 $0 (lam (eq? prev_dc_inv_0 $0)))))",
        "(lam (length (fn_17 prev_dc_inv_0 eq? $0)))",
        "(lam (prev_dc_inv_13 $0))",
        "(lam (length (fn_17 prev_dc_inv_4 eq? $0)))",
        "(lam (cdr (prev_dc_inv_2 $0)))",
        "(lam (prev_dc_inv_2 (map (lam $0) (cdr $0))))",
        "(lam (cdr (prev_dc_inv_2 (prev_dc_inv_2 $0))))",
        "(lam (fold (range prev_dc_inv_4) $0 (lam (lam (cdr $0)))))",
        "(lam (empty? $0))",
        "(lam (empty? (prev_dc_inv_7 prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_10 $0 (lam (empty? (prev_dc_inv_14 (map (lam $1) $1))))))",
        "(lam (prev_dc_inv_10 $0 (lam (empty? (prev_dc_inv_14 (cons $0 empty))))))",
        "(lam (gt? (length (fn_17 (car $0) eq? $0)) 1))",
        "(lam (gt? (length (prev_dc_inv_10 $0 (lam (eq? (car $1) $0)))) 1))",
        "(lam (gt? (prev_dc_inv_13 (prev_dc_inv_5 prev_dc_inv_4 $0)) 0))",
        "(lam (is-prime (+ prev_dc_inv_1 (prev_dc_inv_13 (prev_dc_inv_5 prev_dc_inv_4 $0)))))",
        "(lam (is-square (fold $0 prev_dc_inv_0 (lam (lam (mod $0 $1))))))",
        "(lam (gt? (mod (car (prev_dc_inv_9 $0 prev_dc_inv_1)) prev_dc_inv_1) 0))",
        "(lam (gt? (prev_dc_inv_13 $0) 1))",
        "(lam (gt? (prev_dc_inv_13 $0) 0))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (car (prev_dc_inv_2 $0)))",
        "(lam (index 1 (cdr $0)))",
        "(lam (index prev_dc_inv_1 $0))",
        "(lam (index prev_dc_inv_0 (cdr $0)))",
        "(lam (empty? (prev_dc_inv_14 $0)))",
        "(lam (empty? (prev_dc_inv_14 (prev_dc_inv_14 $0))))",
        "(lam (is-square (fold (prev_dc_inv_6 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $0 $1))))))",
        "(lam (is-square (fold (prev_dc_inv_6 prev_dc_inv_0 $0) prev_dc_inv_1 (lam (lam (+ $1 $0))))))",
        "(lam (fold $0 (is-prime prev_dc_inv_0) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (fold $0 (is-square 1) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (car (prev_dc_inv_10 $0 (lam (empty? (fn_17 $0 gt? $1))))))",
        "(lam (fold $0 prev_dc_inv_0 (lam (lam (if (gt? $0 $1) $0 $1)))))",
        "(lam (car (prev_dc_inv_10 (range (* prev_dc_inv_1 prev_dc_inv_1)) (lam (is-prime (- prev_dc_inv_1 (length (fn_17 $0 gt? $1))))))))",
        "(lam (car (prev_dc_inv_10 (range (* prev_dc_inv_1 prev_dc_inv_4)) (lam (is-prime (- prev_dc_inv_1 (length (fn_17 $0 gt? $1))))))))",
        "(lam (car (prev_dc_inv_10 $0 (lam (eq? prev_dc_inv_0 (length (prev_dc_inv_10 $1 (lam (gt? $1 $0)))))))))",
        "(lam (car (prev_dc_inv_10 $0 (lam (eq? (length (prev_dc_inv_10 $1 (lam (gt? $1 $0)))) prev_dc_inv_0)))))",
        "(lam (index (length (cdr $0)) $0))",
        "(lam (index (- (length $0) 1) $0))",
        "(lam (length $0))",
        "(lam (length (prev_dc_inv_5 prev_dc_inv_0 $0)))",
        "(fn_16 1)",
        "(lam (prev_dc_inv_6 1 $0))",
        "(lam (prev_dc_inv_6 (- prev_dc_inv_0 1) $0))",
        "(lam (prev_dc_inv_6 (- 1 prev_dc_inv_0) $0))",
        "(lam (prev_dc_inv_6 prev_dc_inv_0 $0))",
        "(fn_15 prev_dc_inv_0 mod)",
        "(lam (prev_dc_inv_6 prev_dc_inv_1 $0))",
        "(fn_15 prev_dc_inv_1 mod)",
        "(lam (prev_dc_inv_6 prev_dc_inv_4 $0))",
        "(fn_15 prev_dc_inv_4 mod)",
        "(fn_16 1)",
        "(lam (prev_dc_inv_6 1 $0))",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(lam (map (lam $0) (map (lam (+ $0 $0)) $0)))",
        "(lam (map (lam (* prev_dc_inv_0 $0)) $0))",
        "(fn_15 prev_dc_inv_0 *)",
        "(lam (map (lam (* prev_dc_inv_4 $0)) $0))",
        "(fn_15 prev_dc_inv_4 *)",
        "(lam (prev_dc_inv_14 $0))",
        "(lam (prev_dc_inv_14 (prev_dc_inv_14 $0)))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr (prev_dc_inv_7 prev_dc_inv_1 $0))))))",
        "(lam (prev_dc_inv_3 $0 $0))",
        "(lam (prev_dc_inv_3 $0 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_3 (cdr $0) $0))",
        "(lam (cons (index 1 $0) $0))",
        "(lam (cons (index prev_dc_inv_0 $0) $0))",
        "(lam (prev_dc_inv_3 (prev_dc_inv_2 (cdr $0)) $0))",
        "(lam (cons 0 $0))",
        "(lam (cons (length empty) $0))",
        "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
        "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
        "(lam (prev_dc_inv_3 $0 (prev_dc_inv_2 $0)))",
        "(lam (prev_dc_inv_3 $0 (map (lam $0) (prev_dc_inv_2 $0))))",
        "(lam (prev_dc_inv_3 $0 (cons (index 1 $0) (prev_dc_inv_3 (prev_dc_inv_2 $0) (prev_dc_inv_2 (prev_dc_inv_2 $0))))))",
        "(lam (prev_dc_inv_14 $0))",
        "(lam (prev_dc_inv_10 $0 (lam (is-prime (mod (+ $0 $0) prev_dc_inv_1)))))",
        "(lam (prev_dc_inv_10 $0 (lam (gt? (mod $0 prev_dc_inv_0) 0))))",
        "(lam (prev_dc_inv_10 $0 (lam (is-prime (+ (mod $0 prev_dc_inv_0) 1)))))",
        "(lam (fold $0 $0 (lam (lam (cons $1 $0)))))",
        "(lam (map (lam $0) (fold $0 $0 (lam (lam (cons $1 $0))))))",
        "(lam (map (lam (car $1)) $0))",
        "(lam (map (lam (index 0 $1)) $0))",
        "(lam (map (lam (index prev_dc_inv_0 $1)) $0))",
        "(lam (map (lam (index prev_dc_inv_0 (prev_dc_inv_8 $1))) $0))",
        "(lam (fold $0 empty (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (fold $0 (cdr (range 1)) (lam (lam (cons (index (length $0) $2) $0)))))",
        "(lam (prev_dc_inv_3 $0 empty))",
        "(lam (prev_dc_inv_3 $0 (range 0)))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_8 $0)))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_8 (prev_dc_inv_3 $0 $0))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_8 (cons prev_dc_inv_0 $0))))",
        "(lam (cdr (prev_dc_inv_8 $0)))",
        "(lam (map (lam (index $0 (cdr $1))) (range prev_dc_inv_0)))",
        "(lam (prev_dc_inv_11 $0))",
        "(lam (prev_dc_inv_9 (prev_dc_inv_8 (cdr $0)) (index prev_dc_inv_4 $0)))",
        "(lam (cdr (prev_dc_inv_8 (cdr $0))))",
        "(lam (cdr (prev_dc_inv_8 (prev_dc_inv_8 (cdr $0)))))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_2 $0)))",
        "(lam (cdr (prev_dc_inv_11 $0)))",
        "(lam (prev_dc_inv_11 (cdr $0)))",
        "(lam (map (lam (index $0 $1)) (prev_dc_inv_2 (range (+ prev_dc_inv_1 prev_dc_inv_0)))))",
        "(lam (prev_dc_inv_2 (cdr (prev_dc_inv_8 $0))))",
        "(lam (cdr (prev_dc_inv_2 (prev_dc_inv_8 $0))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_11 $0)))",
        "(lam (cdr (prev_dc_inv_8 (prev_dc_inv_2 $0))))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_2 $0)))",
        "(lam (prev_dc_inv_11 (prev_dc_inv_2 (map (lam $0) $0))))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_8 (prev_dc_inv_2 $0))))",
        "(lam (cdr (prev_dc_inv_2 (prev_dc_inv_11 $0))))",
        "(lam (prev_dc_inv_8 (prev_dc_inv_2 (prev_dc_inv_2 $0))))",
        "(lam (cdr (prev_dc_inv_11 (prev_dc_inv_2 $0))))",
        "(lam (cdr $0))",
        "(lam (cdr (map (lam $0) $0)))",
        "(lam (prev_dc_inv_3 $0 empty))",
        "(lam (prev_dc_inv_3 $0 (range 0)))",
        "(lam (prev_dc_inv_3 $0 (prev_dc_inv_3 (cdr $0) empty)))",
        "(lam (prev_dc_inv_2 (prev_dc_inv_8 (prev_dc_inv_3 $0 (prev_dc_inv_3 $0 $0)))))",
        "(lam (cdr (prev_dc_inv_8 (cons prev_dc_inv_0 $0))))",
        "(lam (cdr (prev_dc_inv_8 (cons 1 $0))))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (fold (range prev_dc_inv_1) empty (lam (lam (cons (index $1 $2) $0)))))",
        "(lam (prev_dc_inv_10 $0 (lam (is-square $0))))",
        "(lam (prev_dc_inv_10 $0 (lam (is-square (* prev_dc_inv_1 $0)))))",
        "(lam (prev_dc_inv_10 $0 (lam (is-prime $0))))",
        "(lam (fn_17 0 gt? $0))",
        "(lam (fn_17 (length empty) gt? $0))",
        "(lam (prev_dc_inv_10 $0 (lam (gt? 1 $0))))",
        "(lam (fn_17 0 eq? $0))",
        "(lam (fn_17 prev_dc_inv_0 gt? $0))",
        "(lam (fn_17 prev_dc_inv_0 gt? (map (lam $0) $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) 1 $0))",
        "(lambda (map (lambda (+ 1 $0)) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 (+ 1 1)))) $0))",
        "(lambda (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (index 1 $0)))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (car (cdr $0))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (car (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (index 1 (cdr $0))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (index #(+ 1 (+ 1 1)) $0)))",
        "(lambda (fold $0 (cdr (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))) (lambda (lambda (cons $1 $0)))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 0))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (length empty)))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ 1 #(+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (fold $0 #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda #(+ 1 #(+ 1 (+ 1 1))))))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))",
        "(lambda (fold $0 (map (lambda #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)) (range 1)) (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda (gt? (+ #(+ 1 #(+ 1 (+ 1 1))) $0) #(+ 1 (+ 1 1)))) $0))",
        "(lambda (map (lambda (gt? (+ $0 #(+ 1 #(+ 1 (+ 1 1)))) #(+ 1 (+ 1 1)))) $0))",
        "(fn_15 0 gt?)",
        "(fn_15 (length empty) gt?)",
        "(fn_15 #(+ 1 (+ 1 1)) gt?)",
        "(lambda (fold $0 empty (lambda (lambda (cons (gt? $1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (map (lambda (gt? 1 (mod $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (eq? #(+ 1 (+ 1 1)) $0)) $0))",
        "(fn_15 #(+ 1 (+ 1 1)) eq?)",
        "(lambda (map (lambda (eq? #(+ 1 #(+ 1 (+ 1 1))) $0)) $0))",
        "(fn_15 #(+ 1 #(+ 1 (+ 1 1))) eq?)",
        "(lambda (map (lambda (- 1 $0)) $0))",
        "(fn_16 (- 1 #(+ 1 (+ 1 1))))",
        "(fn_16 #(+ 1 (+ 1 1)))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0)))",
        "(fn_16 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1))",
        "(fn_16 (+ 1 #(+ 1 #(+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0)))",
        "(lambda (map (lambda (mod (+ #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(fn_16 #(+ 1 (+ 1 1)))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) (map (lambda $0) $0) #(+ 1 (+ 1 1))))",
        "(lambda (map (lambda (- 1 $0)) $0))",
        "(fn_16 (- #(+ 1 (+ 1 1)) 1))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 #(+ 1 (+ 1 1))) #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) $0 #(+ 1 #(+ 1 (+ 1 1)))) #(+ 1 (+ 1 1))))",
        "(fn_16 #(+ 1 #(+ 1 (+ 1 1))))",
        "(lambda (#(lambda (lambda (#(lambda (map (lambda (mod $0 $1)))) $0 (#(lambda (map (lambda (+ $0 $1)))) 1 $1)))) (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0) #(+ 1 #(+ 1 (+ 1 1)))))",
        "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? 1 $0)))))",
        "(lambda (length (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda ($2 $0 $3)))))) 0 eq? $0)))",
        "(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ 1 (+ 1 1)) $0)))))",
        "(lambda (length (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda ($2 $0 $3)))))) #(+ 1 (+ 1 1)) eq? $0)))",
        "(lambda (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) $0))",
        "(lambda (length (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda ($2 $0 $3)))))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) eq? $0)))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (#(lambda (cdr (cdr $0))) (map (lambda $0) (cdr $0))))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (fold (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)) $0 (lambda (lambda (cdr $0)))))",
        "(lambda (empty? $0))",
        "(lambda (empty? (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 (+ 1 1)) $0)))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (empty? (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) (map (lambda $1) $1))))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (empty? (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) (cons $0 empty))))))",
        "(lambda (gt? (length (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda ($2 $0 $3)))))) (car $0) eq? $0)) 1))",
        "(lambda (gt? (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? (car $1) $0)))) 1))",
        "(lambda (gt? (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) (#(lambda (map (lambda (+ $0 $1)))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)) 0))",
        "(lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) (#(lambda (map (lambda (+ $0 $1)))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)))))",
        "(lambda (is-square (fold $0 #(+ 1 (+ 1 1)) (lambda (lambda (mod $0 $1))))))",
        "(lambda (gt? (mod (car (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ 1 #(+ 1 (+ 1 1))))) #(+ 1 #(+ 1 (+ 1 1)))) 0))",
        "(lambda (gt? (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) $0) 1))",
        "(lambda (gt? (#(lambda (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))))) $0) 0))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (car (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (index 1 (cdr $0)))",
        "(lambda (index #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (index #(+ 1 (+ 1 1)) (cdr $0)))",
        "(lambda (empty? (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0)))",
        "(lambda (empty? (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0))))",
        "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $0 $1))))))",
        "(lambda (is-square (fold (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0) #(+ 1 #(+ 1 (+ 1 1))) (lambda (lambda (+ $1 $0))))))",
        "(lambda (fold $0 (is-prime #(+ 1 (+ 1 1))) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (fold $0 (is-square 1) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (empty? (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda ($2 $0 $3)))))) $0 gt? $1))))))",
        "(lambda (fold $0 #(+ 1 (+ 1 1)) (lambda (lambda (if (gt? $0 $1) $0 $1)))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) (range (* #(+ 1 #(+ 1 (+ 1 1))) #(+ 1 #(+ 1 (+ 1 1))))) (lambda (is-prime (- #(+ 1 #(+ 1 (+ 1 1))) (length (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda ($2 $0 $3)))))) $0 gt? $1))))))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) (range (* #(+ 1 #(+ 1 (+ 1 1))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1))) (lambda (is-prime (- #(+ 1 #(+ 1 (+ 1 1))) (length (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda ($2 $0 $3)))))) $0 gt? $1))))))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? #(+ 1 (+ 1 1)) (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $1 $0)))))))))",
        "(lambda (car (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (eq? (length (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $1 $0)))) #(+ 1 (+ 1 1)))))))",
        "(lambda (index (length (cdr $0)) $0))",
        "(lambda (index (- (length $0) 1) $0))",
        "(lambda (length $0))",
        "(lambda (length (#(lambda (map (lambda (+ $0 $1)))) #(+ 1 (+ 1 1)) $0)))",
        "(fn_16 1)",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) 1 $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (- #(+ 1 (+ 1 1)) 1) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (- 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0))",
        "(fn_15 #(+ 1 (+ 1 1)) mod)",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 #(+ 1 (+ 1 1))) $0))",
        "(fn_15 #(+ 1 #(+ 1 (+ 1 1))) mod)",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0))",
        "(fn_15 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) mod)",
        "(fn_16 1)",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) 1 $0))",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(lambda (map (lambda $0) (map (lambda (+ $0 $0)) $0)))",
        "(lambda (map (lambda (* #(+ 1 (+ 1 1)) $0)) $0))",
        "(fn_15 #(+ 1 (+ 1 1)) *)",
        "(lambda (map (lambda (* #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)) $0))",
        "(fn_15 #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) *)",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0)))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr (#(lambda (map (lambda (eq? (mod $0 $1) 0)))) #(+ 1 #(+ 1 (+ 1 1))) $0))))))",
        "(lambda (#(lambda (cons (car $0))) $0 $0))",
        "(lambda (#(lambda (cons (car $0))) $0 (map (lambda $0) $0)))",
        "(lambda (#(lambda (cons (car $0))) (cdr $0) $0))",
        "(lambda (cons (index 1 $0) $0))",
        "(lambda (cons (index #(+ 1 (+ 1 1)) $0) $0))",
        "(lambda (#(lambda (cons (car $0))) (#(lambda (cdr (cdr $0))) (cdr $0)) $0))",
        "(lambda (cons 0 $0))",
        "(lambda (cons (length empty) $0))",
        "(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))",
        "(lambda (fold $0 1 (lambda (lambda (* $1 $0)))))",
        "(lambda (#(lambda (cons (car $0))) $0 (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (#(lambda (cons (car $0))) $0 (map (lambda $0) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (#(lambda (cons (car $0))) $0 (cons (index 1 $0) (#(lambda (cons (car $0))) (#(lambda (cdr (cdr $0))) $0) (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))))",
        "(lambda (#(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ #(+ 1 #(+ 1 (+ 1 1))) (mod $0 #(+ 1 #(+ 1 (+ 1 1))))))))) $0))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (mod (+ $0 $0) #(+ 1 #(+ 1 (+ 1 1))))))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? (mod $0 #(+ 1 (+ 1 1))) 0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime (+ (mod $0 #(+ 1 (+ 1 1))) 1)))))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda $0) (fold $0 $0 (lambda (lambda (cons $1 $0))))))",
        "(lambda (map (lambda (car $1)) $0))",
        "(lambda (map (lambda (index 0 $1)) $0))",
        "(lambda (map (lambda (index #(+ 1 (+ 1 1)) $1)) $0))",
        "(lambda (map (lambda (index #(+ 1 (+ 1 1)) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $1))) $0))",
        "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (fold $0 (cdr (range 1)) (lambda (lambda (cons (index (length $0) $2) $0)))))",
        "(lambda (#(lambda (cons (car $0))) $0 empty))",
        "(lambda (#(lambda (cons (car $0))) $0 (range 0)))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cons (car $0))) $0 $0))))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cons #(+ 1 (+ 1 1)) $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0)))",
        "(lambda (map (lambda (index $0 (cdr $1))) (range #(+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) $0))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cdr $0)) (index #(+ #(+ 1 #(+ 1 (+ 1 1))) 1) $0)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cdr $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cdr $0)))))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) $0)))",
        "(lambda (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) (cdr $0)))",
        "(lambda (map (lambda (index $0 $1)) (#(lambda (cdr (cdr $0))) (range (+ #(+ 1 #(+ 1 (+ 1 1))) #(+ 1 (+ 1 1)))))))",
        "(lambda (#(lambda (cdr (cdr $0))) (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) $0)))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) (#(lambda (cdr (cdr $0))) (map (lambda $0) $0))))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) $0))))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 (cdr $1))) (range #(+ #(+ 1 #(+ 1 (+ 1 1))) 1)))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (cdr $0))",
        "(lambda (cdr (map (lambda $0) $0)))",
        "(lambda (#(lambda (cons (car $0))) $0 empty))",
        "(lambda (#(lambda (cons (car $0))) $0 (range 0)))",
        "(lambda (#(lambda (cons (car $0))) $0 (#(lambda (cons (car $0))) (cdr $0) empty)))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (#(lambda (cons (car $0))) $0 (#(lambda (cons (car $0))) $0 $0)))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cons #(+ 1 (+ 1 1)) $0))))",
        "(lambda (cdr (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) (cons 1 $0))))",
        "(lambda (#(lambda (map (lambda (index $0 $1)) (range #(+ 1 #(+ 1 (+ 1 1)))))) $0))",
        "(lambda (fold (range #(+ 1 #(+ 1 (+ 1 1)))) empty (lambda (lambda (cons (index $1 $2) $0)))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-square $0))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-square (* #(+ 1 #(+ 1 (+ 1 1))) $0)))))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (is-prime $0))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda ($2 $0 $3)))))) 0 gt? $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda ($2 $0 $3)))))) (length empty) gt? $0))",
        "(lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda (gt? 1 $0))))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda ($2 $0 $3)))))) 0 eq? $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda ($2 $0 $3)))))) #(+ 1 (+ 1 1)) gt? $0))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 empty (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $0 (lambda ($2 $0 $3)))))) #(+ 1 (+ 1 1)) gt? (map (lambda $0) $0)))"
      ],
      "utility": 611,
      "expected_cost": 40509,
      "final_cost": 40509,
      "multiplier": 1.0201436717766423,
      "multiplier_wrt_orig": 1.0705769088350736,
      "num_uses": 12,
      "uses": [
        {
          "fn_17 (car $0) eq? $0": "(prev_dc_inv_10 $0 (lam (eq? $0 (car $1))))"
        },
        {
          "fn_17 0 eq? $0": "(prev_dc_inv_10 $0 (lam (eq? $0 0)))"
        },
        {
          "fn_17 prev_dc_inv_0 eq? $0": "(prev_dc_inv_10 $0 (lam (eq? $0 prev_dc_inv_0)))"
        },
        {
          "fn_17 prev_dc_inv_4 eq? $0": "(prev_dc_inv_10 $0 (lam (eq? $0 prev_dc_inv_4)))"
        },
        {
          "fn_17 (length empty) gt? $0": "(prev_dc_inv_10 $0 (lam (gt? $0 (length empty))))"
        },
        {
          "fn_17 0 gt? $0": "(prev_dc_inv_10 $0 (lam (gt? $0 0)))"
        },
        {
          "fn_17 prev_dc_inv_0 gt? $0": "(prev_dc_inv_10 $0 (lam (gt? $0 prev_dc_inv_0)))"
        },
        {
          "fn_17 $0 gt? $1": "(prev_dc_inv_10 $1 (lam (gt? $0 $1)))"
        },
        {
          "fn_17 prev_dc_inv_0 gt? (map (lam $0) $0)": "(prev_dc_inv_10 (map (lam $0) $0) (lam (gt? $0 prev_dc_inv_0)))"
        }
      ]
    }
  ]
}