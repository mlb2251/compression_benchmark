{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": 0.0,
        "productions": [
            {
                "expression": "gt?",
                "logProbability": 0.0
            },
            {
                "expression": "eq?",
                "logProbability": 0.0
            },
            {
                "expression": "is-prime",
                "logProbability": 0.0
            },
            {
                "expression": "empty?",
                "logProbability": 0.0
            },
            {
                "expression": "is-square",
                "logProbability": 0.0
            },
            {
                "expression": "1",
                "logProbability": 0.0
            },
            {
                "expression": "0",
                "logProbability": 0.0
            },
            {
                "expression": "length",
                "logProbability": 0.0
            },
            {
                "expression": "+",
                "logProbability": 0.0
            },
            {
                "expression": "mod",
                "logProbability": 0.0
            },
            {
                "expression": "-",
                "logProbability": 0.0
            },
            {
                "expression": "*",
                "logProbability": 0.0
            },
            {
                "expression": "map",
                "logProbability": 0.0
            },
            {
                "expression": "range",
                "logProbability": 0.0
            },
            {
                "expression": "cons",
                "logProbability": 0.0
            },
            {
                "expression": "empty",
                "logProbability": 0.0
            },
            {
                "expression": "cdr",
                "logProbability": 0.0
            },
            {
                "expression": "unfold",
                "logProbability": 0.0
            },
            {
                "expression": "fold",
                "logProbability": 0.0
            },
            {
                "expression": "index",
                "logProbability": 0.0
            },
            {
                "expression": "if",
                "logProbability": 0.0
            },
            {
                "expression": "car",
                "logProbability": 0.0
            }
        ]
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "add-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (+ $0 1)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (+ 1 $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "add-k with k=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (+ $0 (+ 1 (+ 1 1)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (+ 1 (+ $0 (+ 1 1)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "add-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (+ $0 (* (+ 1 1) (+ 1 1)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (+ $0 (+ 1 (+ 1 (+ 1 1))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "append-k with k=0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 (range 1) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (cons 0 empty) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-geq-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (gt? $0 (+ 1 (+ 1 1)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (gt? (- $0 (+ 1 1)) 1)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "bool-identify-is-mod-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "bool",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (eq? (mod $0 (+ 1 (+ 1 (+ 1 1)))) 0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "mult-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (+ $0 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "reverse",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 empty (lambda (lambda (cons (index (length $0) $2) $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (cdr (range 1)) (lambda (lambda (cons (index (length $0) $2) $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "take-k with k=4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (index $0 $1)) (range (* (+ 1 1) (+ 1 1)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index $0 $1)) (range (+ 1 (+ 1 (+ 1 1))))))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 0,
        "num_learned": 3,
        "new_grammar": {
            "logVariable": -0.373181,
            "productions": [
                {
                    "expression": "gt?",
                    "logProbability": -0.031872
                },
                {
                    "expression": "eq?",
                    "logProbability": -0.031872
                },
                {
                    "expression": "is-prime",
                    "logProbability": -0.06466
                },
                {
                    "expression": "empty?",
                    "logProbability": -0.064661
                },
                {
                    "expression": "is-square",
                    "logProbability": -0.064661
                },
                {
                    "expression": "1",
                    "logProbability": -0.429813
                },
                {
                    "expression": "0",
                    "logProbability": -0.456235
                },
                {
                    "expression": "length",
                    "logProbability": -0.457931
                },
                {
                    "expression": "+",
                    "logProbability": -0.458869
                },
                {
                    "expression": "mod",
                    "logProbability": -0.459076
                },
                {
                    "expression": "-",
                    "logProbability": -0.491861
                },
                {
                    "expression": "*",
                    "logProbability": -0.491866
                },
                {
                    "expression": "map",
                    "logProbability": -0.518962
                },
                {
                    "expression": "range",
                    "logProbability": -0.545508
                },
                {
                    "expression": "cons",
                    "logProbability": -0.577048
                },
                {
                    "expression": "empty",
                    "logProbability": -0.608975
                },
                {
                    "expression": "cdr",
                    "logProbability": -0.644111
                },
                {
                    "expression": "unfold",
                    "logProbability": -0.644377
                },
                {
                    "expression": "fold",
                    "logProbability": -0.893498
                },
                {
                    "expression": "index",
                    "logProbability": -0.893548
                },
                {
                    "expression": "if",
                    "logProbability": -0.958085
                },
                {
                    "expression": "car",
                    "logProbability": -0.958086
                },
                {
                    "expression": "#(+ 1 #(+ 1 (+ 1 1)))",
                    "logProbability": -0.396557
                },
                {
                    "expression": "#(+ 1 (+ 1 1))",
                    "logProbability": -0.42733
                },
                {
                    "expression": "#(lambda (map (lambda (+ $0 $1))))",
                    "logProbability": -0.513552
                }
            ]
        }
    }
}