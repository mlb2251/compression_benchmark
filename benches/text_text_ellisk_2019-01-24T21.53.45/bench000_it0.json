{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": 0.0,
        "productions": [
            {
                "expression": "char-eq?",
                "logProbability": 0.0
            },
            {
                "expression": "length",
                "logProbability": 0.0
            },
            {
                "expression": "+",
                "logProbability": 0.0
            },
            {
                "expression": "-",
                "logProbability": 0.0
            },
            {
                "expression": "0",
                "logProbability": 0.0
            },
            {
                "expression": "1",
                "logProbability": 0.0
            },
            {
                "expression": "empty?",
                "logProbability": 0.0
            },
            {
                "expression": "range",
                "logProbability": 0.0
            },
            {
                "expression": "LPAREN",
                "logProbability": 0.0
            },
            {
                "expression": "'-'",
                "logProbability": 0.0
            },
            {
                "expression": "SPACE",
                "logProbability": 0.0
            },
            {
                "expression": "RPAREN",
                "logProbability": 0.0
            },
            {
                "expression": "'.'",
                "logProbability": 0.0
            },
            {
                "expression": "','",
                "logProbability": 0.0
            },
            {
                "expression": "cons",
                "logProbability": 0.0
            },
            {
                "expression": "STRING",
                "logProbability": 0.0
            },
            {
                "expression": "empty",
                "logProbability": 0.0
            },
            {
                "expression": "map",
                "logProbability": 0.0
            },
            {
                "expression": "unfold",
                "logProbability": 0.0
            },
            {
                "expression": "cdr",
                "logProbability": 0.0
            },
            {
                "expression": "car",
                "logProbability": 0.0
            },
            {
                "expression": "fold",
                "logProbability": 0.0
            },
            {
                "expression": "if",
                "logProbability": 0.0
            },
            {
                "expression": "index",
                "logProbability": 0.0
            }
        ]
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "Replace '(' w/ ')'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (if (char-eq? $0 LPAREN) RPAREN $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (if (char-eq? LPAREN $0) RPAREN $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Replace ' ' w/ '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (if (char-eq? $0 SPACE) LPAREN $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (if (char-eq? SPACE $0) LPAREN $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '.-'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (fold $1 (cons '.' (cons '-' $0)) (lambda (lambda (cons $1 $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (fold $1 (fold $0 $0 (lambda (lambda (cons '.' (cons '-' $2))))) (lambda (lambda (cons $1 $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate separate words (IIIIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (fold $0 $0 (lambda (lambda (cons (car $3) (cons '.' (cons $1 (cons '.' empty)))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append '+138'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 STRING (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (map (lambda $0) STRING) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 0,
        "num_learned": 3,
        "new_grammar": {
            "logVariable": -0.281424,
            "productions": [
                {
                    "expression": "char-eq?",
                    "logProbability": -0.0
                },
                {
                    "expression": "length",
                    "logProbability": -0.0
                },
                {
                    "expression": "+",
                    "logProbability": -0.0
                },
                {
                    "expression": "-",
                    "logProbability": -0.0
                },
                {
                    "expression": "0",
                    "logProbability": -0.0
                },
                {
                    "expression": "1",
                    "logProbability": -0.0
                },
                {
                    "expression": "empty?",
                    "logProbability": -6e-06
                },
                {
                    "expression": "range",
                    "logProbability": -0.001322
                },
                {
                    "expression": "LPAREN",
                    "logProbability": -0.145811
                },
                {
                    "expression": "'-'",
                    "logProbability": -0.177559
                },
                {
                    "expression": "SPACE",
                    "logProbability": -0.177559
                },
                {
                    "expression": "RPAREN",
                    "logProbability": -0.177559
                },
                {
                    "expression": "'.'",
                    "logProbability": -0.210349
                },
                {
                    "expression": "','",
                    "logProbability": -0.210349
                },
                {
                    "expression": "cons",
                    "logProbability": -0.396074
                },
                {
                    "expression": "STRING",
                    "logProbability": -0.458594
                },
                {
                    "expression": "empty",
                    "logProbability": -0.458594
                },
                {
                    "expression": "map",
                    "logProbability": -0.49062
                },
                {
                    "expression": "unfold",
                    "logProbability": -0.491384
                },
                {
                    "expression": "cdr",
                    "logProbability": -0.491384
                },
                {
                    "expression": "car",
                    "logProbability": -0.560916
                },
                {
                    "expression": "fold",
                    "logProbability": -0.625
                },
                {
                    "expression": "if",
                    "logProbability": -0.625233
                },
                {
                    "expression": "index",
                    "logProbability": -0.625239
                },
                {
                    "expression": "#(cons '.')",
                    "logProbability": -0.396074
                },
                {
                    "expression": "#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0))))))",
                    "logProbability": -0.426846
                },
                {
                    "expression": "#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0)))))",
                    "logProbability": -0.426851
                }
            ]
        }
    }
}