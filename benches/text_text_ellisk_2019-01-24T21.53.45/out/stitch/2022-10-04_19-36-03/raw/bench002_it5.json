{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T21.53.45/bench002_it5.json --max-arity=3 --threads=1 --iterations=1 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T21.53.45/out/stitch/2022-10-04_19-36-03/raw/bench002_it5.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.53.45/bench002_it5.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.53.45/out/stitch/2022-10-04_19-36-03/raw/bench002_it5.json",
    "iterations": 1,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 37129,
  "original": [
    "(lam (prev_dc_inv_1 ',' LPAREN $0))",
    "(lam (prev_dc_inv_1 ',' LPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_1 '.' RPAREN $0))",
    "(lam (prev_dc_inv_1 '.' RPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_1 '-' ',' $0))",
    "(lam (prev_dc_inv_1 '-' ',' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_1 LPAREN RPAREN $0))",
    "(lam (prev_dc_inv_1 LPAREN RPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_1 '-' SPACE $0))",
    "(lam (prev_dc_inv_1 '-' SPACE (map (lam $0) $0)))",
    "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
    "(lam (prev_dc_inv_1 SPACE LPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_1 LPAREN SPACE $0))",
    "(lam (prev_dc_inv_1 LPAREN SPACE (map (lam $0) $0)))",
    "(lam (lam (prev_dc_inv_2 $1 (prev_dc_inv_0 $0))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons '.' $0))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons SPACE $0))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons SPACE (map (lam $0) $0)))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons LPAREN $0))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons LPAREN (map (lam $0) $0)))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons RPAREN $0))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons RPAREN (map (lam $0) $0)))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons '-' $0))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons '-' (map (lam $0) $0)))))",
    "(lam (lam (prev_dc_inv_2 $1 (prev_dc_inv_0 (prev_dc_inv_0 $0)))))",
    "(lam (lam (prev_dc_inv_2 $1 (prev_dc_inv_0 (cons '.' $0)))))",
    "(lam (lam (prev_dc_inv_2 $1 (prev_dc_inv_0 (cons '-' $0)))))",
    "(lam (lam (prev_dc_inv_2 $1 (fold $0 $0 (lam (lam (prev_dc_inv_0 (cons '-' $2))))))))",
    "(lam (lam (prev_dc_inv_2 $1 (cons SPACE (cons '-' $0)))))",
    "(lam (lam (prev_dc_inv_2 (map (lam $0) $1) (cons SPACE (cons '-' $0)))))",
    "(lam (map (lam (index $0 $1)) (range (+ 1 (+ 1 1)))))",
    "(lam (map (lam (index $0 $1)) (range (+ (index 1 (range (+ 1 1))) (+ 1 1)))))",
    "(lam (map (lam (index $0 $1)) (range (length (cdr (cdr (cdr (cdr (cdr $0)))))))))",
    "(lam (map (lam (index $0 $1)) (range (- (length $0) (+ 1 (+ 1 (+ 1 (+ 1 1))))))))",
    "(lam (cons (car $0) (prev_dc_inv_0 empty)))",
    "(lam (cons (index 0 $0) (prev_dc_inv_0 empty)))",
    "(lam (cons (car $0) (cons SPACE empty)))",
    "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
    "(lam (lam (prev_dc_inv_3 $0 $1)))",
    "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_3 $0 $1)))",
    "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_2 $1 (prev_dc_inv_0 empty)))))",
    "(lam (lam (prev_dc_inv_3 $0 $1)))",
    "(lam (lam (fold $0 $0 (lam (lam (cons (car $3) (prev_dc_inv_0 (cons $1 (prev_dc_inv_0 empty)))))))))",
    "(lam (lam (prev_dc_inv_2 $1 $0)))",
    "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_2 $1 $0)))",
    "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_2 $1 $0)))",
    "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
    "(lam (prev_dc_inv_2 $0 STRING))",
    "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
    "(lam (prev_dc_inv_2 STRING $0))",
    "(lam (prev_dc_inv_2 (map (lam $0) STRING) $0))",
    "(lam (prev_dc_inv_2 $0 STRING))",
    "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
    "(lam (prev_dc_inv_2 $0 STRING))",
    "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
    "(lam (prev_dc_inv_2 STRING $0))",
    "(lam (prev_dc_inv_2 (map (lam $0) STRING) $0))",
    "(lam (prev_dc_inv_2 (cons LPAREN $0) (cons RPAREN empty)))",
    "(lam (cons LPAREN (prev_dc_inv_2 $0 (cons RPAREN empty))))",
    "(lam (prev_dc_inv_2 $0 (fold (cdr $0) empty (lam (lam (fold $0 STRING (lam (lam (cdr $0)))))))))"
  ],
  "invs": [
    {
      "body": "(lam (lam (prev_dc_inv_2 $1 (cons #0 $0))))",
      "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $2 $0)))))",
      "arity": 1,
      "name": "fn_4",
      "rewritten": [
        "(lam (prev_dc_inv_1 ',' LPAREN $0))",
        "(lam (prev_dc_inv_1 ',' LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 '.' RPAREN $0))",
        "(lam (prev_dc_inv_1 '.' RPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 '-' ',' $0))",
        "(lam (prev_dc_inv_1 '-' ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 LPAREN RPAREN $0))",
        "(lam (prev_dc_inv_1 LPAREN RPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 '-' SPACE $0))",
        "(lam (prev_dc_inv_1 '-' SPACE (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 SPACE LPAREN $0))",
        "(lam (prev_dc_inv_1 SPACE LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 LPAREN SPACE $0))",
        "(lam (prev_dc_inv_1 LPAREN SPACE (map (lam $0) $0)))",
        "(lam (lam (prev_dc_inv_2 $1 (prev_dc_inv_0 $0))))",
        "(fn_4 '.')",
        "(fn_4 SPACE)",
        "(lam (lam (prev_dc_inv_2 $1 (cons SPACE (map (lam $0) $0)))))",
        "(fn_4 LPAREN)",
        "(lam (lam (prev_dc_inv_2 $1 (cons LPAREN (map (lam $0) $0)))))",
        "(fn_4 RPAREN)",
        "(lam (lam (prev_dc_inv_2 $1 (cons RPAREN (map (lam $0) $0)))))",
        "(fn_4 '-')",
        "(lam (lam (prev_dc_inv_2 $1 (cons '-' (map (lam $0) $0)))))",
        "(lam (lam (prev_dc_inv_2 $1 (prev_dc_inv_0 (prev_dc_inv_0 $0)))))",
        "(lam (lam (prev_dc_inv_2 $1 (prev_dc_inv_0 (cons '.' $0)))))",
        "(lam (lam (prev_dc_inv_2 $1 (prev_dc_inv_0 (cons '-' $0)))))",
        "(lam (lam (prev_dc_inv_2 $1 (fold $0 $0 (lam (lam (prev_dc_inv_0 (cons '-' $2))))))))",
        "(lam (lam (prev_dc_inv_2 $1 (cons SPACE (cons '-' $0)))))",
        "(lam (lam (prev_dc_inv_2 (map (lam $0) $1) (cons SPACE (cons '-' $0)))))",
        "(lam (map (lam (index $0 $1)) (range (+ 1 (+ 1 1)))))",
        "(lam (map (lam (index $0 $1)) (range (+ (index 1 (range (+ 1 1))) (+ 1 1)))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr (cdr (cdr (cdr (cdr $0)))))))))",
        "(lam (map (lam (index $0 $1)) (range (- (length $0) (+ 1 (+ 1 (+ 1 (+ 1 1))))))))",
        "(lam (cons (car $0) (prev_dc_inv_0 empty)))",
        "(lam (cons (index 0 $0) (prev_dc_inv_0 empty)))",
        "(lam (cons (car $0) (cons SPACE empty)))",
        "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
        "(lam (lam (prev_dc_inv_3 $0 $1)))",
        "(lam (lam (prev_dc_inv_3 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_3 $0 $1)))",
        "(lam (lam (prev_dc_inv_3 $0 (prev_dc_inv_2 $1 (prev_dc_inv_0 empty)))))",
        "(lam (lam (prev_dc_inv_3 $0 $1)))",
        "(lam (lam (fold $0 $0 (lam (lam (cons (car $3) (prev_dc_inv_0 (cons $1 (prev_dc_inv_0 empty)))))))))",
        "(lam (lam (prev_dc_inv_2 $1 $0)))",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_2 $1 $0)))",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_2 $1 $0)))",
        "(lam (lam (prev_dc_inv_2 $1 (map (lam $0) $0))))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_2 STRING $0))",
        "(lam (prev_dc_inv_2 (map (lam $0) STRING) $0))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_2 $0 STRING))",
        "(lam (prev_dc_inv_2 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_2 STRING $0))",
        "(lam (prev_dc_inv_2 (map (lam $0) STRING) $0))",
        "(lam (prev_dc_inv_2 (cons LPAREN $0) (cons RPAREN empty)))",
        "(lam (cons LPAREN (prev_dc_inv_2 $0 (cons RPAREN empty))))",
        "(lam (prev_dc_inv_2 $0 (fold (cdr $0) empty (lam (lam (fold $0 STRING (lam (lam (cdr $0)))))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' RPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' RPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN SPACE $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN SPACE (map (lambda $0) $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') $0))))",
        "(#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $2 $0))))) '.')",
        "(#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $2 $0))))) SPACE)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons SPACE (map (lambda $0) $0)))))",
        "(#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $2 $0))))) LPAREN)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons LPAREN (map (lambda $0) $0)))))",
        "(#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $2 $0))))) RPAREN)",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons RPAREN (map (lambda $0) $0)))))",
        "(#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $2 $0))))) '-')",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons '-' (map (lambda $0) $0)))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') (#(cons '.') $0)))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') (cons '.' $0)))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') (cons '-' $0)))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (fold $0 $0 (lambda (lambda (#(cons '.') (cons '-' $2))))))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons SPACE (cons '-' $0)))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $1) (cons SPACE (cons '-' $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (+ 1 (+ 1 1)))))",
        "(lambda (map (lambda (index $0 $1)) (range (+ (index 1 (range (+ 1 1))) (+ 1 1)))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr (cdr (cdr (cdr (cdr $0)))))))))",
        "(lambda (map (lambda (index $0 $1)) (range (- (length $0) (+ 1 (+ 1 (+ 1 (+ 1 1))))))))",
        "(lambda (cons (car $0) (#(cons '.') empty)))",
        "(lambda (cons (index 0 $0) (#(cons '.') empty)))",
        "(lambda (cons (car $0) (cons SPACE empty)))",
        "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') empty)))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 $1)))",
        "(lambda (lambda (fold $0 $0 (lambda (lambda (cons (car $3) (#(cons '.') (cons $1 (#(cons '.') empty)))))))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) (cons RPAREN empty)))",
        "(lambda (cons LPAREN (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cons RPAREN empty))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (fold (cdr $0) empty (lambda (lambda (fold $0 STRING (lambda (lambda (cdr $0)))))))))"
      ],
      "utility": 1018,
      "expected_cost": 14150,
      "final_cost": 14150,
      "multiplier": 1.1006360424028268,
      "multiplier_wrt_orig": 1.1006360424028268,
      "num_uses": 5,
      "uses": [
        {
          "fn_4 '-'": "(lam (lam (prev_dc_inv_2 $1 (cons '-' $0))))"
        },
        {
          "fn_4 '.'": "(lam (lam (prev_dc_inv_2 $1 (cons '.' $0))))"
        },
        {
          "fn_4 LPAREN": "(lam (lam (prev_dc_inv_2 $1 (cons LPAREN $0))))"
        },
        {
          "fn_4 RPAREN": "(lam (lam (prev_dc_inv_2 $1 (cons RPAREN $0))))"
        },
        {
          "fn_4 SPACE": "(lam (lam (prev_dc_inv_2 $1 (cons SPACE $0))))"
        }
      ]
    }
  ]
}