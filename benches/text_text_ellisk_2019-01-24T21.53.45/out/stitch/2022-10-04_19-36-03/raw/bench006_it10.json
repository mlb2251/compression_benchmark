{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-24T21.53.45/bench006_it10.json --max-arity=3 --threads=1 --iterations=1 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-24T21.53.45/out/stitch/2022-10-04_19-36-03/raw/bench006_it10.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.53.45/bench006_it10.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-24T21.53.45/out/stitch/2022-10-04_19-36-03/raw/bench006_it10.json",
    "iterations": 1,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 54229,
  "original": [
    "(lam (prev_dc_inv_2 ',' LPAREN $0))",
    "(lam (prev_dc_inv_2 ',' LPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 '.' RPAREN $0))",
    "(lam (prev_dc_inv_2 '.' RPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 '-' ',' $0))",
    "(lam (prev_dc_inv_2 '-' ',' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 LPAREN '.' $0))",
    "(lam (prev_dc_inv_2 LPAREN '.' (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 LPAREN RPAREN $0))",
    "(lam (prev_dc_inv_2 LPAREN RPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 '-' SPACE $0))",
    "(lam (prev_dc_inv_2 '-' SPACE (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 SPACE LPAREN $0))",
    "(lam (prev_dc_inv_2 SPACE LPAREN (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 LPAREN SPACE $0))",
    "(lam (prev_dc_inv_2 LPAREN SPACE (map (lam $0) $0)))",
    "(lam (lam (prev_dc_inv_7 $0 $1 '.')))",
    "(lam (lam (prev_dc_inv_3 $1 (prev_dc_inv_0 $0))))",
    "(lam (lam (prev_dc_inv_7 $0 $1 ',')))",
    "(lam (lam (prev_dc_inv_3 $1 (cons ',' $0))))",
    "(lam (lam (prev_dc_inv_7 $0 $1 SPACE)))",
    "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1 SPACE)))",
    "(lam (lam (prev_dc_inv_7 $0 $1 LPAREN)))",
    "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1 LPAREN)))",
    "(lam (lam (prev_dc_inv_7 $0 $1 RPAREN)))",
    "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1 RPAREN)))",
    "(lam (lam (prev_dc_inv_7 $0 $1 '-')))",
    "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1 '-')))",
    "(lam (lam (prev_dc_inv_7 (cons SPACE $0) $1 '.')))",
    "(lam (lam (prev_dc_inv_3 $1 (prev_dc_inv_0 (cons SPACE $0)))))",
    "(lam (lam (prev_dc_inv_7 (cons ',' $0) $1 LPAREN)))",
    "(lam (lam (prev_dc_inv_7 $0 (prev_dc_inv_7 empty $1 LPAREN) ',')))",
    "(lam (lam (prev_dc_inv_7 (prev_dc_inv_0 $0) $1 '.')))",
    "(lam (lam (prev_dc_inv_3 $1 (prev_dc_inv_0 (prev_dc_inv_0 $0)))))",
    "(lam (lam (prev_dc_inv_3 $1 (prev_dc_inv_0 (cons '-' $0)))))",
    "(lam (lam (prev_dc_inv_3 $1 (fold $0 $0 (lam (lam (prev_dc_inv_0 (cons '-' $2))))))))",
    "(lam (lam (prev_dc_inv_7 (cons '-' $0) $1 SPACE)))",
    "(lam (lam (prev_dc_inv_7 (cons '-' $0) (map (lam $0) $1) SPACE)))",
    "(lam (prev_dc_inv_4 $0 (lam (length (cdr $1)))))",
    "(lam (prev_dc_inv_4 $0 (lam (- (length $1) 1))))",
    "(lam (prev_dc_inv_4 $0 (lam ($0 1))))",
    "(lam (prev_dc_inv_4 $0 (lam (+ 1 1))))",
    "(lam (prev_dc_inv_4 $0 (lam (- (length $1) ($0 ($0 1))))))",
    "(lam (prev_dc_inv_4 $0 (lam (- (length (cdr $1)) ($0 1)))))",
    "(lam (prev_dc_inv_4 $0 (lam ($0 ($0 1)))))",
    "(lam (prev_dc_inv_4 $0 (lam ($0 ($0 (index 1 (range ($0 1))))))))",
    "(lam (prev_dc_inv_4 $0 (lam (- (length $1) ($0 ($0 ($0 1)))))))",
    "(lam (prev_dc_inv_4 $0 (lam (- (length (cdr $1)) ($0 ($0 1))))))",
    "(lam (prev_dc_inv_4 $0 (lam ($0 ($0 ($0 1))))))",
    "(lam (prev_dc_inv_4 $0 (lam (length (prev_dc_inv_6 $1 $1)))))",
    "(lam (prev_dc_inv_4 $0 (lam (- (length $1) ($0 ($0 ($0 ($0 1))))))))",
    "(lam (prev_dc_inv_4 $0 (lam ($0 (length (cdr (cdr (cdr (cdr (cdr (cdr $1)))))))))))",
    "(lam (prev_dc_inv_4 $0 (lam ($0 ($0 ($0 ($0 1)))))))",
    "(lam (prev_dc_inv_4 $0 (lam ($0 (length (prev_dc_inv_6 $1 $1))))))",
    "(lam (prev_dc_inv_1 $0 '.'))",
    "(lam (cons (car $0) (prev_dc_inv_0 empty)))",
    "(lam (prev_dc_inv_1 $0 ','))",
    "(lam (prev_dc_inv_1 (prev_dc_inv_3 $0 $0) ','))",
    "(lam (prev_dc_inv_1 $0 SPACE))",
    "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
    "(lam (prev_dc_inv_1 $0 LPAREN))",
    "(lam (prev_dc_inv_1 (prev_dc_inv_3 $0 $0) LPAREN))",
    "(lam (prev_dc_inv_1 $0 RPAREN))",
    "(lam (prev_dc_inv_7 empty (prev_dc_inv_4 $0 (lam 1)) RPAREN))",
    "(lam (prev_dc_inv_1 $0 '-'))",
    "(lam (prev_dc_inv_1 (prev_dc_inv_3 $0 $0) '-'))",
    "(lam (lam (prev_dc_inv_6 $0 $1)))",
    "(lam (lam (prev_dc_inv_6 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_6 $0 $1)))",
    "(lam (lam (prev_dc_inv_6 $0 (prev_dc_inv_3 $1 (prev_dc_inv_0 empty)))))",
    "(lam (lam (prev_dc_inv_6 $0 $1)))",
    "(lam (lam (prev_dc_inv_6 $0 (prev_dc_inv_4 $1 (lam 1)))))",
    "(lam (lam (prev_dc_inv_6 $0 $1)))",
    "(lam (lam (prev_dc_inv_6 $0 (prev_dc_inv_4 $1 (lam 1)))))",
    "(lam (lam (prev_dc_inv_6 $0 $1)))",
    "(lam (lam (fold $0 $0 (lam (lam (cons (car $3) (prev_dc_inv_0 (cons $1 (prev_dc_inv_0 empty)))))))))",
    "(lam (lam (prev_dc_inv_3 $1 $0)))",
    "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_3 $1 $0)))",
    "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_3 $1 $0)))",
    "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_3 $1 $0)))",
    "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_3 $0 STRING))",
    "(lam (prev_dc_inv_3 $0 (prev_dc_inv_5 empty)))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_3 STRING $0))",
    "(lam (prev_dc_inv_3 $0 STRING))",
    "(lam (prev_dc_inv_3 $0 (map (lam $0) STRING)))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_3 $0 STRING))",
    "(lam (prev_dc_inv_3 $0 (map (lam $0) STRING)))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_3 STRING $0))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_8 $0))",
    "(lam (cons LPAREN (prev_dc_inv_7 empty $0 RPAREN)))",
    "(lam (prev_dc_inv_8 $0))",
    "(lam (cons LPAREN (prev_dc_inv_7 empty $0 RPAREN)))",
    "(lam (prev_dc_inv_8 $0))",
    "(lam (prev_dc_inv_8 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_3 $0 (fold (cdr $0) empty (lam (lam (fold $0 STRING (lam (lam (cdr $0)))))))))"
  ],
  "invs": [
    {
      "body": "(lam (lam (prev_dc_inv_7 $0 $1 #0)))",
      "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 $1 $2))))",
      "arity": 1,
      "name": "fn_9",
      "rewritten": [
        "(lam (prev_dc_inv_2 ',' LPAREN $0))",
        "(lam (prev_dc_inv_2 ',' LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 '.' RPAREN $0))",
        "(lam (prev_dc_inv_2 '.' RPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 '-' ',' $0))",
        "(lam (prev_dc_inv_2 '-' ',' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 LPAREN '.' $0))",
        "(lam (prev_dc_inv_2 LPAREN '.' (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 LPAREN RPAREN $0))",
        "(lam (prev_dc_inv_2 LPAREN RPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 '-' SPACE $0))",
        "(lam (prev_dc_inv_2 '-' SPACE (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 SPACE LPAREN $0))",
        "(lam (prev_dc_inv_2 SPACE LPAREN (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 LPAREN SPACE $0))",
        "(lam (prev_dc_inv_2 LPAREN SPACE (map (lam $0) $0)))",
        "(fn_9 '.')",
        "(lam (lam (prev_dc_inv_3 $1 (prev_dc_inv_0 $0))))",
        "(fn_9 ',')",
        "(lam (lam (prev_dc_inv_3 $1 (cons ',' $0))))",
        "(fn_9 SPACE)",
        "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1 SPACE)))",
        "(fn_9 LPAREN)",
        "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1 LPAREN)))",
        "(fn_9 RPAREN)",
        "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1 RPAREN)))",
        "(fn_9 '-')",
        "(lam (lam (prev_dc_inv_7 (map (lam $0) $0) $1 '-')))",
        "(lam (lam (prev_dc_inv_7 (cons SPACE $0) $1 '.')))",
        "(lam (lam (prev_dc_inv_3 $1 (prev_dc_inv_0 (cons SPACE $0)))))",
        "(lam (lam (prev_dc_inv_7 (cons ',' $0) $1 LPAREN)))",
        "(lam (lam (prev_dc_inv_7 $0 (prev_dc_inv_7 empty $1 LPAREN) ',')))",
        "(lam (lam (prev_dc_inv_7 (prev_dc_inv_0 $0) $1 '.')))",
        "(lam (lam (prev_dc_inv_3 $1 (prev_dc_inv_0 (prev_dc_inv_0 $0)))))",
        "(lam (lam (prev_dc_inv_3 $1 (prev_dc_inv_0 (cons '-' $0)))))",
        "(lam (lam (prev_dc_inv_3 $1 (fold $0 $0 (lam (lam (prev_dc_inv_0 (cons '-' $2))))))))",
        "(lam (lam (prev_dc_inv_7 (cons '-' $0) $1 SPACE)))",
        "(lam (lam (prev_dc_inv_7 (cons '-' $0) (map (lam $0) $1) SPACE)))",
        "(lam (prev_dc_inv_4 $0 (lam (length (cdr $1)))))",
        "(lam (prev_dc_inv_4 $0 (lam (- (length $1) 1))))",
        "(lam (prev_dc_inv_4 $0 (lam ($0 1))))",
        "(lam (prev_dc_inv_4 $0 (lam (+ 1 1))))",
        "(lam (prev_dc_inv_4 $0 (lam (- (length $1) ($0 ($0 1))))))",
        "(lam (prev_dc_inv_4 $0 (lam (- (length (cdr $1)) ($0 1)))))",
        "(lam (prev_dc_inv_4 $0 (lam ($0 ($0 1)))))",
        "(lam (prev_dc_inv_4 $0 (lam ($0 ($0 (index 1 (range ($0 1))))))))",
        "(lam (prev_dc_inv_4 $0 (lam (- (length $1) ($0 ($0 ($0 1)))))))",
        "(lam (prev_dc_inv_4 $0 (lam (- (length (cdr $1)) ($0 ($0 1))))))",
        "(lam (prev_dc_inv_4 $0 (lam ($0 ($0 ($0 1))))))",
        "(lam (prev_dc_inv_4 $0 (lam (length (prev_dc_inv_6 $1 $1)))))",
        "(lam (prev_dc_inv_4 $0 (lam (- (length $1) ($0 ($0 ($0 ($0 1))))))))",
        "(lam (prev_dc_inv_4 $0 (lam ($0 (length (cdr (cdr (cdr (cdr (cdr (cdr $1)))))))))))",
        "(lam (prev_dc_inv_4 $0 (lam ($0 ($0 ($0 ($0 1)))))))",
        "(lam (prev_dc_inv_4 $0 (lam ($0 (length (prev_dc_inv_6 $1 $1))))))",
        "(lam (prev_dc_inv_1 $0 '.'))",
        "(lam (cons (car $0) (prev_dc_inv_0 empty)))",
        "(lam (prev_dc_inv_1 $0 ','))",
        "(lam (prev_dc_inv_1 (prev_dc_inv_3 $0 $0) ','))",
        "(lam (prev_dc_inv_1 $0 SPACE))",
        "(lam (cons (car $0) (map (lam SPACE) (range 1))))",
        "(lam (prev_dc_inv_1 $0 LPAREN))",
        "(lam (prev_dc_inv_1 (prev_dc_inv_3 $0 $0) LPAREN))",
        "(lam (prev_dc_inv_1 $0 RPAREN))",
        "(lam (prev_dc_inv_7 empty (prev_dc_inv_4 $0 (lam 1)) RPAREN))",
        "(lam (prev_dc_inv_1 $0 '-'))",
        "(lam (prev_dc_inv_1 (prev_dc_inv_3 $0 $0) '-'))",
        "(lam (lam (prev_dc_inv_6 $0 $1)))",
        "(lam (lam (prev_dc_inv_6 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_6 $0 $1)))",
        "(lam (lam (prev_dc_inv_6 $0 (prev_dc_inv_3 $1 (prev_dc_inv_0 empty)))))",
        "(lam (lam (prev_dc_inv_6 $0 $1)))",
        "(lam (lam (prev_dc_inv_6 $0 (prev_dc_inv_4 $1 (lam 1)))))",
        "(lam (lam (prev_dc_inv_6 $0 $1)))",
        "(lam (lam (prev_dc_inv_6 $0 (prev_dc_inv_4 $1 (lam 1)))))",
        "(lam (lam (prev_dc_inv_6 $0 $1)))",
        "(lam (lam (fold $0 $0 (lam (lam (cons (car $3) (prev_dc_inv_0 (cons $1 (prev_dc_inv_0 empty)))))))))",
        "(lam (lam (prev_dc_inv_3 $1 $0)))",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_3 $1 $0)))",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_3 $1 $0)))",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_3 $1 $0)))",
        "(lam (lam (prev_dc_inv_3 $1 (map (lam $0) $0))))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_3 $0 STRING))",
        "(lam (prev_dc_inv_3 $0 (prev_dc_inv_5 empty)))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_3 STRING $0))",
        "(lam (prev_dc_inv_3 $0 STRING))",
        "(lam (prev_dc_inv_3 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_3 $0 STRING))",
        "(lam (prev_dc_inv_3 $0 (map (lam $0) STRING)))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_3 STRING $0))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (cons LPAREN (prev_dc_inv_7 empty $0 RPAREN)))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (cons LPAREN (prev_dc_inv_7 empty $0 RPAREN)))",
        "(lam (prev_dc_inv_8 $0))",
        "(lam (prev_dc_inv_8 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_3 $0 (fold (cdr $0) empty (lam (lam (fold $0 STRING (lam (lam (cdr $0)))))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' RPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' RPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN '.' $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN '.' (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN SPACE $0))",
        "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN SPACE (map (lambda $0) $0)))",
        "(#(lambda (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 $1 $2)))) '.')",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') $0))))",
        "(#(lambda (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 $1 $2)))) ',')",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons ',' $0))))",
        "(#(lambda (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 $1 $2)))) SPACE)",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (map (lambda $0) $0) $1 SPACE)))",
        "(#(lambda (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 $1 $2)))) LPAREN)",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (map (lambda $0) $0) $1 LPAREN)))",
        "(#(lambda (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 $1 $2)))) RPAREN)",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (map (lambda $0) $0) $1 RPAREN)))",
        "(#(lambda (lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 $1 $2)))) '-')",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (map (lambda $0) $0) $1 '-')))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons SPACE $0) $1 '.')))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') (cons SPACE $0)))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons ',' $0) $1 LPAREN)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty $1 LPAREN) ',')))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (#(cons '.') $0) $1 '.')))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') (#(cons '.') $0)))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') (cons '-' $0)))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (fold $0 $0 (lambda (lambda (#(cons '.') (cons '-' $2))))))))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons '-' $0) $1 SPACE)))",
        "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons '-' $0) (map (lambda $0) $1) SPACE)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (length (cdr $1)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (- (length $1) 1))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda ($0 1))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (+ 1 1))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (- (length $1) ($0 ($0 1))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (- (length (cdr $1)) ($0 1)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda ($0 ($0 1)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda ($0 ($0 (index 1 (range ($0 1))))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (- (length $1) ($0 ($0 ($0 1)))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (- (length (cdr $1)) ($0 ($0 1))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda ($0 ($0 ($0 1))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (length (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $1 $1)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (- (length $1) ($0 ($0 ($0 ($0 1))))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda ($0 (length (cdr (cdr (cdr (cdr (cdr (cdr $1)))))))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda ($0 ($0 ($0 ($0 1)))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda ($0 (length (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $1 $1))))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.'))",
        "(lambda (cons (car $0) (#(cons '.') empty)))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 $0) ','))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
        "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 LPAREN))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 $0) LPAREN))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 RPAREN))",
        "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda 1)) RPAREN))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
        "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 $0) '-'))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') empty)))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $1 (lambda 1)))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $1 (lambda 1)))))",
        "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 $1)))",
        "(lambda (lambda (fold $0 $0 (lambda (lambda (cons (car $3) (#(cons '.') (cons $1 (#(cons '.') empty)))))))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
        "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) empty)))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
        "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
        "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty $0 RPAREN)))",
        "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) $0))",
        "(lambda (cons LPAREN (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty $0 RPAREN)))",
        "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) $0))",
        "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (fold (cdr $0) empty (lambda (lambda (fold $0 STRING (lambda (lambda (cdr $0)))))))))"
      ],
      "utility": 919,
      "expected_cost": 21230,
      "final_cost": 21230,
      "multiplier": 1.05765426283561,
      "multiplier_wrt_orig": 1.05765426283561,
      "num_uses": 6,
      "uses": [
        {
          "fn_9 ','": "(lam (lam (prev_dc_inv_7 $0 $1 ',')))"
        },
        {
          "fn_9 '-'": "(lam (lam (prev_dc_inv_7 $0 $1 '-')))"
        },
        {
          "fn_9 '.'": "(lam (lam (prev_dc_inv_7 $0 $1 '.')))"
        },
        {
          "fn_9 LPAREN": "(lam (lam (prev_dc_inv_7 $0 $1 LPAREN)))"
        },
        {
          "fn_9 RPAREN": "(lam (lam (prev_dc_inv_7 $0 $1 RPAREN)))"
        },
        {
          "fn_9 SPACE": "(lam (lam (prev_dc_inv_7 $0 $1 SPACE)))"
        }
      ]
    }
  ]
}