{
  "DSL": {
    "logVariable": -0.5011210768898424,
    "productions": [
      {
        "expression":
          "#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $1 (lambda (- (length $2) ($0 ($1 $0)))))))",
        "logProbability": -1.7060750040363
      },
      { "expression": "char-eq?", "logProbability": 0.0 },
      { "expression": "empty?", "logProbability": 0.0 },
      { "expression": "range", "logProbability": -0.15599517366570437 },
      { "expression": "1", "logProbability": -0.3710538001678847 },
      { "expression": "length", "logProbability": -0.5425370042887634 },
      { "expression": "-", "logProbability": -0.5732621839319267 },
      { "expression": "SPACE", "logProbability": -0.5697524184929379 },
      { "expression": "LPAREN", "logProbability": -0.5430817252224358 },
      { "expression": "'-'", "logProbability": -0.5971513926810523 },
      { "expression": "+", "logProbability": -0.5817626482553337 },
      { "expression": "0", "logProbability": -0.5862145360357114 },
      { "expression": "RPAREN", "logProbability": -0.6543070725461897 },
      { "expression": "'.'", "logProbability": -0.6169820394585859 },
      { "expression": "','", "logProbability": -0.6253222696477487 },
      { "expression": "STRING", "logProbability": -1.6746466044630428 },
      { "expression": "cons", "logProbability": -1.6762585895334596 },
      { "expression": "cdr", "logProbability": -1.7179803769199036 },
      { "expression": "empty", "logProbability": -1.7657442951074516 },
      { "expression": "map", "logProbability": -1.7975210973897542 },
      { "expression": "unfold", "logProbability": -1.8013796063964835 },
      { "expression": "fold", "logProbability": -2.019327458287489 },
      { "expression": "car", "logProbability": -2.0838542904216237 },
      { "expression": "index", "logProbability": -2.083861687334777 },
      { "expression": "if", "logProbability": -2.083868549283205 },
      {
        "expression":
          "#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0))))))",
        "logProbability": -1.5169903979269628
      },
      {
        "expression":
          "#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2)))))",
        "logProbability": -1.5314562525480144
      },
      {
        "expression":
          "#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0)))))",
        "logProbability": -1.56498969561905
      },
      {
        "expression":
          "#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty))))))",
        "logProbability": -1.6375836198433338
      },
      {
        "expression":
          "#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1))))))",
        "logProbability": -1.6467665062030767
      },
      {
        "expression":
          "#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING)",
        "logProbability": -1.620540754739959
      },
      {
        "expression": "#(lambda (lambda (cons (car $1) (cons $0 empty))))",
        "logProbability": -1.6190798131086126
      },
      { "expression": "#(cons '.')", "logProbability": -1.7149877781982603 },
      {
        "expression":
          "#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN))",
        "logProbability": -1.7060711107093058
      }
    ]
  },
  "frontiers": [
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) ',' LPAREN (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' RPAREN $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '.' RPAREN (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' ',' (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN '.' $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN '.' (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) '-' SPACE (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN SPACE $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN SPACE (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 $1 '.')))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') $0))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 $1 ',')))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons ',' $0))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 $1 SPACE)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (map (lambda $0) $0) $1 SPACE)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 $1 LPAREN)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (map (lambda $0) $0) $1 LPAREN)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 $1 RPAREN)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (map (lambda $0) $0) $1 RPAREN)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 $1 '-')))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (map (lambda $0) $0) $1 '-')))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons SPACE $0) $1 '.')))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') (cons SPACE $0)))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons ',' $0) $1 LPAREN)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) $0 (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty $1 LPAREN) ',')))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (#(cons '.') $0) $1 '.')))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') (#(cons '.') $0)))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') (cons '-' $0)))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (fold $0 $0 (lambda (lambda (#(cons '.') (cons '-' $2))))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons '-' $0) $1 SPACE)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) (cons '-' $0) (map (lambda $0) $1) SPACE)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (length (cdr $1)))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (- (length $1) 1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda ($0 1))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (+ 1 1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $1 (lambda (- (length $2) ($0 ($1 $0))))))) $0 (lambda ($0 1))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (- (length (cdr $1)) ($0 1)))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda ($0 ($0 1)))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda ($0 ($0 (index 1 (range ($0 1))))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $1 (lambda (- (length $2) ($0 ($1 $0))))))) $0 (lambda ($0 ($0 1)))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (- (length (cdr $1)) ($0 ($0 1))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda ($0 ($0 ($0 1))))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda (length (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $1 $1)))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $1 (lambda (- (length $2) ($0 ($1 $0))))))) $0 (lambda ($0 ($0 ($0 1))))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda ($0 (length (cdr (cdr (cdr (cdr (cdr (cdr $1)))))))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda ($0 ($0 ($0 ($0 1)))))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda ($0 (length (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $1 $1))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '.'))",
          "logLikelihood": 0.0
        },
        {
          "program": "(lambda (cons (car $0) (#(cons '.') empty)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 ','))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 $0) ','))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 SPACE))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (cons (car $0) (map (lambda SPACE) (range 1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 LPAREN))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 $0) LPAREN))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 RPAREN))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $0 (lambda 1)) RPAREN))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) $0 '-'))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (cons (car $1) (cons $0 empty)))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 $0) '-'))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 (map (lambda $0) $1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') empty)))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $1 (lambda 1)))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 (#(lambda (lambda (map (lambda (index $0 $2)) (range ($0 (+ 1)))))) $1 (lambda 1)))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (cons (car $0) (#(cons '.') (cons (car $1) (#(cons '.') empty)))))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (fold $0 $0 (lambda (lambda (cons (car $3) (#(cons '.') (cons $1 (#(cons '.') empty)))))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 $0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (map (lambda $0) $0))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) empty)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) STRING) (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (cons LPAREN (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty $0 RPAREN)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (cons LPAREN (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty $0 RPAREN)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (#(lambda (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 $2))))) empty (cons LPAREN $0) RPAREN)) (map (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (fold (cdr $0) empty (lambda (lambda (fold $0 STRING (lambda (lambda (cdr $0)))))))))",
          "logLikelihood": 0.0
        }
      ]
    }
  ]
}