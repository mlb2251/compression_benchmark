Stitch mode: none
Will write compression messages to cm_out_dir:  compressionMessages
Compression backend will run for most 20 iterations
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Total number of candidates: 3296
Constructed version spaces and coalesced candidates in 17.2479s.
Timing point -1 right before normalizing: 18.68s.
Trimmed down the beam, have only 300 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 18.6822s.
Timing Comparison Point A (vspace+beam) (millis): 18682
Rewrote topK in 14.7751s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 14.7753s.
sanity check for timing comparison, should be same as comparison point: 33.4575s.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 33457
Initial score: -159.338924
Initial language score: 0.000000
Initial joint score: -159.338924 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 281.669ms.
Best MDL score: -155.994644 with (lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0)))))
Scored candidates with language and grammar in 220.38ms.
Best joint score: -155.994644 with (lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0)))))
Timing point 3 (all scoring): 506.938ms.
Improved score to -155.994644 (dScore=3.344280) w/ new primitive
	#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) : char -> char -> list(char) -> list(char)
rewrote all of the frontiers in 10.3976s.
Timing point 4 (rewrite final frontiers): 10.3979s.
Completed one step of memory consolidation in 44.3727s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) LPAREN RPAREN $0))
  (lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $2) $1 $0))))) SPACE LPAREN $0))
Total number of candidates: 2482
Constructed version spaces and coalesced candidates in 17.2705s.
Timing point -1 right before normalizing: 18.6586s.
Trimmed down the beam, have only 299 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 18.6613s.
Timing Comparison Point A (vspace+beam) (millis): 18661
Rewrote topK in 14.6956s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 14.6958s.
sanity check for timing comparison, should be same as comparison point: 33.3571s.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 33357
Initial score: -155.995332
Initial language score: 0.000000
Initial joint score: -155.995332 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 271.447ms.
Best MDL score: -152.260669 with (lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0))))))
Scored candidates with language and grammar in 211.588ms.
Best joint score: -152.260669 with (lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0))))))
Timing point 3 (all scoring): 490.09ms.
Improved score to -152.260669 (dScore=3.734663) w/ new primitive
	#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) : list(t0) -> list(t0) -> list(t0)
rewrote all of the frontiers in 10.5077s.
Timing point 4 (rewrite final frontiers): 10.5078s.
Completed one step of memory consolidation in 44.3564s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons '.' (cons '-' $0)))))
  (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 STRING))
Total number of candidates: 2384
Constructed version spaces and coalesced candidates in 16.443s.
Timing point -1 right before normalizing: 17.8958s.
Trimmed down the beam, have only 298 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 17.8995s.
Timing Comparison Point A (vspace+beam) (millis): 17899
Rewrote topK in 15.1002s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 15.1005s.
sanity check for timing comparison, should be same as comparison point: 33.0002s.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 33000
Initial score: -152.261258
Initial language score: 0.000000
Initial joint score: -152.261258 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 267.485ms.
Best MDL score: -152.038335 with (cons '.')
Scored candidates with language and grammar in 247.161ms.
Best joint score: -152.038335 with (cons '.')
Timing point 3 (all scoring): 530.644ms.
Improved score to -152.038335 (dScore=0.222924) w/ new primitive
	#(cons '.') : list(char) -> list(char)
rewrote all of the frontiers in 11.2687s.
Timing point 4 (rewrite final frontiers): 11.2688s.
Completed one step of memory consolidation in 44.8087s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (#(cons '.') (cons '-' $0)))))
  (lambda (lambda (cons (car $1) (#(cons '.') (cons (car $0) (#(cons '.') empty))))))
Total number of candidates: 1872
Constructed version spaces and coalesced candidates in 6.8677s.
Timing point -1 right before normalizing: 7.69555s.
Trimmed down the beam, have only 297 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 7.70078s.
Timing Comparison Point A (vspace+beam) (millis): 7700
Rewrote topK in 6.58305s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 6.58369s.
sanity check for timing comparison, should be same as comparison point: 14.2845s.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 14284
Initial score: -152.039173
Initial language score: 0.000000
Initial joint score: -152.039173 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 310.036ms.
Best MDL score: -155.177885 with (lambda (lambda (#(cons '.') (cons $1 $0))))
No improvement possible with MDL.
Scored candidates with language and grammar in 266.356ms.
Best joint score: -155.177885 with (lambda (lambda (#(cons '.') (cons $1 $0))))
Timing point 3 (all scoring): 593.458ms.
No improvement possible with joint score.
Completed one step of memory consolidation in 14.8821s.
completed ocaml compression in 2.47371m.
	Command being timed: "/scratch/mlbowers/proj/stitch/experiments/compression benches/text_text_ellisk_2019-01-24T21.53.45/bench000_it0.json"
	User time (seconds): 10.49
	System time (seconds): 0.52
	Percent of CPU this job got: 7%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 2:28.47
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 389132
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 421888
	Voluntary context switches: 374
	Involuntary context switches: 1146
	Swaps: 0
	File system inputs: 0
	File system outputs: 16
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
