{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": 0.0,
        "productions": [
            {
                "expression": "logo_epsA",
                "logProbability": 0.0
            },
            {
                "expression": "logo_ZA",
                "logProbability": 0.0
            },
            {
                "expression": "logo_UL",
                "logProbability": 0.0
            },
            {
                "expression": "logo_UA",
                "logProbability": 0.0
            },
            {
                "expression": "3",
                "logProbability": 0.0
            },
            {
                "expression": "logo_DIVA",
                "logProbability": 0.0
            },
            {
                "expression": "logo_epsL",
                "logProbability": 0.0
            },
            {
                "expression": "logo_MULA",
                "logProbability": 0.0
            },
            {
                "expression": "logo_SUBA",
                "logProbability": 0.0
            },
            {
                "expression": "logo_ADDA",
                "logProbability": 0.0
            },
            {
                "expression": "logo_MULL",
                "logProbability": 0.0
            },
            {
                "expression": "5",
                "logProbability": 0.0
            },
            {
                "expression": "4",
                "logProbability": 0.0
            },
            {
                "expression": "6",
                "logProbability": 0.0
            },
            {
                "expression": "logo_DIVL",
                "logProbability": 0.0
            },
            {
                "expression": "2",
                "logProbability": 0.0
            },
            {
                "expression": "7",
                "logProbability": 0.0
            },
            {
                "expression": "8",
                "logProbability": 0.0
            },
            {
                "expression": "logo_ZL",
                "logProbability": 0.0
            },
            {
                "expression": "logo_IFTY",
                "logProbability": 0.0
            },
            {
                "expression": "9",
                "logProbability": 0.0
            },
            {
                "expression": "0",
                "logProbability": 0.0
            },
            {
                "expression": "1",
                "logProbability": 0.0
            },
            {
                "expression": "logo_FWRT",
                "logProbability": 0.0
            },
            {
                "expression": "logo_forLoop",
                "logProbability": 0.0
            },
            {
                "expression": "logo_GETSET",
                "logProbability": 0.0
            },
            {
                "expression": "logo_PT",
                "logProbability": 0.0
            }
        ],
        "continuationType": {
            "constructor": "turtle",
            "arguments": []
        }
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "3-gon 1l slanted 8",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_MULA logo_epsA 5) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 3) $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_FWRT logo_ZL (logo_MULA logo_epsA 5) (logo_FWRT logo_UL (logo_SUBA (logo_DIVA logo_UA 3) (logo_MULA logo_epsA 5)) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "8-gon (/d 1d 2)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 2) (logo_MULA logo_epsA 5) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 9 (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 2) (logo_DIVA logo_UA 8) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "upwards",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL logo_UA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 4) (logo_FWRT logo_UL logo_ZA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "right angle epsilon",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_epsL (logo_DIVA logo_UA 4) (logo_FWRT logo_epsL logo_UA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_epsL (logo_DIVA logo_UA 4) (logo_FWRT logo_epsL logo_ZA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "line segment",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_UA $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Greek spiral slanted by 2pi/6",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0))) (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 6) $0)) (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA (logo_DIVA logo_UA 3) 4) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slanted line",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) (logo_FWRT (logo_MULL logo_UL 3) logo_ZA $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA 8) (logo_FWRT (logo_MULL logo_UL 3) logo_epsA $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Greek spiral 7",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Greek spiral 8",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_GETSET (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "smooth spiral 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 3) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 3) $0))) (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "smooth spiral 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_DIVA logo_UA 8) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 5) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "smooth spiral 4 slanted by 2pi/2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_ZL (logo_MULA logo_epsA 3) $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 4) $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_ZL (logo_MULA logo_epsA 5) $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA 4) $0))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "leaf iteration 1.1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_epsL (logo_DIVA logo_epsA 2) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_epsL (logo_DIVA logo_epsA 2) $0))) (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "left semicircle of size 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) logo_epsA $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) logo_epsA $0))) (logo_GETSET (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle of size 3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "right semicircle of size 4",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 5) (logo_SUBA logo_UA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 5) (logo_SUBA logo_ZA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "left semicircle of size 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 4) logo_epsA $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 5) logo_epsA $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle of size 5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 4) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 5) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "right semicircle of size 6",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 6) (logo_SUBA logo_UA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 6) (logo_SUBA logo_ZA logo_epsA) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "circle of size 6",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 6) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 6) logo_epsA $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "5 enclosed circles",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 6 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $5) logo_epsA $0))) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $5) logo_epsA $0))) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "1-semicircle sequence L=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) logo_epsA $0))) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) (logo_SUBA logo_UA logo_epsA) $0))) $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) logo_epsA $0))) (logo_GETSET (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL 3) (logo_SUBA logo_UA logo_epsA) $0))) $0)) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "row of 2 lines",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (logo_FWRT logo_UL logo_UA $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_FWRT logo_UL logo_ZA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) (logo_FWRT logo_UL logo_ZA $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "3 dashed lines of size (/d 1d 2)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 2) logo_UA (logo_PT (lambda (logo_FWRT logo_UL logo_UA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 2) logo_UA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "broken circle",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 3 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_epsL logo_epsA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 6 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_epsL logo_epsA $0))) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "row of 4 dashes",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (logo_DIVA logo_UA 4) $0)) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) (logo_DIVA logo_UA 4) $0)) (logo_FWRT logo_UL (logo_SUBA (logo_DIVA logo_UA 4) logo_UA) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "3-Greek snowflake",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $1) (logo_DIVA logo_UA 4) $0))) $0)) (logo_FWRT logo_ZL (logo_DIVA logo_UA 3) $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "4-row of squares",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $3) (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0)))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_UL $3) (logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0)))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "square of size 1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT logo_UL (logo_DIVA logo_UA 4) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "5-concentric squares",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "turtle",
                        "arguments": []
                    },
                    {
                        "constructor": "turtle",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 4 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $3) (logo_DIVA logo_UA 4) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $3) (logo_DIVA logo_UA 4) $0))) $0))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 0,
        "num_learned": 10,
        "new_grammar": {
            "logVariable": -0.527573,
            "productions": [
                {
                    "expression": "logo_epsA",
                    "logProbability": -0.302925
                },
                {
                    "expression": "logo_ZA",
                    "logProbability": -0.364406
                },
                {
                    "expression": "logo_UL",
                    "logProbability": -0.390072
                },
                {
                    "expression": "logo_UA",
                    "logProbability": -0.399096
                },
                {
                    "expression": "3",
                    "logProbability": -0.449609
                },
                {
                    "expression": "logo_DIVA",
                    "logProbability": -0.45422
                },
                {
                    "expression": "logo_epsL",
                    "logProbability": -0.488849
                },
                {
                    "expression": "logo_MULA",
                    "logProbability": -0.496105
                },
                {
                    "expression": "logo_SUBA",
                    "logProbability": -0.532176
                },
                {
                    "expression": "logo_ADDA",
                    "logProbability": -0.532609
                },
                {
                    "expression": "logo_MULL",
                    "logProbability": -0.540029
                },
                {
                    "expression": "5",
                    "logProbability": -0.61085
                },
                {
                    "expression": "4",
                    "logProbability": -0.642101
                },
                {
                    "expression": "6",
                    "logProbability": -0.649835
                },
                {
                    "expression": "logo_DIVL",
                    "logProbability": -0.65481
                },
                {
                    "expression": "2",
                    "logProbability": -0.66156
                },
                {
                    "expression": "7",
                    "logProbability": -0.672254
                },
                {
                    "expression": "8",
                    "logProbability": -0.690216
                },
                {
                    "expression": "logo_ZL",
                    "logProbability": -0.699172
                },
                {
                    "expression": "logo_IFTY",
                    "logProbability": -0.72057
                },
                {
                    "expression": "9",
                    "logProbability": -0.751261
                },
                {
                    "expression": "0",
                    "logProbability": -0.758587
                },
                {
                    "expression": "1",
                    "logProbability": -0.758587
                },
                {
                    "expression": "logo_FWRT",
                    "logProbability": -1.219156
                },
                {
                    "expression": "logo_forLoop",
                    "logProbability": -1.259151
                },
                {
                    "expression": "logo_GETSET",
                    "logProbability": -1.393696
                },
                {
                    "expression": "logo_PT",
                    "logProbability": -1.393917
                },
                {
                    "expression": "#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0))))))",
                    "logProbability": -1.202393
                },
                {
                    "expression": "#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4)))",
                    "logProbability": -1.245056
                },
                {
                    "expression": "#(lambda (logo_forLoop $0 (lambda (lambda (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1) $0)))))",
                    "logProbability": -1.302211
                },
                {
                    "expression": "#(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) logo_epsA (logo_MULL logo_epsL $2) $0)))))",
                    "logProbability": -1.302212
                },
                {
                    "expression": "#(lambda (logo_PT (lambda (logo_FWRT logo_UL $1 $0))))",
                    "logProbability": -1.332064
                },
                {
                    "expression": "#(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT (logo_MULL logo_epsL $1) (logo_MULA logo_epsA $2) $0)))))",
                    "logProbability": -1.332064
                },
                {
                    "expression": "#(#(lambda (lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT $2 $3 $0)))))) (logo_SUBA logo_UA logo_epsA))",
                    "logProbability": -1.332312
                },
                {
                    "expression": "#(logo_FWRT logo_ZL (logo_MULA logo_epsA 5))",
                    "logProbability": -1.349226
                },
                {
                    "expression": "#(lambda (logo_forLoop 7 (lambda (lambda ($2 (lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0) $1)))))))",
                    "logProbability": -1.362836
                },
                {
                    "expression": "#(lambda (lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop $2 ($3 (#(lambda (logo_FWRT $0 (logo_DIVA logo_UA 4))) (logo_MULL logo_UL $1))) $0))))))",
                    "logProbability": -1.362836
                }
            ],
            "continuationType": {
                "constructor": "turtle",
                "arguments": []
            }
        }
    }
}