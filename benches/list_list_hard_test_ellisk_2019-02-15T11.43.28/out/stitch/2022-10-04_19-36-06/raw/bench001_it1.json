{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.43.28/bench001_it1.json --max-arity=3 --threads=1 --iterations=2 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.43.28/out/stitch/2022-10-04_19-36-06/raw/bench001_it1.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.43.28/bench001_it1.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.43.28/out/stitch/2022-10-04_19-36-06/raw/bench001_it1.json",
    "iterations": 2,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 25380,
  "original": [
    "(lam (map (lam (+ $0 (+ 1 prev_dc_inv_0))) $0))",
    "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
    "(lam (fold $0 (cons (index prev_dc_inv_0 $0) empty) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (cons (car (cdr (cdr (cdr $0)))) empty) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (cons prev_dc_inv_0 empty) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (map (lam prev_dc_inv_0) (range 1)) (lam (lam (cons $1 $0)))))",
    "(lam (map (lam (eq? prev_dc_inv_0 $0)) $0))",
    "(lam (map (lam (eq? $0 prev_dc_inv_0)) $0))",
    "(lam (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
    "(lam (if (is-square (length $0)) (gt? (length $0) 0) (is-prime (car $0))))",
    "(lam (car $0))",
    "(lam (index 0 $0))",
    "(lam (car (cdr (cdr (cdr (cdr $0))))))",
    "(lam (index 1 (cdr (cdr (cdr $0)))))",
    "(lam (is-prime (+ prev_dc_inv_0 (index (length $0) (cons 0 $0)))))",
    "(lam (is-prime (+ (index (length $0) (cons 0 $0)) prev_dc_inv_0)))",
    "(lam (eq? 1 (fold $0 1 (lam (lam (- $0 (mod $1 prev_dc_inv_0)))))))",
    "(lam (gt? (fold $0 1 (lam (lam (- $0 (mod $1 prev_dc_inv_0))))) 0))",
    "(lam (index (length (cdr $0)) $0))",
    "(lam (index (length $0) (cons prev_dc_inv_0 $0)))",
    "(lam (length $0))",
    "(lam (length (range (length $0))))",
    "(lam (map (lam (mod $0 (+ prev_dc_inv_0 1))) $0))",
    "(lam (map (lam (mod $0 (+ 1 prev_dc_inv_0))) $0))",
    "(lam (map (lam (+ $0 $0)) $0))",
    "(lam (map (lam $0) (map (lam (+ $0 $0)) $0)))",
    "(lam (cons (car (cdr $0)) $0))",
    "(lam (cons (index 1 $0) $0))",
    "(lam (map (lam (index $0 (cdr $1))) (range prev_dc_inv_0)))",
    "(lam (map (lam (index $0 $1)) (cdr (range (+ 1 prev_dc_inv_0)))))",
    "(lam (cdr (cdr (map (lam (index $0 $1)) (range (+ prev_dc_inv_0 prev_dc_inv_0))))))",
    "(lam (map (lam (index $0 $1)) (cdr (cdr (range (+ prev_dc_inv_0 prev_dc_inv_0))))))",
    "(lam (cdr $0))",
    "(lam (cdr (map (lam $0) $0)))",
    "(lam (map (lam (index $0 $1)) (range (+ 1 1))))",
    "(lam (map (lam (index $0 $1)) (range (- prev_dc_inv_0 1))))"
  ],
  "invs": [
    {
      "body": "(map (lam (index $0 #1)) (range #0))",
      "dreamcoder": "#(lambda (lambda (map (lambda (index $0 $1)) (range $1))))",
      "arity": 2,
      "name": "fn_1",
      "rewritten": [
        "(lam (map (lam (+ $0 (+ 1 prev_dc_inv_0))) $0))",
        "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
        "(lam (fold $0 (cons (index prev_dc_inv_0 $0) empty) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (cons (car (cdr (cdr (cdr $0)))) empty) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (cons prev_dc_inv_0 empty) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (map (lam prev_dc_inv_0) (range 1)) (lam (lam (cons $1 $0)))))",
        "(lam (map (lam (eq? prev_dc_inv_0 $0)) $0))",
        "(lam (map (lam (eq? $0 prev_dc_inv_0)) $0))",
        "(lam (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
        "(lam (if (is-square (length $0)) (gt? (length $0) 0) (is-prime (car $0))))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (car (cdr (cdr (cdr (cdr $0))))))",
        "(lam (index 1 (cdr (cdr (cdr $0)))))",
        "(lam (is-prime (+ prev_dc_inv_0 (index (length $0) (cons 0 $0)))))",
        "(lam (is-prime (+ (index (length $0) (cons 0 $0)) prev_dc_inv_0)))",
        "(lam (eq? 1 (fold $0 1 (lam (lam (- $0 (mod $1 prev_dc_inv_0)))))))",
        "(lam (gt? (fold $0 1 (lam (lam (- $0 (mod $1 prev_dc_inv_0))))) 0))",
        "(lam (index (length (cdr $0)) $0))",
        "(lam (index (length $0) (cons prev_dc_inv_0 $0)))",
        "(lam (length $0))",
        "(lam (length (range (length $0))))",
        "(lam (map (lam (mod $0 (+ prev_dc_inv_0 1))) $0))",
        "(lam (map (lam (mod $0 (+ 1 prev_dc_inv_0))) $0))",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(lam (map (lam $0) (map (lam (+ $0 $0)) $0)))",
        "(lam (cons (car (cdr $0)) $0))",
        "(lam (cons (index 1 $0) $0))",
        "(lam (fn_1 prev_dc_inv_0 (cdr $0)))",
        "(lam (map (lam (index $0 $1)) (cdr (range (+ 1 prev_dc_inv_0)))))",
        "(lam (cdr (cdr (fn_1 (+ prev_dc_inv_0 prev_dc_inv_0) $0))))",
        "(lam (map (lam (index $0 $1)) (cdr (cdr (range (+ prev_dc_inv_0 prev_dc_inv_0))))))",
        "(lam (cdr $0))",
        "(lam (cdr (map (lam $0) $0)))",
        "(lam (fn_1 (+ 1 1) $0))",
        "(lam (fn_1 (- prev_dc_inv_0 1) $0))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (+ $0 (+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (fold $0 (cons (index #(+ 1 (+ 1 1)) $0) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (cons (car (cdr (cdr (cdr $0)))) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (cons #(+ 1 (+ 1 1)) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (map (lambda #(+ 1 (+ 1 1))) (range 1)) (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda (eq? #(+ 1 (+ 1 1)) $0)) $0))",
        "(lambda (map (lambda (eq? $0 #(+ 1 (+ 1 1)))) $0))",
        "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
        "(lambda (if (is-square (length $0)) (gt? (length $0) 0) (is-prime (car $0))))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (car (cdr (cdr (cdr (cdr $0))))))",
        "(lambda (index 1 (cdr (cdr (cdr $0)))))",
        "(lambda (is-prime (+ #(+ 1 (+ 1 1)) (index (length $0) (cons 0 $0)))))",
        "(lambda (is-prime (+ (index (length $0) (cons 0 $0)) #(+ 1 (+ 1 1)))))",
        "(lambda (eq? 1 (fold $0 1 (lambda (lambda (- $0 (mod $1 #(+ 1 (+ 1 1)))))))))",
        "(lambda (gt? (fold $0 1 (lambda (lambda (- $0 (mod $1 #(+ 1 (+ 1 1))))))) 0))",
        "(lambda (index (length (cdr $0)) $0))",
        "(lambda (index (length $0) (cons #(+ 1 (+ 1 1)) $0)))",
        "(lambda (length $0))",
        "(lambda (length (range (length $0))))",
        "(lambda (map (lambda (mod $0 (+ #(+ 1 (+ 1 1)) 1))) $0))",
        "(lambda (map (lambda (mod $0 (+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(lambda (map (lambda $0) (map (lambda (+ $0 $0)) $0)))",
        "(lambda (cons (car (cdr $0)) $0))",
        "(lambda (cons (index 1 $0) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) #(+ 1 (+ 1 1)) (cdr $0)))",
        "(lambda (map (lambda (index $0 $1)) (cdr (range (+ 1 #(+ 1 (+ 1 1)))))))",
        "(lambda (cdr (cdr (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ #(+ 1 (+ 1 1)) #(+ 1 (+ 1 1))) $0))))",
        "(lambda (map (lambda (index $0 $1)) (cdr (cdr (range (+ #(+ 1 (+ 1 1)) #(+ 1 (+ 1 1))))))))",
        "(lambda (cdr $0))",
        "(lambda (cdr (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (+ 1 1) $0))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $1)) (range $1)))) (- #(+ 1 (+ 1 1)) 1) $0))"
      ],
      "utility": 506,
      "expected_cost": 11120,
      "final_cost": 11120,
      "multiplier": 1.0820143884892086,
      "multiplier_wrt_orig": 1.0820143884892086,
      "num_uses": 4,
      "uses": [
        {
          "fn_1 (+ 1 1) $0": "(map (lam (index $0 $1)) (range (+ 1 1)))"
        },
        {
          "fn_1 (+ prev_dc_inv_0 prev_dc_inv_0) $0": "(map (lam (index $0 $1)) (range (+ prev_dc_inv_0 prev_dc_inv_0)))"
        },
        {
          "fn_1 (- prev_dc_inv_0 1) $0": "(map (lam (index $0 $1)) (range (- prev_dc_inv_0 1)))"
        },
        {
          "fn_1 prev_dc_inv_0 (cdr $0)": "(map (lam (index $0 (cdr $1))) (range prev_dc_inv_0))"
        }
      ]
    },
    {
      "body": "(lam (map (lam (#0 $0 (+ 1 prev_dc_inv_0))) $0))",
      "dreamcoder": "#(lambda (lambda (map (lambda ($2 $0 (+ 1 #(+ 1 (+ 1 1))))) $0)))",
      "arity": 1,
      "name": "fn_2",
      "rewritten": [
        "(fn_2 +)",
        "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
        "(lam (fold $0 (cons (index prev_dc_inv_0 $0) empty) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (cons (car (cdr (cdr (cdr $0)))) empty) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (cons prev_dc_inv_0 empty) (lam (lam (cons $1 $0)))))",
        "(lam (fold $0 (map (lam prev_dc_inv_0) (range 1)) (lam (lam (cons $1 $0)))))",
        "(lam (map (lam (eq? prev_dc_inv_0 $0)) $0))",
        "(lam (map (lam (eq? $0 prev_dc_inv_0)) $0))",
        "(lam (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
        "(lam (if (is-square (length $0)) (gt? (length $0) 0) (is-prime (car $0))))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (car (cdr (cdr (cdr (cdr $0))))))",
        "(lam (index 1 (cdr (cdr (cdr $0)))))",
        "(lam (is-prime (+ prev_dc_inv_0 (index (length $0) (cons 0 $0)))))",
        "(lam (is-prime (+ (index (length $0) (cons 0 $0)) prev_dc_inv_0)))",
        "(lam (eq? 1 (fold $0 1 (lam (lam (- $0 (mod $1 prev_dc_inv_0)))))))",
        "(lam (gt? (fold $0 1 (lam (lam (- $0 (mod $1 prev_dc_inv_0))))) 0))",
        "(lam (index (length (cdr $0)) $0))",
        "(lam (index (length $0) (cons prev_dc_inv_0 $0)))",
        "(lam (length $0))",
        "(lam (length (range (length $0))))",
        "(lam (map (lam (mod $0 (+ prev_dc_inv_0 1))) $0))",
        "(fn_2 mod)",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(lam (map (lam $0) (map (lam (+ $0 $0)) $0)))",
        "(lam (cons (car (cdr $0)) $0))",
        "(lam (cons (index 1 $0) $0))",
        "(lam (fn_1 prev_dc_inv_0 (cdr $0)))",
        "(lam (map (lam (index $0 $1)) (cdr (range (+ 1 prev_dc_inv_0)))))",
        "(lam (cdr (cdr (fn_1 (+ prev_dc_inv_0 prev_dc_inv_0) $0))))",
        "(lam (map (lam (index $0 $1)) (cdr (cdr (range (+ prev_dc_inv_0 prev_dc_inv_0))))))",
        "(lam (cdr $0))",
        "(lam (cdr (map (lam $0) $0)))",
        "(lam (fn_1 (+ 1 1) $0))",
        "(lam (fn_1 (- prev_dc_inv_0 1) $0))"
      ],
      "rewritten_dreamcoder": [
        "(#(lambda (lambda (map (lambda ($2 $0 (+ 1 #(+ 1 (+ 1 1))))) $0))) +)",
        "(lambda (map (lambda (+ 1 (+ $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (fold $0 (cons (index #(+ 1 (+ 1 1)) $0) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (cons (car (cdr (cdr (cdr $0)))) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (cons #(+ 1 (+ 1 1)) empty) (lambda (lambda (cons $1 $0)))))",
        "(lambda (fold $0 (map (lambda #(+ 1 (+ 1 1))) (range 1)) (lambda (lambda (cons $1 $0)))))",
        "(lambda (map (lambda (eq? #(+ 1 (+ 1 1)) $0)) $0))",
        "(lambda (map (lambda (eq? $0 #(+ 1 (+ 1 1)))) $0))",
        "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
        "(lambda (if (is-square (length $0)) (gt? (length $0) 0) (is-prime (car $0))))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (car (cdr (cdr (cdr (cdr $0))))))",
        "(lambda (index 1 (cdr (cdr (cdr $0)))))",
        "(lambda (is-prime (+ #(+ 1 (+ 1 1)) (index (length $0) (cons 0 $0)))))",
        "(lambda (is-prime (+ (index (length $0) (cons 0 $0)) #(+ 1 (+ 1 1)))))",
        "(lambda (eq? 1 (fold $0 1 (lambda (lambda (- $0 (mod $1 #(+ 1 (+ 1 1)))))))))",
        "(lambda (gt? (fold $0 1 (lambda (lambda (- $0 (mod $1 #(+ 1 (+ 1 1))))))) 0))",
        "(lambda (index (length (cdr $0)) $0))",
        "(lambda (index (length $0) (cons #(+ 1 (+ 1 1)) $0)))",
        "(lambda (length $0))",
        "(lambda (length (range (length $0))))",
        "(lambda (map (lambda (mod $0 (+ #(+ 1 (+ 1 1)) 1))) $0))",
        "(#(lambda (lambda (map (lambda ($2 $0 (+ 1 #(+ 1 (+ 1 1))))) $0))) mod)",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(lambda (map (lambda $0) (map (lambda (+ $0 $0)) $0)))",
        "(lambda (cons (car (cdr $0)) $0))",
        "(lambda (cons (index 1 $0) $0))",
        "(lambda (fn_1 #(+ 1 (+ 1 1)) (cdr $0)))",
        "(lambda (map (lambda (index $0 $1)) (cdr (range (+ 1 #(+ 1 (+ 1 1)))))))",
        "(lambda (cdr (cdr (fn_1 (+ #(+ 1 (+ 1 1)) #(+ 1 (+ 1 1))) $0))))",
        "(lambda (map (lambda (index $0 $1)) (cdr (cdr (range (+ #(+ 1 (+ 1 1)) #(+ 1 (+ 1 1))))))))",
        "(lambda (cdr $0))",
        "(lambda (cdr (map (lambda $0) $0)))",
        "(lambda (fn_1 (+ 1 1) $0))",
        "(lambda (fn_1 (- #(+ 1 (+ 1 1)) 1) $0))"
      ],
      "utility": 406,
      "expected_cost": 10106,
      "final_cost": 10106,
      "multiplier": 1.1003364338017019,
      "multiplier_wrt_orig": 1.190579853552345,
      "num_uses": 2,
      "uses": [
        {
          "fn_2 +": "(lam (map (lam (+ $0 (+ 1 prev_dc_inv_0))) $0))"
        },
        {
          "fn_2 mod": "(lam (map (lam (mod $0 (+ 1 prev_dc_inv_0))) $0))"
        }
      ]
    }
  ]
}