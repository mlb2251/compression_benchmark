{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.43.28/bench000_it0.json --max-arity=3 --threads=1 --iterations=1 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.43.28/out/stitch/2022-10-04_19-36-06/raw/bench000_it0.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.43.28/bench000_it0.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.43.28/out/stitch/2022-10-04_19-36-06/raw/bench000_it0.json",
    "iterations": 1,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 13746,
  "original": [
    "(lam (map (lam (+ $0 (+ 1 (+ 1 (+ 1 1))))) $0))",
    "(lam (map (lam (+ 1 (+ $0 (+ 1 (+ 1 1))))) $0))",
    "(lam (map (lam (eq? $0 (+ 1 (+ 1 1)))) $0))",
    "(lam (map (lam (eq? (+ 1 (+ 1 1)) $0)) $0))",
    "(lam (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
    "(lam (if (is-square (length $0)) (gt? (length $0) 0) (is-prime (car $0))))",
    "(lam (car $0))",
    "(lam (index 0 $0))",
    "(lam (car (cdr (cdr (cdr (cdr $0))))))",
    "(lam (index 1 (cdr (cdr (cdr $0)))))",
    "(lam (is-prime (fold $0 (+ 1 1) (lam (lam (- $0 (mod $1 (+ $0 1))))))))",
    "(lam (eq? 1 (fold $0 1 (lam (lam (- $0 (mod $1 (+ 1 (+ 1 1)))))))))",
    "(lam (length $0))",
    "(lam (length (range (length $0))))",
    "(lam (map (lam (index $0 (cdr $1))) (range (+ 1 (+ 1 1)))))",
    "(lam (map (lam (index $0 $1)) (cdr (range (+ 1 (+ 1 (+ 1 1)))))))"
  ],
  "invs": [
    {
      "body": "(+ 1 (+ 1 1))",
      "dreamcoder": "#(+ 1 (+ 1 1))",
      "arity": 0,
      "name": "fn_0",
      "rewritten": [
        "(lam (map (lam (+ $0 (+ 1 fn_0))) $0))",
        "(lam (map (lam (+ 1 (+ $0 fn_0))) $0))",
        "(lam (map (lam (eq? $0 fn_0)) $0))",
        "(lam (map (lam (eq? fn_0 $0)) $0))",
        "(lam (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
        "(lam (if (is-square (length $0)) (gt? (length $0) 0) (is-prime (car $0))))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (car (cdr (cdr (cdr (cdr $0))))))",
        "(lam (index 1 (cdr (cdr (cdr $0)))))",
        "(lam (is-prime (fold $0 (+ 1 1) (lam (lam (- $0 (mod $1 (+ $0 1))))))))",
        "(lam (eq? 1 (fold $0 1 (lam (lam (- $0 (mod $1 fn_0)))))))",
        "(lam (length $0))",
        "(lam (length (range (length $0))))",
        "(lam (map (lam (index $0 (cdr $1))) (range fn_0)))",
        "(lam (map (lam (index $0 $1)) (cdr (range (+ 1 fn_0)))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (+ $0 (+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (map (lambda (eq? $0 #(+ 1 (+ 1 1)))) $0))",
        "(lambda (map (lambda (eq? #(+ 1 (+ 1 1)) $0)) $0))",
        "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
        "(lambda (if (is-square (length $0)) (gt? (length $0) 0) (is-prime (car $0))))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (car (cdr (cdr (cdr (cdr $0))))))",
        "(lambda (index 1 (cdr (cdr (cdr $0)))))",
        "(lambda (is-prime (fold $0 (+ 1 1) (lambda (lambda (- $0 (mod $1 (+ $0 1))))))))",
        "(lambda (eq? 1 (fold $0 1 (lambda (lambda (- $0 (mod $1 #(+ 1 (+ 1 1)))))))))",
        "(lambda (length $0))",
        "(lambda (length (range (length $0))))",
        "(lambda (map (lambda (index $0 (cdr $1))) (range #(+ 1 (+ 1 1)))))",
        "(lambda (map (lambda (index $0 $1)) (cdr (range (+ 1 #(+ 1 (+ 1 1)))))))"
      ],
      "utility": 1011,
      "expected_cost": 5055,
      "final_cost": 5055,
      "multiplier": 1.2997032640949555,
      "multiplier_wrt_orig": 1.2997032640949555,
      "num_uses": 7,
      "uses": [
        {
          "fn_0 ": "(+ 1 (+ 1 1))"
        }
      ]
    }
  ]
}