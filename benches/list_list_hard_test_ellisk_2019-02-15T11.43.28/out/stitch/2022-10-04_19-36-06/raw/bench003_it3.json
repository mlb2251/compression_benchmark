{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.43.28/bench003_it3.json --max-arity=3 --threads=1 --iterations=1 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.43.28/out/stitch/2022-10-04_19-36-06/raw/bench003_it3.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.43.28/bench003_it3.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.43.28/out/stitch/2022-10-04_19-36-06/raw/bench003_it3.json",
    "iterations": 1,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 43876,
  "original": [
    "(lam (map (lam (+ $0 (+ 1 prev_dc_inv_0))) $0))",
    "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
    "(lam (prev_dc_inv_3 $0 (index prev_dc_inv_0 $0)))",
    "(lam (prev_dc_inv_3 $0 (car (cdr (cdr (cdr $0))))))",
    "(lam (prev_dc_inv_3 $0 prev_dc_inv_0))",
    "(lam (fold $0 (map (lam prev_dc_inv_0) (range 1)) (lam (lam (cons $1 $0)))))",
    "(lam (prev_dc_inv_3 $0 (+ prev_dc_inv_0 1)))",
    "(lam (prev_dc_inv_3 $0 (+ 1 prev_dc_inv_0)))",
    "(lam (map (lam (eq? prev_dc_inv_0 $0)) $0))",
    "(lam (map (lam (eq? $0 prev_dc_inv_0)) $0))",
    "(lam (prev_dc_inv_1 prev_dc_inv_0 (map (lam (+ 1 $0)) $0)))",
    "(lam (map (lam (mod (+ $0 1) prev_dc_inv_0)) $0))",
    "(lam (map (lam (- 1 $0)) $0))",
    "(lam (map (lam $0) (map (lam (- 1 $0)) $0)))",
    "(lam (cdr (cdr (cdr $0))))",
    "(lam (cdr (cdr (cdr (map (lam $0) $0)))))",
    "(lam (cdr (cdr (cdr (cdr (cdr $0))))))",
    "(lam (cdr (cdr (cdr (cdr (map (lam $0) (cdr $0)))))))",
    "(lam (is-square (+ 1 (mod (car $0) (index (length (cdr (cdr $0))) $0)))))",
    "(lam (is-square (* prev_dc_inv_0 (mod (car $0) (index (length (cdr (cdr $0))) $0)))))",
    "(lam (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
    "(lam (if (is-square (length $0)) (gt? (length $0) 0) (is-prime (car $0))))",
    "(lam (car $0))",
    "(lam (index 0 $0))",
    "(lam (index 1 (cdr (cdr (cdr $0)))))",
    "(lam (car (cdr (cdr (cdr (cdr $0))))))",
    "(lam (is-prime (+ prev_dc_inv_0 (index (length $0) (cons 0 $0)))))",
    "(lam (is-prime (+ (index (length $0) (cons 0 $0)) prev_dc_inv_0)))",
    "(lam (eq? 1 (fold $0 1 (lam (lam (- $0 (mod $1 prev_dc_inv_0)))))))",
    "(lam (gt? (fold $0 1 (lam (lam (- $0 (mod $1 prev_dc_inv_0))))) 0))",
    "(lam (index (length (cdr $0)) $0))",
    "(lam (index (- (length $0) 1) $0))",
    "(lam (length $0))",
    "(lam (length (range (length $0))))",
    "(lam (prev_dc_inv_1 (+ 1 1) $0))",
    "(lam (prev_dc_inv_1 (- prev_dc_inv_0 1) $0))",
    "(lam (prev_dc_inv_1 prev_dc_inv_0 $0))",
    "(lam (prev_dc_inv_1 prev_dc_inv_0 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_1 (+ prev_dc_inv_0 1) $0))",
    "(lam (prev_dc_inv_1 (+ 1 prev_dc_inv_0) $0))",
    "(lam (map (lam (+ $0 $0)) $0))",
    "(lam (map (lam $0) (map (lam (+ $0 $0)) $0)))",
    "(lam (prev_dc_inv_2 $0 (length (cdr $0))))",
    "(lam (prev_dc_inv_2 $0 (- (length $0) 1)))",
    "(lam (cons (index 1 $0) $0))",
    "(lam (cons (car (cdr $0)) $0))",
    "(lam (cons (index prev_dc_inv_0 $0) $0))",
    "(lam (index prev_dc_inv_0 (map (lam (cons $0 $1)) $0)))",
    "(lam (fold $0 empty (lam (lam (prev_dc_inv_3 $0 $1)))))",
    "(lam (fold $0 $0 (lam (lam (prev_dc_inv_3 (cdr $0) $1)))))",
    "(lam (fold (cdr (cdr (cdr (cdr (cdr $0))))) $0 (lam (lam (cdr (prev_dc_inv_3 $0 (car $0)))))))",
    "(lam (cdr (prev_dc_inv_2 $0 prev_dc_inv_0)))",
    "(lam (prev_dc_inv_2 (cdr $0) (+ 1 1)))",
    "(lam (prev_dc_inv_2 (cdr $0) prev_dc_inv_0))",
    "(lam (map (lam (index $0 $1)) (cdr (range (+ 1 prev_dc_inv_0)))))",
    "(lam (cdr (cdr (prev_dc_inv_2 $0 (+ prev_dc_inv_0 prev_dc_inv_0)))))",
    "(lam (prev_dc_inv_2 (cdr (cdr $0)) (+ prev_dc_inv_0 1)))",
    "(lam (cons (index prev_dc_inv_0 $0) empty))",
    "(lam (prev_dc_inv_3 empty (index prev_dc_inv_0 $0)))",
    "(lam (cdr $0))",
    "(lam (cdr (map (lam $0) $0)))",
    "(lam (prev_dc_inv_2 $0 (+ 1 1)))",
    "(lam (prev_dc_inv_2 $0 (- prev_dc_inv_0 1)))",
    "(lam (+ 1 (fold $0 prev_dc_inv_0 (lam (lam (+ $0 (length (range (- $1 $0)))))))))",
    "(lam (+ 1 (fold $0 prev_dc_inv_0 (lam (lam (+ $1 (length (range (- $0 $1)))))))))",
    "(lam (fold $0 empty (lam (lam (fold (range $1) $0 (lam (lam (cons $3 $2))))))))",
    "(lam (fold $0 empty (lam (lam (car (prev_dc_inv_3 (map (lam (cons $2 $1)) (range $1)) $0))))))"
  ],
  "invs": [
    {
      "body": "(cdr (cdr #0))",
      "dreamcoder": "#(lambda (cdr (cdr $0)))",
      "arity": 1,
      "name": "fn_4",
      "rewritten": [
        "(lam (map (lam (+ $0 (+ 1 prev_dc_inv_0))) $0))",
        "(lam (map (lam (+ 1 (+ $0 prev_dc_inv_0))) $0))",
        "(lam (prev_dc_inv_3 $0 (index prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_3 $0 (car (cdr (fn_4 $0)))))",
        "(lam (prev_dc_inv_3 $0 prev_dc_inv_0))",
        "(lam (fold $0 (map (lam prev_dc_inv_0) (range 1)) (lam (lam (cons $1 $0)))))",
        "(lam (prev_dc_inv_3 $0 (+ prev_dc_inv_0 1)))",
        "(lam (prev_dc_inv_3 $0 (+ 1 prev_dc_inv_0)))",
        "(lam (map (lam (eq? prev_dc_inv_0 $0)) $0))",
        "(lam (map (lam (eq? $0 prev_dc_inv_0)) $0))",
        "(lam (prev_dc_inv_1 prev_dc_inv_0 (map (lam (+ 1 $0)) $0)))",
        "(lam (map (lam (mod (+ $0 1) prev_dc_inv_0)) $0))",
        "(lam (map (lam (- 1 $0)) $0))",
        "(lam (map (lam $0) (map (lam (- 1 $0)) $0)))",
        "(lam (cdr (fn_4 $0)))",
        "(lam (cdr (fn_4 (map (lam $0) $0))))",
        "(lam (cdr (fn_4 (fn_4 $0))))",
        "(lam (fn_4 (fn_4 (map (lam $0) (cdr $0)))))",
        "(lam (is-square (+ 1 (mod (car $0) (index (length (fn_4 $0)) $0)))))",
        "(lam (is-square (* prev_dc_inv_0 (mod (car $0) (index (length (fn_4 $0)) $0)))))",
        "(lam (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
        "(lam (if (is-square (length $0)) (gt? (length $0) 0) (is-prime (car $0))))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (index 1 (cdr (fn_4 $0))))",
        "(lam (car (fn_4 (fn_4 $0))))",
        "(lam (is-prime (+ prev_dc_inv_0 (index (length $0) (cons 0 $0)))))",
        "(lam (is-prime (+ (index (length $0) (cons 0 $0)) prev_dc_inv_0)))",
        "(lam (eq? 1 (fold $0 1 (lam (lam (- $0 (mod $1 prev_dc_inv_0)))))))",
        "(lam (gt? (fold $0 1 (lam (lam (- $0 (mod $1 prev_dc_inv_0))))) 0))",
        "(lam (index (length (cdr $0)) $0))",
        "(lam (index (- (length $0) 1) $0))",
        "(lam (length $0))",
        "(lam (length (range (length $0))))",
        "(lam (prev_dc_inv_1 (+ 1 1) $0))",
        "(lam (prev_dc_inv_1 (- prev_dc_inv_0 1) $0))",
        "(lam (prev_dc_inv_1 prev_dc_inv_0 $0))",
        "(lam (prev_dc_inv_1 prev_dc_inv_0 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 (+ prev_dc_inv_0 1) $0))",
        "(lam (prev_dc_inv_1 (+ 1 prev_dc_inv_0) $0))",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(lam (map (lam $0) (map (lam (+ $0 $0)) $0)))",
        "(lam (prev_dc_inv_2 $0 (length (cdr $0))))",
        "(lam (prev_dc_inv_2 $0 (- (length $0) 1)))",
        "(lam (cons (index 1 $0) $0))",
        "(lam (cons (car (cdr $0)) $0))",
        "(lam (cons (index prev_dc_inv_0 $0) $0))",
        "(lam (index prev_dc_inv_0 (map (lam (cons $0 $1)) $0)))",
        "(lam (fold $0 empty (lam (lam (prev_dc_inv_3 $0 $1)))))",
        "(lam (fold $0 $0 (lam (lam (prev_dc_inv_3 (cdr $0) $1)))))",
        "(lam (fold (cdr (fn_4 (fn_4 $0))) $0 (lam (lam (cdr (prev_dc_inv_3 $0 (car $0)))))))",
        "(lam (cdr (prev_dc_inv_2 $0 prev_dc_inv_0)))",
        "(lam (prev_dc_inv_2 (cdr $0) (+ 1 1)))",
        "(lam (prev_dc_inv_2 (cdr $0) prev_dc_inv_0))",
        "(lam (map (lam (index $0 $1)) (cdr (range (+ 1 prev_dc_inv_0)))))",
        "(lam (fn_4 (prev_dc_inv_2 $0 (+ prev_dc_inv_0 prev_dc_inv_0))))",
        "(lam (prev_dc_inv_2 (fn_4 $0) (+ prev_dc_inv_0 1)))",
        "(lam (cons (index prev_dc_inv_0 $0) empty))",
        "(lam (prev_dc_inv_3 empty (index prev_dc_inv_0 $0)))",
        "(lam (cdr $0))",
        "(lam (cdr (map (lam $0) $0)))",
        "(lam (prev_dc_inv_2 $0 (+ 1 1)))",
        "(lam (prev_dc_inv_2 $0 (- prev_dc_inv_0 1)))",
        "(lam (+ 1 (fold $0 prev_dc_inv_0 (lam (lam (+ $0 (length (range (- $1 $0)))))))))",
        "(lam (+ 1 (fold $0 prev_dc_inv_0 (lam (lam (+ $1 (length (range (- $0 $1)))))))))",
        "(lam (fold $0 empty (lam (lam (fold (range $1) $0 (lam (lam (cons $3 $2))))))))",
        "(lam (fold $0 empty (lam (lam (car (prev_dc_inv_3 (map (lam (cons $2 $1)) (range $1)) $0))))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (+ $0 (+ 1 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (map (lambda (+ 1 (+ $0 #(+ 1 (+ 1 1))))) $0))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (index #(+ 1 (+ 1 1)) $0)))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (car (cdr (#(lambda (cdr (cdr $0))) $0)))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 #(+ 1 (+ 1 1))))",
        "(lambda (fold $0 (map (lambda #(+ 1 (+ 1 1))) (range 1)) (lambda (lambda (cons $1 $0)))))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (+ #(+ 1 (+ 1 1)) 1)))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (+ 1 #(+ 1 (+ 1 1)))))",
        "(lambda (map (lambda (eq? #(+ 1 (+ 1 1)) $0)) $0))",
        "(lambda (map (lambda (eq? $0 #(+ 1 (+ 1 1)))) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) (map (lambda (+ 1 $0)) $0)))",
        "(lambda (map (lambda (mod (+ $0 1) #(+ 1 (+ 1 1)))) $0))",
        "(lambda (map (lambda (- 1 $0)) $0))",
        "(lambda (map (lambda $0) (map (lambda (- 1 $0)) $0)))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) $0)))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) (map (lambda $0) $0))))",
        "(lambda (cdr (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) (map (lambda $0) (cdr $0)))))",
        "(lambda (is-square (+ 1 (mod (car $0) (index (length (#(lambda (cdr (cdr $0))) $0)) $0)))))",
        "(lambda (is-square (* #(+ 1 (+ 1 1)) (mod (car $0) (index (length (#(lambda (cdr (cdr $0))) $0)) $0)))))",
        "(lambda (if (is-prime (length $0)) (is-prime (car $0)) (gt? (length $0) 0)))",
        "(lambda (if (is-square (length $0)) (gt? (length $0) 0) (is-prime (car $0))))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (index 1 (cdr (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (car (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))))",
        "(lambda (is-prime (+ #(+ 1 (+ 1 1)) (index (length $0) (cons 0 $0)))))",
        "(lambda (is-prime (+ (index (length $0) (cons 0 $0)) #(+ 1 (+ 1 1)))))",
        "(lambda (eq? 1 (fold $0 1 (lambda (lambda (- $0 (mod $1 #(+ 1 (+ 1 1)))))))))",
        "(lambda (gt? (fold $0 1 (lambda (lambda (- $0 (mod $1 #(+ 1 (+ 1 1))))))) 0))",
        "(lambda (index (length (cdr $0)) $0))",
        "(lambda (index (- (length $0) 1) $0))",
        "(lambda (length $0))",
        "(lambda (length (range (length $0))))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (+ 1 1) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (- #(+ 1 (+ 1 1)) 1) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) #(+ 1 (+ 1 1)) (map (lambda $0) $0)))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (+ #(+ 1 (+ 1 1)) 1) $0))",
        "(lambda (#(lambda (map (lambda (mod $0 $1)))) (+ 1 #(+ 1 (+ 1 1))) $0))",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(lambda (map (lambda $0) (map (lambda (+ $0 $0)) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (length (cdr $0))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (- (length $0) 1)))",
        "(lambda (cons (index 1 $0) $0))",
        "(lambda (cons (car (cdr $0)) $0))",
        "(lambda (cons (index #(+ 1 (+ 1 1)) $0) $0))",
        "(lambda (index #(+ 1 (+ 1 1)) (map (lambda (cons $0 $1)) $0)))",
        "(lambda (fold $0 empty (lambda (lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 $1)))))",
        "(lambda (fold $0 $0 (lambda (lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) (cdr $0) $1)))))",
        "(lambda (fold (cdr (#(lambda (cdr (cdr $0))) (#(lambda (cdr (cdr $0))) $0))) $0 (lambda (lambda (cdr (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) $0 (car $0)))))))",
        "(lambda (cdr (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 #(+ 1 (+ 1 1)))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (cdr $0) (+ 1 1)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (cdr $0) #(+ 1 (+ 1 1))))",
        "(lambda (map (lambda (index $0 $1)) (cdr (range (+ 1 #(+ 1 (+ 1 1)))))))",
        "(lambda (#(lambda (cdr (cdr $0))) (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ #(+ 1 (+ 1 1)) #(+ 1 (+ 1 1))))))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) (#(lambda (cdr (cdr $0))) $0) (+ #(+ 1 (+ 1 1)) 1)))",
        "(lambda (cons (index #(+ 1 (+ 1 1)) $0) empty))",
        "(lambda (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) empty (index #(+ 1 (+ 1 1)) $0)))",
        "(lambda (cdr $0))",
        "(lambda (cdr (map (lambda $0) $0)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (+ 1 1)))",
        "(lambda (#(lambda (lambda (map (lambda (index $0 $2)) (range $0)))) $0 (- #(+ 1 (+ 1 1)) 1)))",
        "(lambda (+ 1 (fold $0 #(+ 1 (+ 1 1)) (lambda (lambda (+ $0 (length (range (- $1 $0)))))))))",
        "(lambda (+ 1 (fold $0 #(+ 1 (+ 1 1)) (lambda (lambda (+ $1 (length (range (- $0 $1)))))))))",
        "(lambda (fold $0 empty (lambda (lambda (fold (range $1) $0 (lambda (lambda (cons $3 $2))))))))",
        "(lambda (fold $0 empty (lambda (lambda (car (#(lambda (lambda (fold $1 (cons $0 empty) (lambda (lambda (cons $1 $0)))))) (map (lambda (cons $2 $1)) (range $1)) $0))))))"
      ],
      "utility": 707,
      "expected_cost": 19813,
      "final_cost": 19813,
      "multiplier": 1.045878968354111,
      "multiplier_wrt_orig": 1.045878968354111,
      "num_uses": 26,
      "uses": [
        {
          "fn_4 $0": "(cdr (cdr $0))"
        },
        {
          "fn_4 (cdr $0)": "(cdr (cdr (cdr $0)))"
        },
        {
          "fn_4 (cdr (cdr $0))": "(cdr (cdr (cdr (cdr $0))))"
        },
        {
          "fn_4 (cdr (cdr (cdr $0)))": "(cdr (cdr (cdr (cdr (cdr $0)))))"
        },
        {
          "fn_4 (cdr (cdr (map (lam $0) (cdr $0))))": "(cdr (cdr (cdr (cdr (map (lam $0) (cdr $0))))))"
        },
        {
          "fn_4 (cdr (map (lam $0) $0))": "(cdr (cdr (cdr (map (lam $0) $0))))"
        },
        {
          "fn_4 (cdr (map (lam $0) (cdr $0)))": "(cdr (cdr (cdr (map (lam $0) (cdr $0)))))"
        },
        {
          "fn_4 (map (lam $0) $0)": "(cdr (cdr (map (lam $0) $0)))"
        },
        {
          "fn_4 (map (lam $0) (cdr $0))": "(cdr (cdr (map (lam $0) (cdr $0))))"
        },
        {
          "fn_4 (prev_dc_inv_2 $0 (+ prev_dc_inv_0 prev_dc_inv_0))": "(cdr (cdr (prev_dc_inv_2 $0 (+ prev_dc_inv_0 prev_dc_inv_0))))"
        }
      ]
    }
  ]
}