{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/physics_scientific_unsolved_4h_ellisk_2019-07-20T18.20.13/bench001_it1.json --max-arity=3 --threads=1 --iterations=1 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/physics_scientific_unsolved_4h_ellisk_2019-07-20T18.20.13/out/stitch/2022-10-04_19-35-58/raw/bench001_it1.json",
  "args": {
    "file": "compression_benchmark/benches/physics_scientific_unsolved_4h_ellisk_2019-07-20T18.20.13/bench001_it1.json",
    "out": "compression_benchmark/benches/physics_scientific_unsolved_4h_ellisk_2019-07-20T18.20.13/out/stitch/2022-10-04_19-35-58/raw/bench001_it1.json",
    "iterations": 1,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 126349,
  "original": [
    "(lam (lam (prev_dc_inv_9 (cons $0 (cons $1 empty)))))",
    "(lam (lam (prev_dc_inv_9 (cons $1 (cons $0 empty)))))",
    "(lam (lam (zip $0 $1 (lam (lam (+. $0 $1))))))",
    "(lam (lam (zip $0 $1 (lam (lam (+. $1 $0))))))",
    "(lam (lam (zip $1 $0 (lam (lam (+. $0 $1))))))",
    "(lam (prev_dc_inv_9 $0))",
    "(lam (map (lam $0) (prev_dc_inv_9 $0)))",
    "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_1 1 (prev_dc_inv_9 $0)))",
    "(lam (prev_dc_inv_9 (cons (prev_dc_inv_9 $0) empty)))",
    "(lam (power (prev_dc_inv_10 $0 $0) (prev_dc_inv_3 1 1)))",
    "(lam (power (prev_dc_inv_10 $0 $0) (prev_dc_inv_4 1 1)))",
    "(lam (power (prev_dc_inv_10 $0 $0) (prev_dc_inv_3 (prev_dc_inv_0 pi) pi)))",
    "(lam (power (prev_dc_inv_10 $0 $0) (prev_dc_inv_3 pi (prev_dc_inv_0 pi))))",
    "(lam (power (prev_dc_inv_10 $0 $0) (prev_dc_inv_0 (prev_dc_inv_2 pi pi))))",
    "(lam (lam (lam (lam (prev_dc_inv_6 $3 $3 (+. $2 $2) (-. $0 $1))))))",
    "(lam (lam (lam (lam (prev_dc_inv_6 $3 $3 (-. $0 $1) (+. $2 $2))))))",
    "(lam (lam (lam (lam (prev_dc_inv_6 $3 $3 $0 (prev_dc_inv_2 $0 (prev_dc_inv_6 $0 $2 $1 $2)))))))",
    "(lam (lam (lam (lam (prev_dc_inv_6 $3 $3 $0 (prev_dc_inv_2 $0 (prev_dc_inv_6 $0 $2 $2 $1)))))))",
    "(lam (lam (lam (lam (prev_dc_inv_6 $3 $3 $0 (prev_dc_inv_2 $0 (prev_dc_inv_6 $2 $0 $1 $2)))))))",
    "(lam (lam (*. $1 (/. $1 $0))))",
    "(lam (lam (*. (/. $1 $0) $1)))",
    "(lam (lam (/. (*. $1 $1) $0)))",
    "(lam (lam (/. $1 (/. $0 $1))))",
    "(lam (lam (prev_dc_inv_2 $0 (prev_dc_inv_3 $1 $1))))",
    "(lam (lam (*. $0 (*. $0 $1))))",
    "(lam (lam (*. $0 (*. $1 $0))))",
    "(lam (lam (*. $1 (*. $0 $0))))",
    "(lam (lam (*. (*. $0 $0) $1)))",
    "(lam (lam (*. (*. $0 $1) $0)))",
    "(lam (lam (/. (prev_dc_inv_10 $0 $1) (prev_dc_inv_5 $1))))",
    "(lam (lam (/. (prev_dc_inv_10 $1 $0) (prev_dc_inv_5 $1))))",
    "(lam (lam (/. (prev_dc_inv_10 $0 $1) (prev_dc_inv_7 $1 (lam $0)))))",
    "(lam (lam (/. (prev_dc_inv_10 $1 $0) (prev_dc_inv_7 $1 (lam $0)))))",
    "(lam (lam (prev_dc_inv_10 $0 (prev_dc_inv_1 (prev_dc_inv_0 (prev_dc_inv_5 $1)) $1))))",
    "(lam (lam (/. $1 $0)))",
    "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
    "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
    "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
    "(lam (lam (prev_dc_inv_2 (+. $0 $0) $1)))",
    "(lam (lam (/. $1 $0)))",
    "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
    "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
    "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
    "(lam (lam (prev_dc_inv_2 (+. $0 $0) $1)))",
    "(lam (lam (*. $0 (*. $1 $1))))",
    "(lam (lam (*. $1 (*. $0 $1))))",
    "(lam (lam (*. $1 (*. $1 $0))))",
    "(lam (lam (*. (*. $0 $1) $1)))",
    "(lam (lam (*. (*. $1 $0) $1)))",
    "(lam (lam (*. $1 (/. $1 $0))))",
    "(lam (lam (*. (/. $1 $0) $1)))",
    "(lam (lam (/. (*. $1 $1) $0)))",
    "(lam (lam (/. $1 (/. $0 $1))))",
    "(lam (lam (prev_dc_inv_2 $0 (prev_dc_inv_3 $1 $1))))",
    "(lam (prev_dc_inv_2 (-. pi (prev_dc_inv_0 pi)) $0))",
    "(lam (prev_dc_inv_2 (-. pi (/. 1 pi)) $0))",
    "(lam (/. (+. $0 $0) (-. pi (prev_dc_inv_0 pi))))",
    "(lam (prev_dc_inv_3 (prev_dc_inv_4 $0 $0) (-. pi (prev_dc_inv_0 pi))))",
    "(lam (prev_dc_inv_3 (-. pi (prev_dc_inv_0 pi)) (prev_dc_inv_4 $0 $0)))",
    "(lam (lam (prev_dc_inv_4 $0 (prev_dc_inv_0 $1))))",
    "(lam (lam (prev_dc_inv_3 (*. $0 $0) $1)))",
    "(lam (lam (*. $0 (prev_dc_inv_3 $0 $1))))",
    "(lam (lam (*. $0 (prev_dc_inv_3 $1 $0))))",
    "(lam (lam (*. $1 (prev_dc_inv_3 $0 $0))))",
    "(lam (lam (prev_dc_inv_3 $0 $1)))",
    "(lam (lam (prev_dc_inv_3 $1 $0)))",
    "(lam (lam (*. $0 (prev_dc_inv_4 $1 $1))))",
    "(lam (lam (*. $1 (prev_dc_inv_4 $0 $0))))",
    "(lam (lam (*. (prev_dc_inv_4 $0 $0) $1)))",
    "(lam (lam (prev_dc_inv_4 $1 $0)))",
    "(lam (lam (prev_dc_inv_3 $1 (/. $1 $0))))",
    "(lam (lam (prev_dc_inv_3 (/. $1 $0) $1)))",
    "(lam (lam (/. (prev_dc_inv_3 $1 $1) $0)))",
    "(lam (lam (/. $1 (prev_dc_inv_2 $1 $0))))",
    "(lam (prev_dc_inv_0 $0))",
    "(lam (/. 1 $0))",
    "(lam (/. $0 (*. $0 $0)))",
    "(lam (/. (/. $0 $0) $0))",
    "(lam (prev_dc_inv_0 (*. 1 $0)))",
    "(lam (prev_dc_inv_4 $0 $0))",
    "(lam (prev_dc_inv_3 $0 1))",
    "(lam (prev_dc_inv_3 1 $0))",
    "(lam (prev_dc_inv_3 $0 (/. $0 $0)))",
    "(lam (prev_dc_inv_3 (/. $0 $0) $0))",
    "(lam (prev_dc_inv_9 $0))",
    "(lam (map (lam $0) (prev_dc_inv_9 $0)))",
    "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_1 1 (prev_dc_inv_9 $0)))",
    "(lam (prev_dc_inv_9 (cons (prev_dc_inv_9 $0) empty)))",
    "(lam (lam (prev_dc_inv_1 (prev_dc_inv_0 $1) (prev_dc_inv_9 $0))))",
    "(lam (lam (map (lam (/. $0 $2)) (prev_dc_inv_9 $0))))",
    "(lam (lam (prev_dc_inv_1 (/. 1 $1) (prev_dc_inv_9 $0))))",
    "(lam (lam (prev_dc_inv_1 (prev_dc_inv_0 $1) (prev_dc_inv_9 (map (lam $0) $0)))))",
    "(lam (lam (prev_dc_inv_1 (prev_dc_inv_0 $1) (map (lam $0) (prev_dc_inv_9 $0)))))",
    "(lam (lam (prev_dc_inv_10 $0 $1)))",
    "(lam (lam (prev_dc_inv_10 $1 $0)))",
    "(lam (lam (prev_dc_inv_10 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_10 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_10 (map (lam $0) $0) $1)))",
    "(lam (lam (prev_dc_inv_10 $0 $1)))",
    "(lam (lam (prev_dc_inv_10 $1 $0)))",
    "(lam (lam (prev_dc_inv_10 $0 (map (lam $0) $1))))",
    "(lam (lam (prev_dc_inv_10 $1 (map (lam $0) $0))))",
    "(lam (lam (prev_dc_inv_10 (map (lam $0) $0) $1)))",
    "(lam (lam (lam (lam (lam (*. $4 (prev_dc_inv_6 $0 $3 $1 $2)))))))",
    "(lam (lam (lam (lam (lam (*. $4 (prev_dc_inv_6 $0 $3 $2 $1)))))))",
    "(lam (lam (lam (lam (lam (*. $4 (prev_dc_inv_6 $3 $0 $1 $2)))))))",
    "(lam (lam (lam (lam (lam (*. $4 (prev_dc_inv_6 $3 $0 $2 $1)))))))",
    "(lam (lam (lam (lam (lam (*. (prev_dc_inv_6 $0 $3 $1 $2) $4))))))",
    "(lam (lam (lam (lam (prev_dc_inv_6 $0 $3 $1 $2)))))",
    "(lam (lam (lam (lam (prev_dc_inv_6 $0 $3 $2 $1)))))",
    "(lam (lam (lam (lam (prev_dc_inv_6 $3 $0 $1 $2)))))",
    "(lam (lam (lam (lam (prev_dc_inv_6 $3 $0 $2 $1)))))",
    "(lam (lam (lam (lam (-. (*. $0 $3) (*. $1 $2))))))",
    "(lam (lam (lam (+. $2 (*. $0 $1)))))",
    "(lam (lam (lam (+. $2 (*. $1 $0)))))",
    "(lam (lam (lam (+. (*. $0 $1) $2))))",
    "(lam (lam (lam (+. (*. $1 $0) $2))))",
    "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
    "(lam (lam (lam (lam (+. (*. $0 (+. $2 (prev_dc_inv_3 $0 $1))) $3)))))",
    "(lam (lam (lam (lam (+. (*. $0 (+. (prev_dc_inv_3 $0 $1) $2)) $3)))))",
    "(lam (lam (lam (lam (+. (*. $0 (+. (prev_dc_inv_3 $1 $0) $2)) $3)))))",
    "(lam (lam (lam (lam (+. (*. (+. (prev_dc_inv_3 $0 $1) $2) $0) $3)))))",
    "(lam (lam (lam (lam (+. (*. (+. (prev_dc_inv_3 $1 $0) $2) $0) $3)))))",
    "(lam (lam (prev_dc_inv_1 $1 $0)))",
    "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
    "(lam (lam (map (lam $0) (prev_dc_inv_1 $1 $0))))",
    "(lam (lam (map (lam (*. $0 $2)) $0)))",
    "(lam (lam (map (lam (*. $2 $0)) $0)))",
    "(lam (lam (prev_dc_inv_1 $1 $0)))",
    "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
    "(lam (lam (map (lam $0) (prev_dc_inv_1 $1 $0))))",
    "(lam (lam (map (lam (*. $0 $2)) $0)))",
    "(lam (lam (map (lam (*. $2 $0)) $0)))",
    "(lam (lam (prev_dc_inv_3 $1 (prev_dc_inv_10 $0 $0))))",
    "(lam (lam (prev_dc_inv_3 (prev_dc_inv_10 $0 $0) $1)))",
    "(lam (lam (prev_dc_inv_10 $0 (prev_dc_inv_1 (prev_dc_inv_4 $1 $1) $0))))",
    "(lam (lam (prev_dc_inv_10 (prev_dc_inv_1 (prev_dc_inv_4 $1 $1) $0) $0)))",
    "(lam (lam (prev_dc_inv_4 $1 (prev_dc_inv_8 $1 1 $0))))",
    "(lam (lam (prev_dc_inv_4 $0 (prev_dc_inv_0 $1))))",
    "(lam (lam (prev_dc_inv_3 (*. $0 $0) $1)))",
    "(lam (lam (*. $0 (prev_dc_inv_3 $0 $1))))",
    "(lam (lam (*. $0 (prev_dc_inv_3 $1 $0))))",
    "(lam (lam (*. $1 (prev_dc_inv_3 $0 $0))))",
    "(lam (lam (prev_dc_inv_1 $1 $0)))",
    "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
    "(lam (lam (map (lam $0) (prev_dc_inv_1 $1 $0))))",
    "(lam (lam (map (lam (*. $0 $2)) $0)))",
    "(lam (lam (map (lam (*. $2 $0)) $0)))",
    "(lam (lam (prev_dc_inv_1 $1 $0)))",
    "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
    "(lam (lam (map (lam $0) (prev_dc_inv_1 $1 $0))))",
    "(lam (lam (map (lam (*. $0 $2)) $0)))",
    "(lam (lam (map (lam (*. $2 $0)) $0)))",
    "(lam (lam (/. $1 $0)))",
    "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
    "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
    "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
    "(lam (lam (prev_dc_inv_2 (+. $0 $0) $1)))",
    "(lam (lam (lam (lam (+. (*. $0 (+. $2 (prev_dc_inv_3 $0 $1))) $3)))))",
    "(lam (lam (lam (lam (+. (*. $0 (+. (prev_dc_inv_3 $0 $1) $2)) $3)))))",
    "(lam (lam (lam (lam (+. (*. $0 (+. (prev_dc_inv_3 $1 $0) $2)) $3)))))",
    "(lam (lam (lam (lam (+. (*. (+. (prev_dc_inv_3 $0 $1) $2) $0) $3)))))",
    "(lam (lam (lam (lam (+. (*. (+. (prev_dc_inv_3 $1 $0) $2) $0) $3)))))",
    "(lam (lam (lam (+. $2 (*. $0 $1)))))",
    "(lam (lam (lam (+. $2 (*. $1 $0)))))",
    "(lam (lam (lam (+. (*. $0 $1) $2))))",
    "(lam (lam (lam (+. (*. $1 $0) $2))))",
    "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
    "(lam (prev_dc_inv_2 $0 pi))",
    "(lam (/. $0 (prev_dc_inv_4 $0 pi)))",
    "(lam (/. pi (prev_dc_inv_4 $0 $0)))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_3 $0 (prev_dc_inv_0 pi))))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_3 (prev_dc_inv_0 pi) $0)))",
    "(lam (lam (lam (prev_dc_inv_8 $1 $2 $0))))",
    "(lam (lam (lam (prev_dc_inv_8 $2 $1 $0))))",
    "(lam (lam (lam (prev_dc_inv_8 $1 $2 (map (lam $0) $0)))))",
    "(lam (lam (lam (prev_dc_inv_8 $2 $1 (map (lam $0) $0)))))",
    "(lam (lam (lam (prev_dc_inv_8 $1 $2 (prev_dc_inv_9 (cons $0 empty))))))",
    "(lam (lam (lam (prev_dc_inv_8 $1 $2 $0))))",
    "(lam (lam (lam (prev_dc_inv_8 $2 $1 $0))))",
    "(lam (lam (lam (prev_dc_inv_8 $1 $2 (map (lam $0) $0)))))",
    "(lam (lam (lam (prev_dc_inv_8 $2 $1 (map (lam $0) $0)))))",
    "(lam (lam (lam (prev_dc_inv_8 $1 $2 (prev_dc_inv_9 (cons $0 empty))))))",
    "(lam (lam (prev_dc_inv_6 $0 0 $0 (*. $0 $1))))",
    "(lam (lam (prev_dc_inv_6 $0 0 $0 (*. $1 $0))))",
    "(lam (lam (prev_dc_inv_6 $0 0 $1 (*. $0 $0))))",
    "(lam (lam (prev_dc_inv_6 $1 0 $0 (*. $0 $1))))",
    "(lam (lam (prev_dc_inv_6 $1 0 $0 (*. $1 $0))))",
    "(lam (lam (*. $0 $1)))",
    "(lam (lam (*. $1 $0)))",
    "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
    "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
    "(lam (lam (prev_dc_inv_3 $0 (+. $1 $1))))",
    "(lam (lam (*. $0 $1)))",
    "(lam (lam (*. $1 $0)))",
    "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
    "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
    "(lam (lam (prev_dc_inv_3 $0 (+. $1 $1))))",
    "(lam (prev_dc_inv_0 $0))",
    "(lam (/. 1 $0))",
    "(lam (/. $0 (*. $0 $0)))",
    "(lam (/. (/. $0 $0) $0))",
    "(lam (prev_dc_inv_0 (*. 1 $0)))",
    "(lam (prev_dc_inv_0 $0))",
    "(lam (/. 1 $0))",
    "(lam (/. $0 (*. $0 $0)))",
    "(lam (/. (/. $0 $0) $0))",
    "(lam (prev_dc_inv_0 (*. 1 $0)))",
    "(lam (lam (/. $1 $0)))",
    "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
    "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
    "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
    "(lam (lam (prev_dc_inv_2 (+. $0 $0) $1)))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_7 $0 (lam $0)))",
    "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 (prev_dc_inv_1 1 $0)))",
    "(lam (*. (prev_dc_inv_5 $0) 1))",
    "(lam (prev_dc_inv_5 $0))",
    "(lam (prev_dc_inv_7 $0 (lam $0)))",
    "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
    "(lam (prev_dc_inv_5 (prev_dc_inv_1 1 $0)))",
    "(lam (*. (prev_dc_inv_5 $0) 1))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_7 $0 (lam (prev_dc_inv_0 $0)))))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_5 (map (lam (prev_dc_inv_0 $0)) $0))))",
    "(lam (/. 1 (prev_dc_inv_7 $0 (lam (prev_dc_inv_0 $0)))))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_7 $0 (lam (/. 1 $0)))))",
    "(lam (prev_dc_inv_0 (prev_dc_inv_7 (map (lam (prev_dc_inv_0 $0)) $0) (lam $0))))",
    "(lam (*. $0 (*. $0 pi)))",
    "(lam (*. $0 (*. pi $0)))",
    "(lam (*. (*. $0 $0) pi))",
    "(lam (*. (*. $0 pi) $0))",
    "(lam (*. (*. pi $0) $0))",
    "(lam (lam (+. (*. $0 $0) (*. $1 $1))))",
    "(lam (lam (+. (*. $1 $1) (*. $0 $0))))",
    "(lam (lam (prev_dc_inv_6 $0 $0 $1 (-. 0 $1))))",
    "(lam (lam (prev_dc_inv_6 $0 $0 (-. 0 $1) $1)))",
    "(lam (lam (prev_dc_inv_6 $1 $1 $0 (-. 0 $0))))"
  ],
  "invs": [
    {
      "body": "(lam (lam (#0 $1 $0)))",
      "dreamcoder": "#(lambda (lambda (lambda ($2 $1 $0))))",
      "arity": 1,
      "name": "fn_11",
      "rewritten": [
        "(lam (lam (prev_dc_inv_9 (cons $0 (cons $1 empty)))))",
        "(lam (lam (prev_dc_inv_9 (cons $1 (cons $0 empty)))))",
        "(lam (lam (zip $0 $1 (lam (lam (+. $0 $1))))))",
        "(lam (lam (zip $0 $1 (fn_11 +.))))",
        "(lam (lam (zip $1 $0 (lam (lam (+. $0 $1))))))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (map (lam $0) (prev_dc_inv_9 $0)))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 1 (prev_dc_inv_9 $0)))",
        "(lam (prev_dc_inv_9 (cons (prev_dc_inv_9 $0) empty)))",
        "(lam (power (prev_dc_inv_10 $0 $0) (prev_dc_inv_3 1 1)))",
        "(lam (power (prev_dc_inv_10 $0 $0) (prev_dc_inv_4 1 1)))",
        "(lam (power (prev_dc_inv_10 $0 $0) (prev_dc_inv_3 (prev_dc_inv_0 pi) pi)))",
        "(lam (power (prev_dc_inv_10 $0 $0) (prev_dc_inv_3 pi (prev_dc_inv_0 pi))))",
        "(lam (power (prev_dc_inv_10 $0 $0) (prev_dc_inv_0 (prev_dc_inv_2 pi pi))))",
        "(lam (lam (lam (lam (prev_dc_inv_6 $3 $3 (+. $2 $2) (-. $0 $1))))))",
        "(lam (lam (lam (lam (prev_dc_inv_6 $3 $3 (-. $0 $1) (+. $2 $2))))))",
        "(lam (lam (lam (lam (prev_dc_inv_6 $3 $3 $0 (prev_dc_inv_2 $0 (prev_dc_inv_6 $0 $2 $1 $2)))))))",
        "(lam (lam (lam (lam (prev_dc_inv_6 $3 $3 $0 (prev_dc_inv_2 $0 (prev_dc_inv_6 $0 $2 $2 $1)))))))",
        "(lam (lam (lam (lam (prev_dc_inv_6 $3 $3 $0 (prev_dc_inv_2 $0 (prev_dc_inv_6 $2 $0 $1 $2)))))))",
        "(lam (lam (*. $1 (/. $1 $0))))",
        "(lam (lam (*. (/. $1 $0) $1)))",
        "(lam (lam (/. (*. $1 $1) $0)))",
        "(lam (lam (/. $1 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_2 $0 (prev_dc_inv_3 $1 $1))))",
        "(lam (lam (*. $0 (*. $0 $1))))",
        "(lam (lam (*. $0 (*. $1 $0))))",
        "(lam (lam (*. $1 (*. $0 $0))))",
        "(lam (lam (*. (*. $0 $0) $1)))",
        "(lam (lam (*. (*. $0 $1) $0)))",
        "(lam (lam (/. (prev_dc_inv_10 $0 $1) (prev_dc_inv_5 $1))))",
        "(lam (lam (/. (prev_dc_inv_10 $1 $0) (prev_dc_inv_5 $1))))",
        "(lam (lam (/. (prev_dc_inv_10 $0 $1) (prev_dc_inv_7 $1 (lam $0)))))",
        "(lam (lam (/. (prev_dc_inv_10 $1 $0) (prev_dc_inv_7 $1 (lam $0)))))",
        "(lam (lam (prev_dc_inv_10 $0 (prev_dc_inv_1 (prev_dc_inv_0 (prev_dc_inv_5 $1)) $1))))",
        "(fn_11 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_2 (+. $0 $0) $1)))",
        "(fn_11 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_2 (+. $0 $0) $1)))",
        "(lam (lam (*. $0 (*. $1 $1))))",
        "(lam (lam (*. $1 (*. $0 $1))))",
        "(lam (lam (*. $1 (*. $1 $0))))",
        "(lam (lam (*. (*. $0 $1) $1)))",
        "(lam (lam (*. (*. $1 $0) $1)))",
        "(lam (lam (*. $1 (/. $1 $0))))",
        "(lam (lam (*. (/. $1 $0) $1)))",
        "(lam (lam (/. (*. $1 $1) $0)))",
        "(lam (lam (/. $1 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_2 $0 (prev_dc_inv_3 $1 $1))))",
        "(lam (prev_dc_inv_2 (-. pi (prev_dc_inv_0 pi)) $0))",
        "(lam (prev_dc_inv_2 (-. pi (/. 1 pi)) $0))",
        "(lam (/. (+. $0 $0) (-. pi (prev_dc_inv_0 pi))))",
        "(lam (prev_dc_inv_3 (prev_dc_inv_4 $0 $0) (-. pi (prev_dc_inv_0 pi))))",
        "(lam (prev_dc_inv_3 (-. pi (prev_dc_inv_0 pi)) (prev_dc_inv_4 $0 $0)))",
        "(lam (lam (prev_dc_inv_4 $0 (prev_dc_inv_0 $1))))",
        "(lam (lam (prev_dc_inv_3 (*. $0 $0) $1)))",
        "(lam (lam (*. $0 (prev_dc_inv_3 $0 $1))))",
        "(lam (lam (*. $0 (prev_dc_inv_3 $1 $0))))",
        "(lam (lam (*. $1 (prev_dc_inv_3 $0 $0))))",
        "(lam (lam (prev_dc_inv_3 $0 $1)))",
        "(fn_11 prev_dc_inv_3)",
        "(lam (lam (*. $0 (prev_dc_inv_4 $1 $1))))",
        "(lam (lam (*. $1 (prev_dc_inv_4 $0 $0))))",
        "(lam (lam (*. (prev_dc_inv_4 $0 $0) $1)))",
        "(fn_11 prev_dc_inv_4)",
        "(lam (lam (prev_dc_inv_3 $1 (/. $1 $0))))",
        "(lam (lam (prev_dc_inv_3 (/. $1 $0) $1)))",
        "(lam (lam (/. (prev_dc_inv_3 $1 $1) $0)))",
        "(lam (lam (/. $1 (prev_dc_inv_2 $1 $0))))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (prev_dc_inv_0 (*. 1 $0)))",
        "(lam (prev_dc_inv_4 $0 $0))",
        "(lam (prev_dc_inv_3 $0 1))",
        "(lam (prev_dc_inv_3 1 $0))",
        "(lam (prev_dc_inv_3 $0 (/. $0 $0)))",
        "(lam (prev_dc_inv_3 (/. $0 $0) $0))",
        "(lam (prev_dc_inv_9 $0))",
        "(lam (map (lam $0) (prev_dc_inv_9 $0)))",
        "(lam (prev_dc_inv_9 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_1 1 (prev_dc_inv_9 $0)))",
        "(lam (prev_dc_inv_9 (cons (prev_dc_inv_9 $0) empty)))",
        "(lam (lam (prev_dc_inv_1 (prev_dc_inv_0 $1) (prev_dc_inv_9 $0))))",
        "(lam (lam (map (lam (/. $0 $2)) (prev_dc_inv_9 $0))))",
        "(lam (lam (prev_dc_inv_1 (/. 1 $1) (prev_dc_inv_9 $0))))",
        "(lam (lam (prev_dc_inv_1 (prev_dc_inv_0 $1) (prev_dc_inv_9 (map (lam $0) $0)))))",
        "(lam (lam (prev_dc_inv_1 (prev_dc_inv_0 $1) (map (lam $0) (prev_dc_inv_9 $0)))))",
        "(lam (lam (prev_dc_inv_10 $0 $1)))",
        "(fn_11 prev_dc_inv_10)",
        "(lam (lam (prev_dc_inv_10 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_10 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_10 (map (lam $0) $0) $1)))",
        "(lam (lam (prev_dc_inv_10 $0 $1)))",
        "(fn_11 prev_dc_inv_10)",
        "(lam (lam (prev_dc_inv_10 $0 (map (lam $0) $1))))",
        "(lam (lam (prev_dc_inv_10 $1 (map (lam $0) $0))))",
        "(lam (lam (prev_dc_inv_10 (map (lam $0) $0) $1)))",
        "(lam (lam (lam (lam (lam (*. $4 (prev_dc_inv_6 $0 $3 $1 $2)))))))",
        "(lam (lam (lam (lam (lam (*. $4 (prev_dc_inv_6 $0 $3 $2 $1)))))))",
        "(lam (lam (lam (lam (lam (*. $4 (prev_dc_inv_6 $3 $0 $1 $2)))))))",
        "(lam (lam (lam (lam (lam (*. $4 (prev_dc_inv_6 $3 $0 $2 $1)))))))",
        "(lam (lam (lam (lam (lam (*. (prev_dc_inv_6 $0 $3 $1 $2) $4))))))",
        "(lam (lam (lam (lam (prev_dc_inv_6 $0 $3 $1 $2)))))",
        "(lam (lam (lam (lam (prev_dc_inv_6 $0 $3 $2 $1)))))",
        "(lam (lam (lam (lam (prev_dc_inv_6 $3 $0 $1 $2)))))",
        "(lam (lam (lam (lam (prev_dc_inv_6 $3 $0 $2 $1)))))",
        "(lam (lam (lam (lam (-. (*. $0 $3) (*. $1 $2))))))",
        "(lam (lam (lam (+. $2 (*. $0 $1)))))",
        "(lam (lam (lam (+. $2 (*. $1 $0)))))",
        "(lam (lam (lam (+. (*. $0 $1) $2))))",
        "(lam (lam (lam (+. (*. $1 $0) $2))))",
        "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
        "(lam (lam (lam (lam (+. (*. $0 (+. $2 (prev_dc_inv_3 $0 $1))) $3)))))",
        "(lam (lam (lam (lam (+. (*. $0 (+. (prev_dc_inv_3 $0 $1) $2)) $3)))))",
        "(lam (lam (lam (lam (+. (*. $0 (+. (prev_dc_inv_3 $1 $0) $2)) $3)))))",
        "(lam (lam (lam (lam (+. (*. (+. (prev_dc_inv_3 $0 $1) $2) $0) $3)))))",
        "(lam (lam (lam (lam (+. (*. (+. (prev_dc_inv_3 $1 $0) $2) $0) $3)))))",
        "(fn_11 prev_dc_inv_1)",
        "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_1 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_11 prev_dc_inv_1)",
        "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_1 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(lam (lam (prev_dc_inv_3 $1 (prev_dc_inv_10 $0 $0))))",
        "(lam (lam (prev_dc_inv_3 (prev_dc_inv_10 $0 $0) $1)))",
        "(lam (lam (prev_dc_inv_10 $0 (prev_dc_inv_1 (prev_dc_inv_4 $1 $1) $0))))",
        "(lam (lam (prev_dc_inv_10 (prev_dc_inv_1 (prev_dc_inv_4 $1 $1) $0) $0)))",
        "(lam (lam (prev_dc_inv_4 $1 (prev_dc_inv_8 $1 1 $0))))",
        "(lam (lam (prev_dc_inv_4 $0 (prev_dc_inv_0 $1))))",
        "(lam (lam (prev_dc_inv_3 (*. $0 $0) $1)))",
        "(lam (lam (*. $0 (prev_dc_inv_3 $0 $1))))",
        "(lam (lam (*. $0 (prev_dc_inv_3 $1 $0))))",
        "(lam (lam (*. $1 (prev_dc_inv_3 $0 $0))))",
        "(fn_11 prev_dc_inv_1)",
        "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_1 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_11 prev_dc_inv_1)",
        "(lam (lam (prev_dc_inv_1 $1 (map (lam $0) $0))))",
        "(lam (lam (map (lam $0) (prev_dc_inv_1 $1 $0))))",
        "(lam (lam (map (lam (*. $0 $2)) $0)))",
        "(lam (lam (map (lam (*. $2 $0)) $0)))",
        "(fn_11 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_2 (+. $0 $0) $1)))",
        "(lam (lam (lam (lam (+. (*. $0 (+. $2 (prev_dc_inv_3 $0 $1))) $3)))))",
        "(lam (lam (lam (lam (+. (*. $0 (+. (prev_dc_inv_3 $0 $1) $2)) $3)))))",
        "(lam (lam (lam (lam (+. (*. $0 (+. (prev_dc_inv_3 $1 $0) $2)) $3)))))",
        "(lam (lam (lam (lam (+. (*. (+. (prev_dc_inv_3 $0 $1) $2) $0) $3)))))",
        "(lam (lam (lam (lam (+. (*. (+. (prev_dc_inv_3 $1 $0) $2) $0) $3)))))",
        "(lam (lam (lam (+. $2 (*. $0 $1)))))",
        "(lam (lam (lam (+. $2 (*. $1 $0)))))",
        "(lam (lam (lam (+. (*. $0 $1) $2))))",
        "(lam (lam (lam (+. (*. $1 $0) $2))))",
        "(lam (lam (lam (+. $2 (/. $0 (prev_dc_inv_0 $1))))))",
        "(lam (prev_dc_inv_2 $0 pi))",
        "(lam (/. $0 (prev_dc_inv_4 $0 pi)))",
        "(lam (/. pi (prev_dc_inv_4 $0 $0)))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_3 $0 (prev_dc_inv_0 pi))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_3 (prev_dc_inv_0 pi) $0)))",
        "(lam (lam (lam (prev_dc_inv_8 $1 $2 $0))))",
        "(lam (fn_11 (prev_dc_inv_8 $0)))",
        "(lam (lam (lam (prev_dc_inv_8 $1 $2 (map (lam $0) $0)))))",
        "(lam (lam (lam (prev_dc_inv_8 $2 $1 (map (lam $0) $0)))))",
        "(lam (lam (lam (prev_dc_inv_8 $1 $2 (prev_dc_inv_9 (cons $0 empty))))))",
        "(lam (lam (lam (prev_dc_inv_8 $1 $2 $0))))",
        "(lam (fn_11 (prev_dc_inv_8 $0)))",
        "(lam (lam (lam (prev_dc_inv_8 $1 $2 (map (lam $0) $0)))))",
        "(lam (lam (lam (prev_dc_inv_8 $2 $1 (map (lam $0) $0)))))",
        "(lam (lam (lam (prev_dc_inv_8 $1 $2 (prev_dc_inv_9 (cons $0 empty))))))",
        "(lam (lam (prev_dc_inv_6 $0 0 $0 (*. $0 $1))))",
        "(lam (lam (prev_dc_inv_6 $0 0 $0 (*. $1 $0))))",
        "(lam (lam (prev_dc_inv_6 $0 0 $1 (*. $0 $0))))",
        "(lam (lam (prev_dc_inv_6 $1 0 $0 (*. $0 $1))))",
        "(lam (lam (prev_dc_inv_6 $1 0 $0 (*. $1 $0))))",
        "(lam (lam (*. $0 $1)))",
        "(fn_11 *.)",
        "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
        "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (prev_dc_inv_3 $0 (+. $1 $1))))",
        "(lam (lam (*. $0 $1)))",
        "(fn_11 *.)",
        "(lam (lam (/. $0 (prev_dc_inv_0 $1))))",
        "(lam (lam (/. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (prev_dc_inv_3 $0 (+. $1 $1))))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (prev_dc_inv_0 (*. 1 $0)))",
        "(lam (prev_dc_inv_0 $0))",
        "(lam (/. 1 $0))",
        "(lam (/. $0 (*. $0 $0)))",
        "(lam (/. (/. $0 $0) $0))",
        "(lam (prev_dc_inv_0 (*. 1 $0)))",
        "(fn_11 /.)",
        "(lam (lam (*. $1 (prev_dc_inv_0 $0))))",
        "(lam (lam (*. (prev_dc_inv_0 $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (/. $0 $1))))",
        "(lam (lam (prev_dc_inv_2 (+. $0 $0) $1)))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_7 $0 (lam $0)))",
        "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_1 1 $0)))",
        "(lam (*. (prev_dc_inv_5 $0) 1))",
        "(lam (prev_dc_inv_5 $0))",
        "(lam (prev_dc_inv_7 $0 (lam $0)))",
        "(lam (prev_dc_inv_5 (map (lam $0) $0)))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_1 1 $0)))",
        "(lam (*. (prev_dc_inv_5 $0) 1))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_7 $0 (lam (prev_dc_inv_0 $0)))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_5 (map (lam (prev_dc_inv_0 $0)) $0))))",
        "(lam (/. 1 (prev_dc_inv_7 $0 (lam (prev_dc_inv_0 $0)))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_7 $0 (lam (/. 1 $0)))))",
        "(lam (prev_dc_inv_0 (prev_dc_inv_7 (map (lam (prev_dc_inv_0 $0)) $0) (lam $0))))",
        "(lam (*. $0 (*. $0 pi)))",
        "(lam (*. $0 (*. pi $0)))",
        "(lam (*. (*. $0 $0) pi))",
        "(lam (*. (*. $0 pi) $0))",
        "(lam (*. (*. pi $0) $0))",
        "(lam (lam (+. (*. $0 $0) (*. $1 $1))))",
        "(lam (lam (+. (*. $1 $1) (*. $0 $0))))",
        "(lam (lam (prev_dc_inv_6 $0 $0 $1 (-. 0 $1))))",
        "(lam (lam (prev_dc_inv_6 $0 $0 (-. 0 $1) $1)))",
        "(lam (lam (prev_dc_inv_6 $1 $1 $0 (-. 0 $0))))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (lambda (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) (cons $0 (cons $1 empty)))))",
        "(lambda (lambda (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) (cons $1 (cons $0 empty)))))",
        "(lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1))))))",
        "(lambda (lambda (zip $0 $1 (#(lambda (lambda (lambda ($2 $1 $0)))) +.))))",
        "(lambda (lambda (zip $1 $0 (lambda (lambda (+. $0 $1))))))",
        "(lambda (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) $0))",
        "(lambda (map (lambda $0) (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) $0)))",
        "(lambda (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (map (lambda (*. $0 $1)))) 1 (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) $0)))",
        "(lambda (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) (cons (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) $0) empty)))",
        "(lambda (power (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0) (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) 1 1)))",
        "(lambda (power (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0) (#(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))) 1 1)))",
        "(lambda (power (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0) (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) (#(lambda (/. 1. $0)) pi) pi)))",
        "(lambda (power (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0) (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) pi (#(lambda (/. 1. $0)) pi))))",
        "(lambda (power (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0) (#(lambda (/. 1. $0)) (#(lambda (lambda (/. (+. $0 $0) $1))) pi pi))))",
        "(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $3 $3 (+. $2 $2) (-. $0 $1))))))",
        "(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $3 $3 (-. $0 $1) (+. $2 $2))))))",
        "(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $3 $3 $0 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $0 $2 $1 $2)))))))",
        "(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $3 $3 $0 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $0 $2 $2 $1)))))))",
        "(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $3 $3 $0 (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $2 $0 $1 $2)))))))",
        "(lambda (lambda (*. $1 (/. $1 $0))))",
        "(lambda (lambda (*. (/. $1 $0) $1)))",
        "(lambda (lambda (/. (*. $1 $1) $0)))",
        "(lambda (lambda (/. $1 (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $1 $1))))",
        "(lambda (lambda (*. $0 (*. $0 $1))))",
        "(lambda (lambda (*. $0 (*. $1 $0))))",
        "(lambda (lambda (*. $1 (*. $0 $0))))",
        "(lambda (lambda (*. (*. $0 $0) $1)))",
        "(lambda (lambda (*. (*. $0 $1) $0)))",
        "(lambda (lambda (/. (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1))))",
        "(lambda (lambda (/. (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 $0) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1))))",
        "(lambda (lambda (/. (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1) (#(lambda (lambda (fold $1 0. (lambda (lambda (+. $0 ($2 $1))))))) $1 (lambda $0)))))",
        "(lambda (lambda (/. (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 $0) (#(lambda (lambda (fold $1 0. (lambda (lambda (+. $0 ($2 $1))))))) $1 (lambda $0)))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $1)) $1))))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (+. $0 $0) $1)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (+. $0 $0) $1)))",
        "(lambda (lambda (*. $0 (*. $1 $1))))",
        "(lambda (lambda (*. $1 (*. $0 $1))))",
        "(lambda (lambda (*. $1 (*. $1 $0))))",
        "(lambda (lambda (*. (*. $0 $1) $1)))",
        "(lambda (lambda (*. (*. $1 $0) $1)))",
        "(lambda (lambda (*. $1 (/. $1 $0))))",
        "(lambda (lambda (*. (/. $1 $0) $1)))",
        "(lambda (lambda (/. (*. $1 $1) $0)))",
        "(lambda (lambda (/. $1 (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $1 $1))))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (-. pi (#(lambda (/. 1. $0)) pi)) $0))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (-. pi (/. 1 pi)) $0))",
        "(lambda (/. (+. $0 $0) (-. pi (#(lambda (/. 1. $0)) pi))))",
        "(lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) (#(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))) $0 $0) (-. pi (#(lambda (/. 1. $0)) pi))))",
        "(lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) (-. pi (#(lambda (/. 1. $0)) pi)) (#(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))) $0 $0)))",
        "(lambda (lambda (#(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))) $0 (#(lambda (/. 1. $0)) $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) (*. $0 $0) $1)))",
        "(lambda (lambda (*. $0 (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 $1))))",
        "(lambda (lambda (*. $0 (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $1 $0))))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 $0))))",
        "(lambda (lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 $1)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) #(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))))",
        "(lambda (lambda (*. $0 (#(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))) $1 $1))))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))) $0 $0))))",
        "(lambda (lambda (*. (#(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))) $0 $0) $1)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) #(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))))",
        "(lambda (lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $1 (/. $1 $0))))",
        "(lambda (lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) (/. $1 $0) $1)))",
        "(lambda (lambda (/. (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $1 $1) $0)))",
        "(lambda (lambda (/. $1 (#(lambda (lambda (/. (+. $0 $0) $1))) $1 $0))))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (#(lambda (/. 1. $0)) (*. 1 $0)))",
        "(lambda (#(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))) $0 $0))",
        "(lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 1))",
        "(lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) 1 $0))",
        "(lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 (/. $0 $0)))",
        "(lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) (/. $0 $0) $0))",
        "(lambda (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) $0))",
        "(lambda (map (lambda $0) (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) $0)))",
        "(lambda (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (map (lambda (*. $0 $1)))) 1 (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) $0)))",
        "(lambda (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) (cons (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) $0) empty)))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) $1) (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) $0))))",
        "(lambda (lambda (map (lambda (/. $0 $2)) (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) $0))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (/. 1 $1) (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) $0))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) $1) (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) (map (lambda $0) $0)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (/. 1. $0)) $1) (map (lambda $0) (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) $0)))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) #(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $1)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) #(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (map (lambda $0) $1))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $0 $3 $1 $2)))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $0 $3 $2 $1)))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $3 $0 $1 $2)))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. $4 (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $3 $0 $2 $1)))))))",
        "(lambda (lambda (lambda (lambda (lambda (*. (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $0 $3 $1 $2) $4))))))",
        "(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $0 $3 $1 $2)))))",
        "(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $0 $3 $2 $1)))))",
        "(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $3 $0 $1 $2)))))",
        "(lambda (lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $3 $0 $2 $1)))))",
        "(lambda (lambda (lambda (lambda (-. (*. $0 $3) (*. $1 $2))))))",
        "(lambda (lambda (lambda (+. $2 (*. $0 $1)))))",
        "(lambda (lambda (lambda (+. $2 (*. $1 $0)))))",
        "(lambda (lambda (lambda (+. (*. $0 $1) $2))))",
        "(lambda (lambda (lambda (+. (*. $1 $0) $2))))",
        "(lambda (lambda (lambda (+. $2 (/. $0 (#(lambda (/. 1. $0)) $1))))))",
        "(lambda (lambda (lambda (lambda (+. (*. $0 (+. $2 (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 $1))) $3)))))",
        "(lambda (lambda (lambda (lambda (+. (*. $0 (+. (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 $1) $2)) $3)))))",
        "(lambda (lambda (lambda (lambda (+. (*. $0 (+. (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $1 $0) $2)) $3)))))",
        "(lambda (lambda (lambda (lambda (+. (*. (+. (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 $1) $2) $0) $3)))))",
        "(lambda (lambda (lambda (lambda (+. (*. (+. (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $1 $0) $2) $0) $3)))))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(lambda (lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $1 (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0))))",
        "(lambda (lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) $0 (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))) $1 $1) $0))))",
        "(lambda (lambda (#(lambda (lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (zip $0 $1 (lambda (lambda (*. $0 $1))))))) (#(lambda (map (lambda (*. $0 $1)))) (#(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))) $1 $1) $0) $0)))",
        "(lambda (lambda (#(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))) $1 (#(lambda (lambda (lambda (/. (*. $1 $2) (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1))))))))) $1 1 $0))))",
        "(lambda (lambda (#(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))) $0 (#(lambda (/. 1. $0)) $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) (*. $0 $0) $1)))",
        "(lambda (lambda (*. $0 (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 $1))))",
        "(lambda (lambda (*. $0 (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $1 $0))))",
        "(lambda (lambda (*. $1 (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 $0))))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) #(lambda (map (lambda (*. $0 $1)))))",
        "(lambda (lambda (#(lambda (map (lambda (*. $0 $1)))) $1 (map (lambda $0) $0))))",
        "(lambda (lambda (map (lambda $0) (#(lambda (map (lambda (*. $0 $1)))) $1 $0))))",
        "(lambda (lambda (map (lambda (*. $0 $2)) $0)))",
        "(lambda (lambda (map (lambda (*. $2 $0)) $0)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (+. $0 $0) $1)))",
        "(lambda (lambda (lambda (lambda (+. (*. $0 (+. $2 (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 $1))) $3)))))",
        "(lambda (lambda (lambda (lambda (+. (*. $0 (+. (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 $1) $2)) $3)))))",
        "(lambda (lambda (lambda (lambda (+. (*. $0 (+. (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $1 $0) $2)) $3)))))",
        "(lambda (lambda (lambda (lambda (+. (*. (+. (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 $1) $2) $0) $3)))))",
        "(lambda (lambda (lambda (lambda (+. (*. (+. (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $1 $0) $2) $0) $3)))))",
        "(lambda (lambda (lambda (+. $2 (*. $0 $1)))))",
        "(lambda (lambda (lambda (+. $2 (*. $1 $0)))))",
        "(lambda (lambda (lambda (+. (*. $0 $1) $2))))",
        "(lambda (lambda (lambda (+. (*. $1 $0) $2))))",
        "(lambda (lambda (lambda (+. $2 (/. $0 (#(lambda (/. 1. $0)) $1))))))",
        "(lambda (#(lambda (lambda (/. (+. $0 $0) $1))) $0 pi))",
        "(lambda (/. $0 (#(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))) $0 pi)))",
        "(lambda (/. pi (#(lambda (lambda (*. $1 (/. $1 (+. $0 $0))))) $0 $0)))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 (#(lambda (/. 1. $0)) pi))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) (#(lambda (/. 1. $0)) pi) $0)))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $1 $2) (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1))))))))) $1 $2 $0))))",
        "(lambda (#(lambda (lambda (lambda ($2 $1 $0)))) (#(lambda (lambda (lambda (/. (*. $1 $2) (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1))))))))) $0)))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $1 $2) (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1))))))))) $1 $2 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $1 $2) (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1))))))))) $2 $1 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $1 $2) (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1))))))))) $1 $2 (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) (cons $0 empty))))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $1 $2) (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1))))))))) $1 $2 $0))))",
        "(lambda (#(lambda (lambda (lambda ($2 $1 $0)))) (#(lambda (lambda (lambda (/. (*. $1 $2) (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1))))))))) $0)))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $1 $2) (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1))))))))) $1 $2 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $1 $2) (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1))))))))) $2 $1 (map (lambda $0) $0)))))",
        "(lambda (lambda (lambda (#(lambda (lambda (lambda (/. (*. $1 $2) (fold $0 0. (lambda (lambda (+. $0 (*. $1 $1))))))))) $1 $2 (#(lambda (fold $0 (map (lambda (*. $0 0.)) (car $0)) (lambda (lambda (zip $0 $1 (lambda (lambda (+. $0 $1)))))))) (cons $0 empty))))))",
        "(lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $0 0 $0 (*. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $0 0 $0 (*. $1 $0))))",
        "(lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $0 0 $1 (*. $0 $0))))",
        "(lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $1 0 $0 (*. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $1 0 $0 (*. $1 $0))))",
        "(lambda (lambda (*. $0 $1)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) *.)",
        "(lambda (lambda (/. $0 (#(lambda (/. 1. $0)) $1))))",
        "(lambda (lambda (/. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 (+. $1 $1))))",
        "(lambda (lambda (*. $0 $1)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) *.)",
        "(lambda (lambda (/. $0 (#(lambda (/. 1. $0)) $1))))",
        "(lambda (lambda (/. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (#(lambda (lambda (/. (*. $0 $1) (+. 1. 1.)))) $0 (+. $1 $1))))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (#(lambda (/. 1. $0)) (*. 1 $0)))",
        "(lambda (#(lambda (/. 1. $0)) $0))",
        "(lambda (/. 1 $0))",
        "(lambda (/. $0 (*. $0 $0)))",
        "(lambda (/. (/. $0 $0) $0))",
        "(lambda (#(lambda (/. 1. $0)) (*. 1 $0)))",
        "(#(lambda (lambda (lambda ($2 $1 $0)))) /.)",
        "(lambda (lambda (*. $1 (#(lambda (/. 1. $0)) $0))))",
        "(lambda (lambda (*. (#(lambda (/. 1. $0)) $0) $1)))",
        "(lambda (lambda (#(lambda (/. 1. $0)) (/. $0 $1))))",
        "(lambda (lambda (#(lambda (lambda (/. (+. $0 $0) $1))) (+. $0 $0) $1)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0))",
        "(lambda (#(lambda (lambda (fold $1 0. (lambda (lambda (+. $0 ($2 $1))))))) $0 (lambda $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (#(lambda (map (lambda (*. $0 $1)))) 1 $0)))",
        "(lambda (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0) 1))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0))",
        "(lambda (#(lambda (lambda (fold $1 0. (lambda (lambda (+. $0 ($2 $1))))))) $0 (lambda $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda $0) $0)))",
        "(lambda (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (#(lambda (map (lambda (*. $0 $1)))) 1 $0)))",
        "(lambda (*. (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) $0) 1))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (lambda (fold $1 0. (lambda (lambda (+. $0 ($2 $1))))))) $0 (lambda (#(lambda (/. 1. $0)) $0)))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (fold $0 0. (lambda (lambda (+. $0 $1))))) (map (lambda (#(lambda (/. 1. $0)) $0)) $0))))",
        "(lambda (/. 1 (#(lambda (lambda (fold $1 0. (lambda (lambda (+. $0 ($2 $1))))))) $0 (lambda (#(lambda (/. 1. $0)) $0)))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (lambda (fold $1 0. (lambda (lambda (+. $0 ($2 $1))))))) $0 (lambda (/. 1 $0)))))",
        "(lambda (#(lambda (/. 1. $0)) (#(lambda (lambda (fold $1 0. (lambda (lambda (+. $0 ($2 $1))))))) (map (lambda (#(lambda (/. 1. $0)) $0)) $0) (lambda $0))))",
        "(lambda (*. $0 (*. $0 pi)))",
        "(lambda (*. $0 (*. pi $0)))",
        "(lambda (*. (*. $0 $0) pi))",
        "(lambda (*. (*. $0 pi) $0))",
        "(lambda (*. (*. pi $0) $0))",
        "(lambda (lambda (+. (*. $0 $0) (*. $1 $1))))",
        "(lambda (lambda (+. (*. $1 $1) (*. $0 $0))))",
        "(lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $0 $0 $1 (-. 0 $1))))",
        "(lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $0 $0 (-. 0 $1) $1)))",
        "(lambda (lambda (#(lambda (lambda (lambda (lambda (-. (*. $2 $3) (*. $0 $1)))))) $1 $1 $0 (-. 0 $0))))"
      ],
      "utility": 1545,
      "expected_cost": 19108,
      "final_cost": 19108,
      "multiplier": 1.0915323424743564,
      "multiplier_wrt_orig": 1.0915323424743564,
      "num_uses": 17,
      "uses": [
        {
          "fn_11 *.": "(lam (lam (*. $1 $0)))"
        },
        {
          "fn_11 +.": "(lam (lam (+. $1 $0)))"
        },
        {
          "fn_11 /.": "(lam (lam (/. $1 $0)))"
        },
        {
          "fn_11 prev_dc_inv_1": "(lam (lam (prev_dc_inv_1 $1 $0)))"
        },
        {
          "fn_11 prev_dc_inv_10": "(lam (lam (prev_dc_inv_10 $1 $0)))"
        },
        {
          "fn_11 prev_dc_inv_3": "(lam (lam (prev_dc_inv_3 $1 $0)))"
        },
        {
          "fn_11 prev_dc_inv_4": "(lam (lam (prev_dc_inv_4 $1 $0)))"
        },
        {
          "fn_11 (prev_dc_inv_8 $0)": "(lam (lam (prev_dc_inv_8 $2 $1 $0)))"
        }
      ]
    }
  ]
}