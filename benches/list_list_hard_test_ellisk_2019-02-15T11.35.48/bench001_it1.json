{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.345933,
        "productions": [
            {
                "expression": "is-square",
                "logProbability": -0.01381
            },
            {
                "expression": "is-prime",
                "logProbability": -0.020149
            },
            {
                "expression": "gt?",
                "logProbability": -0.031752
            },
            {
                "expression": "empty?",
                "logProbability": -0.032926
            },
            {
                "expression": "eq?",
                "logProbability": -0.032926
            },
            {
                "expression": "cdr",
                "logProbability": -0.455945
            },
            {
                "expression": "range",
                "logProbability": -0.485867
            },
            {
                "expression": "map",
                "logProbability": -0.486514
            },
            {
                "expression": "cons",
                "logProbability": -0.486932
            },
            {
                "expression": "empty",
                "logProbability": -0.551236
            },
            {
                "expression": "unfold",
                "logProbability": -0.551478
            },
            {
                "expression": "+",
                "logProbability": -0.596786
            },
            {
                "expression": "1",
                "logProbability": -0.602316
            },
            {
                "expression": "-",
                "logProbability": -0.633566
            },
            {
                "expression": "length",
                "logProbability": -0.645703
            },
            {
                "expression": "*",
                "logProbability": -0.647049
            },
            {
                "expression": "mod",
                "logProbability": -0.647056
            },
            {
                "expression": "0",
                "logProbability": -0.670911
            },
            {
                "expression": "fold",
                "logProbability": -0.883738
            },
            {
                "expression": "index",
                "logProbability": -0.97331
            },
            {
                "expression": "car",
                "logProbability": -0.978661
            },
            {
                "expression": "if",
                "logProbability": -1.008895
            },
            {
                "expression": "#(lambda (cons (car $0) (cons (car (cdr $0)) empty)))",
                "logProbability": -0.486941
            },
            {
                "expression": "#(+ 1 1)",
                "logProbability": -0.615309
            }
        ]
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "append-k with k=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 (cons (+ 1 (+ #(+ 1 1) #(+ 1 1))) empty) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (cons (+ #(+ 1 1) (+ 1 #(+ 1 1))) empty) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "caesar-cipher-k-modulo-n with k=5 and n=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (index $0 (cons #(+ 1 1) (range $0)))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index $0 (cons #(+ 1 1) (range (+ $0 $0))))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "has-k with k=0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (empty? (range (fold $0 1 (lambda (lambda (* $0 $1)))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (empty? (range (fold $0 1 (lambda (lambda (* $1 $0)))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "index-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (car $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (index 0 $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "index-k with k=5",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (index #(+ 1 1) (cdr (cdr $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (index (+ #(+ 1 1) #(+ 1 1)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "is-mod-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "bool",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (is-square (fold $0 1 (lambda (lambda (+ $0 (mod $1 #(+ 1 1))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (is-prime (fold $0 #(+ 1 1) (lambda (lambda (- $0 (mod $1 $0)))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "kth-largest with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 1 (lambda (lambda (+ $0 (length (range (- $1 $0))))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 1 (lambda (lambda (+ $1 (length (range (- $0 $1))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "len",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (length $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (length (range (length $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "modulo-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (mod $0 #(+ 1 1))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda $0) (map (lambda (mod $0 #(+ 1 1))) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "mult-k with k=0",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda 0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (length empty)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "mult-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (+ $0 $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "prepend-index-k with k=1",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cons (car $0) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (car (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "product",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "int",
                        "arguments": []
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 1 (lambda (lambda (* $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "repeat-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 (map (lambda $0) $0) (lambda (lambda (cons $1 $0)))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "slice-k-n with k=4 and n=3",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "take-k with k=2",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index $0 $1)) (range #(+ 1 1))))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 1,
        "num_learned": 2,
        "new_grammar": {
            "logVariable": -0.420156,
            "productions": [
                {
                    "expression": "is-square",
                    "logProbability": -0.04644
                },
                {
                    "expression": "gt?",
                    "logProbability": -0.047388
                },
                {
                    "expression": "empty?",
                    "logProbability": -0.049337
                },
                {
                    "expression": "is-prime",
                    "logProbability": -0.052524
                },
                {
                    "expression": "eq?",
                    "logProbability": -0.065449
                },
                {
                    "expression": "+",
                    "logProbability": -0.711712
                },
                {
                    "expression": "map",
                    "logProbability": -0.727566
                },
                {
                    "expression": "cons",
                    "logProbability": -0.72951
                },
                {
                    "expression": "cdr",
                    "logProbability": -0.73706
                },
                {
                    "expression": "1",
                    "logProbability": -0.769998
                },
                {
                    "expression": "range",
                    "logProbability": -0.773835
                },
                {
                    "expression": "length",
                    "logProbability": -0.796067
                },
                {
                    "expression": "mod",
                    "logProbability": -0.799575
                },
                {
                    "expression": "-",
                    "logProbability": -0.817508
                },
                {
                    "expression": "empty",
                    "logProbability": -0.819174
                },
                {
                    "expression": "0",
                    "logProbability": -0.823789
                },
                {
                    "expression": "*",
                    "logProbability": -0.853856
                },
                {
                    "expression": "unfold",
                    "logProbability": -0.854678
                },
                {
                    "expression": "fold",
                    "logProbability": -1.237009
                },
                {
                    "expression": "index",
                    "logProbability": -1.263721
                },
                {
                    "expression": "car",
                    "logProbability": -1.271842
                },
                {
                    "expression": "if",
                    "logProbability": -1.332315
                },
                {
                    "expression": "#(+ 1 1)",
                    "logProbability": -0.664985
                },
                {
                    "expression": "#(lambda (cons (car $0) (cons (car (cdr $0)) empty)))",
                    "logProbability": -0.787934
                },
                {
                    "expression": "#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0))))))",
                    "logProbability": -0.79014
                },
                {
                    "expression": "#(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))",
                    "logProbability": -0.799826
                }
            ]
        }
    }
}