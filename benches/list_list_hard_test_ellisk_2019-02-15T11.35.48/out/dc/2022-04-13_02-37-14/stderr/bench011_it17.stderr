Stitch mode: none
Will write compression messages to cm_out_dir:  compressionMessages
Compression backend will run for most 20 iterations
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Found 0 alignments; 
Total number of candidates: 44607
Constructed version spaces and coalesced candidates in 10.3003s.
Timing point -1 right before normalizing: 12.5826s.
Trimmed down the beam, have only 300 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 12.5854s.
Timing Comparison Point A (vspace+beam) (millis): 12585
Rewrote topK in 14.9429s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 14.9433s.
sanity check for timing comparison, should be same as comparison point: 27.5287s.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 27528
Initial score: -1361.623036
Initial language score: 0.000000
Initial joint score: -1361.623036 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 7.39686s.
Best MDL score: -1350.378587 with (lambda (lambda (#(lambda (fold $0 1 (lambda (lambda (+ $0 (length (range (- $1 $0)))))))) (#(lambda (lambda (#(lambda (fold $0 empty)) $1 (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $1 (length (#(lambda (lambda (#(lambda (fold $0 empty)) $1 (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $2 (lambda (gt? $1 $0))))))))))
Scored candidates with language and grammar in 6.51329s.
Best joint score: -1350.378587 with (lambda (lambda (#(lambda (fold $0 1 (lambda (lambda (+ $0 (length (range (- $1 $0)))))))) (#(lambda (lambda (#(lambda (fold $0 empty)) $1 (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $1 (length (#(lambda (lambda (#(lambda (fold $0 empty)) $1 (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $2 (lambda (gt? $1 $0))))))))))
Timing point 3 (all scoring): 13.9543s.
Improved score to -1350.378587 (dScore=11.244449) w/ new primitive
	#(lambda (lambda (#(lambda (fold $0 1 (lambda (lambda (+ $0 (length (range (- $1 $0)))))))) (#(lambda (lambda (#(lambda (fold $0 empty)) $1 (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $1 (length (#(lambda (lambda (#(lambda (fold $0 empty)) $1 (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $2 (lambda (gt? $1 $0)))))))))) : list(int) -> int -> int
rewrote all of the frontiers in 6.10099s.
Timing point 4 (rewrite final frontiers): 6.10104s.
Completed one step of memory consolidation in 47.6152s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (#(lambda (fold $0 1 (lambda (lambda (+ $0 (length (range (- $1 $0)))))))) (#(lambda (lambda (#(lambda (fold $0 empty)) $1 (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $1 (length (#(lambda (lambda (#(lambda (fold $0 empty)) $1 (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $2 (lambda (gt? $1 $0)))))))))) $0 #(+ 1 #(+ 1 1))))
  (lambda (#(lambda (lambda (#(lambda (fold $0 1 (lambda (lambda (+ $0 (length (range (- $1 $0)))))))) (#(lambda (lambda (#(lambda (fold $0 empty)) $1 (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $1 (lambda (gt? $1 (length (#(lambda (lambda (#(lambda (fold $0 empty)) $1 (lambda (lambda (if ($2 $1) (cons $1 $0) $0)))))) $2 (lambda (gt? $1 $0)))))))))) $0 #(+ #(+ 1 1) #(+ 1 1))))
Total number of candidates: 33625
Constructed version spaces and coalesced candidates in 11.4835s.
Timing point -1 right before normalizing: 14.2906s.
Trimmed down the beam, have only 300 best candidates
Timing point 1 (from start of compression_step_master to having topI candidates): 14.2977s.
Timing Comparison Point A (vspace+beam) (millis): 14297
Rewrote topK in 15.4792s.
Timing point 2 (from having topI candidates to BatchedRewrite under them): 15.4795s.
sanity check for timing comparison, should be same as comparison point: 29.7773s.
Timing Comparison Point B (vspace+beam+batched_rewrite) (millis): 29777
Initial score: -1351.117620
Initial language score: 0.000000
Initial joint score: -1351.117620 using LC of 0.000000
Here in the master worker: we still have 0 language alignments;
Scored candidates in 6.78176s.
Best MDL score: -1352.416573 with (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0) $0))
No improvement possible with MDL.
Scored candidates with language and grammar in 6.70437s.
Best joint score: -1352.416573 with (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0) $0))
Timing point 3 (all scoring): 13.5338s.
No improvement possible with joint score.
Completed one step of memory consolidation in 43.3119s.
completed ocaml compression in 1.51567m.
	Command being timed: "/scratch/mlbowers/proj/stitch/experiments/compression benches/list_list_hard_test_ellisk_2019-02-15T11.35.48/bench011_it17.json"
	User time (seconds): 32.98
	System time (seconds): 0.36
	Percent of CPU this job got: 36%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 1:31.00
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 306248
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 267063
	Voluntary context switches: 276
	Involuntary context switches: 3387
	Swaps: 0
	File system inputs: 0
	File system outputs: 176
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
