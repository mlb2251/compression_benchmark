{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.35.48/bench005_it5.json --max-arity=3 --threads=1 --iterations=3 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.35.48/out/stitch/2022-10-04_19-35-55/raw/bench005_it5.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.35.48/bench005_it5.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.35.48/out/stitch/2022-10-04_19-35-55/raw/bench005_it5.json",
    "iterations": 3,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 64422,
  "original": [
    "(lam (map (lam (+ $0 1)) $0))",
    "(lam (map (lam (+ 1 $0)) $0))",
    "(lam (prev_dc_inv_6 $0 (index prev_dc_inv_0 $0)))",
    "(lam (prev_dc_inv_5 $0 (cdr (prev_dc_inv_4 (cdr $0)))))",
    "(lam (prev_dc_inv_6 $0 0))",
    "(lam (prev_dc_inv_5 $0 (range 1)))",
    "(lam (prev_dc_inv_6 $0 (+ prev_dc_inv_0 1)))",
    "(lam (prev_dc_inv_6 $0 (+ 1 prev_dc_inv_0)))",
    "(lam (prev_dc_inv_6 $0 (+ 1 prev_dc_inv_1)))",
    "(lam (prev_dc_inv_6 $0 (+ prev_dc_inv_0 (+ 1 prev_dc_inv_0))))",
    "(lam (map (lam (eq? (length (range $0)) $0)) $0))",
    "(lam (map (lam (eq? $0 (length (range $0)))) $0))",
    "(lam (map (lam (gt? $0 0)) $0))",
    "(lam (map (lam (gt? $0 (length empty))) $0))",
    "(lam (map (lam (gt? 1 (mod $0 (+ prev_dc_inv_0 1)))) $0))",
    "(lam (map (lam (gt? 1 (mod $0 (+ 1 prev_dc_inv_0)))) $0))",
    "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_1))) $0))",
    "(lam (map (lam (eq? (mod $0 prev_dc_inv_1) 0)) $0))",
    "(lam (map (lam (eq? $0 (+ prev_dc_inv_0 1))) $0))",
    "(lam (map (lam (eq? $0 (+ 1 prev_dc_inv_0))) $0))",
    "(lam (prev_dc_inv_2 $0))",
    "(lam (map (lam (if (is-prime $0) 0 (+ 1 $0))) $0))",
    "(lam (prev_dc_inv_2 $0))",
    "(lam (map (lam (if (is-prime $0) 0 (+ 1 $0))) $0))",
    "(lam (map (lam (- 1 $0)) $0))",
    "(lam (map (lam (prev_dc_inv_3 (range $0))) $0))",
    "(lam (map (lam (index $0 (cons prev_dc_inv_0 (range $0)))) $0))",
    "(lam (map (lam (index $0 (cons prev_dc_inv_0 (range (+ $0 $0))))) $0))",
    "(lam (fold $0 0 (lam (lam (+ $0 (prev_dc_inv_3 (range $1)))))))",
    "(lam (fold $0 0 (lam (lam (+ (prev_dc_inv_3 (range $1)) $0)))))",
    "(lam (fold $0 0 (lam (lam (+ $0 (if (eq? $1 (+ prev_dc_inv_0 1)) 1 0))))))",
    "(lam (fold $0 0 (lam (lam (+ $0 (if (eq? $1 (+ 1 prev_dc_inv_0)) 1 0))))))",
    "(lam (fold $0 empty (lam (lam (if (eq? (mod $1 prev_dc_inv_0) 0) (cons $1 $0) $0)))))",
    "(lam (gt? 1 (prev_dc_inv_3 $0)))",
    "(lam (empty? (range (prev_dc_inv_3 $0))))",
    "(lam (gt? (mod (fold $0 0 (lam (lam $1))) prev_dc_inv_1) 0))",
    "(lam (gt? (mod (fold $0 prev_dc_inv_1 (lam (lam $1))) prev_dc_inv_1) 0))",
    "(lam (is-prime (index prev_dc_inv_0 (prev_dc_inv_6 (prev_dc_inv_5 $0 (range prev_dc_inv_0)) 1))))",
    "(lam (is-prime (index prev_dc_inv_0 (prev_dc_inv_5 $0 (prev_dc_inv_6 (range prev_dc_inv_0) 1)))))",
    "(lam (car $0))",
    "(lam (index 0 $0))",
    "(lam (index prev_dc_inv_0 $0))",
    "(lam (index 1 (cdr $0)))",
    "(lam (index prev_dc_inv_1 $0))",
    "(lam (index (* prev_dc_inv_0 prev_dc_inv_0) $0))",
    "(lam (is-square (fold $0 1 (lam (lam (+ $0 (mod $1 prev_dc_inv_0)))))))",
    "(lam (is-prime (fold $0 prev_dc_inv_0 (lam (lam (- $0 (mod $1 $0)))))))",
    "(lam (gt? (prev_dc_inv_3 (prev_dc_inv_2 (prev_dc_inv_2 (map (lam (+ prev_dc_inv_0 $0)) $0)))) 0))",
    "(lam (gt? (prev_dc_inv_3 (prev_dc_inv_2 (prev_dc_inv_2 (map (lam (+ $0 prev_dc_inv_0)) $0)))) 0))",
    "(lam (fold $0 (is-prime prev_dc_inv_0) (lam (lam (if $0 (is-prime $1) $0)))))",
    "(lam (fold $0 (is-square 1) (lam (lam (if $0 (is-prime $1) $0)))))",
    "(lam (fold $0 1 (lam (lam (+ $0 (length (range (- $1 $0))))))))",
    "(lam (fold $0 1 (lam (lam (+ $1 (length (range (- $0 $1))))))))",
    "(lam (length $0))",
    "(lam (length (range (length $0))))",
    "(lam (map (lam 0) $0))",
    "(lam (map (lam (length empty)) $0))",
    "(lam (map (lam (mod $0 prev_dc_inv_0)) $0))",
    "(lam (map (lam $0) (map (lam (mod $0 prev_dc_inv_0)) $0)))",
    "(lam (map (lam (mod $0 prev_dc_inv_1)) $0))",
    "(lam (map (lam $0) (map (lam (mod $0 prev_dc_inv_1)) $0)))",
    "(lam (map (lam 0) $0))",
    "(lam (map (lam (length empty)) $0))",
    "(lam (map (lam (+ $0 $0)) $0))",
    "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
    "(lam (map (lam (+ $0 (+ $0 $0))) $0))",
    "(lam (map (lam (+ $0 (* prev_dc_inv_0 $0))) $0))",
    "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
    "(lam (map (lam (index $0 $1)) (range (- (length $0) 1))))",
    "(lam (cons (car $0) $0))",
    "(lam (cons (index 0 $0) $0))",
    "(lam (prev_dc_inv_5 (cdr (prev_dc_inv_4 $0)) $0))",
    "(lam (cdr (prev_dc_inv_5 (prev_dc_inv_4 $0) $0)))",
    "(lam (cons (car (prev_dc_inv_7 $0)) $0))",
    "(lam (cons (index prev_dc_inv_0 (cdr $0)) $0))",
    "(lam (prev_dc_inv_3 $0))",
    "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
    "(lam (cons (car $0) (cdr (cdr $0))))",
    "(lam (cons (index 0 $0) (cdr (cdr $0))))",
    "(lam (prev_dc_inv_5 $0 $0))",
    "(lam (prev_dc_inv_5 $0 (map (lam $0) $0)))",
    "(lam (fold (range (car $0)) empty (lam (lam (prev_dc_inv_5 $0 (cdr $2))))))",
    "(lam (fold (range (car $0)) empty (lam (lam (prev_dc_inv_5 (cdr $2) $0)))))",
    "(lam (fold $0 empty (lam (lam (prev_dc_inv_6 $0 $1)))))",
    "(lam (fold $0 $0 (lam (lam (prev_dc_inv_6 (cdr $0) $1)))))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_5 (prev_dc_inv_4 $0) $0)))",
    "(lam (prev_dc_inv_7 (prev_dc_inv_5 (range prev_dc_inv_0) $0)))",
    "(lam (prev_dc_inv_5 (prev_dc_inv_4 (cdr $0)) (prev_dc_inv_7 $0)))",
    "(lam (fold (cdr $0) $0 (lam (lam (cons $1 (prev_dc_inv_5 (prev_dc_inv_4 $0) (prev_dc_inv_4 (cdr (cdr $0)))))))))",
    "(lam (prev_dc_inv_7 $0))",
    "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0) (cdr (prev_dc_inv_7 (cdr (cdr $0))))))",
    "(lam (prev_dc_inv_5 (prev_dc_inv_4 (prev_dc_inv_7 $0)) (prev_dc_inv_7 (cdr (cdr $0)))))",
    "(lam (prev_dc_inv_4 $0))",
    "(lam (map (lam (index $0 $1)) (range prev_dc_inv_0)))",
    "(lam (fold $0 empty (lam (lam (prev_dc_inv_5 $0 (range (- 1 $1)))))))",
    "(lam (fold $0 empty (lam (lam (prev_dc_inv_5 (range (- 1 $1)) $0)))))",
    "(lam (fold $0 empty (lam (lam (if (eq? $1 1) (prev_dc_inv_6 $0 $1) $0)))))",
    "(lam (fold $0 empty (lam (lam (if (is-prime (+ $1 $1)) (prev_dc_inv_6 $0 $1) $0)))))"
  ],
  "invs": [
    {
      "body": "(lam (map #0 $0))",
      "dreamcoder": "#(lambda (lambda (map $1 $0)))",
      "arity": 1,
      "name": "fn_8",
      "rewritten": [
        "(fn_8 (lam (+ $0 1)))",
        "(fn_8 (lam (+ 1 $0)))",
        "(lam (prev_dc_inv_6 $0 (index prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_5 $0 (cdr (prev_dc_inv_4 (cdr $0)))))",
        "(lam (prev_dc_inv_6 $0 0))",
        "(lam (prev_dc_inv_5 $0 (range 1)))",
        "(lam (prev_dc_inv_6 $0 (+ prev_dc_inv_0 1)))",
        "(lam (prev_dc_inv_6 $0 (+ 1 prev_dc_inv_0)))",
        "(lam (prev_dc_inv_6 $0 (+ 1 prev_dc_inv_1)))",
        "(lam (prev_dc_inv_6 $0 (+ prev_dc_inv_0 (+ 1 prev_dc_inv_0))))",
        "(fn_8 (lam (eq? (length (range $0)) $0)))",
        "(fn_8 (lam (eq? $0 (length (range $0)))))",
        "(fn_8 (lam (gt? $0 0)))",
        "(fn_8 (lam (gt? $0 (length empty))))",
        "(fn_8 (lam (gt? 1 (mod $0 (+ prev_dc_inv_0 1)))))",
        "(fn_8 (lam (gt? 1 (mod $0 (+ 1 prev_dc_inv_0)))))",
        "(fn_8 (lam (gt? 1 (mod $0 prev_dc_inv_1))))",
        "(fn_8 (lam (eq? (mod $0 prev_dc_inv_1) 0)))",
        "(fn_8 (lam (eq? $0 (+ prev_dc_inv_0 1))))",
        "(fn_8 (lam (eq? $0 (+ 1 prev_dc_inv_0))))",
        "(lam (prev_dc_inv_2 $0))",
        "(fn_8 (lam (if (is-prime $0) 0 (+ 1 $0))))",
        "(lam (prev_dc_inv_2 $0))",
        "(fn_8 (lam (if (is-prime $0) 0 (+ 1 $0))))",
        "(fn_8 (lam (- 1 $0)))",
        "(fn_8 (lam (prev_dc_inv_3 (range $0))))",
        "(fn_8 (lam (index $0 (cons prev_dc_inv_0 (range $0)))))",
        "(fn_8 (lam (index $0 (cons prev_dc_inv_0 (range (+ $0 $0))))))",
        "(lam (fold $0 0 (lam (lam (+ $0 (prev_dc_inv_3 (range $1)))))))",
        "(lam (fold $0 0 (lam (lam (+ (prev_dc_inv_3 (range $1)) $0)))))",
        "(lam (fold $0 0 (lam (lam (+ $0 (if (eq? $1 (+ prev_dc_inv_0 1)) 1 0))))))",
        "(lam (fold $0 0 (lam (lam (+ $0 (if (eq? $1 (+ 1 prev_dc_inv_0)) 1 0))))))",
        "(lam (fold $0 empty (lam (lam (if (eq? (mod $1 prev_dc_inv_0) 0) (cons $1 $0) $0)))))",
        "(lam (gt? 1 (prev_dc_inv_3 $0)))",
        "(lam (empty? (range (prev_dc_inv_3 $0))))",
        "(lam (gt? (mod (fold $0 0 (lam (lam $1))) prev_dc_inv_1) 0))",
        "(lam (gt? (mod (fold $0 prev_dc_inv_1 (lam (lam $1))) prev_dc_inv_1) 0))",
        "(lam (is-prime (index prev_dc_inv_0 (prev_dc_inv_6 (prev_dc_inv_5 $0 (range prev_dc_inv_0)) 1))))",
        "(lam (is-prime (index prev_dc_inv_0 (prev_dc_inv_5 $0 (prev_dc_inv_6 (range prev_dc_inv_0) 1)))))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (index prev_dc_inv_0 $0))",
        "(lam (index 1 (cdr $0)))",
        "(lam (index prev_dc_inv_1 $0))",
        "(lam (index (* prev_dc_inv_0 prev_dc_inv_0) $0))",
        "(lam (is-square (fold $0 1 (lam (lam (+ $0 (mod $1 prev_dc_inv_0)))))))",
        "(lam (is-prime (fold $0 prev_dc_inv_0 (lam (lam (- $0 (mod $1 $0)))))))",
        "(lam (gt? (prev_dc_inv_3 (prev_dc_inv_2 (prev_dc_inv_2 (map (lam (+ prev_dc_inv_0 $0)) $0)))) 0))",
        "(lam (gt? (prev_dc_inv_3 (prev_dc_inv_2 (prev_dc_inv_2 (map (lam (+ $0 prev_dc_inv_0)) $0)))) 0))",
        "(lam (fold $0 (is-prime prev_dc_inv_0) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (fold $0 (is-square 1) (lam (lam (if $0 (is-prime $1) $0)))))",
        "(lam (fold $0 1 (lam (lam (+ $0 (length (range (- $1 $0))))))))",
        "(lam (fold $0 1 (lam (lam (+ $1 (length (range (- $0 $1))))))))",
        "(lam (length $0))",
        "(lam (length (range (length $0))))",
        "(fn_8 (lam 0))",
        "(fn_8 (lam (length empty)))",
        "(fn_8 (lam (mod $0 prev_dc_inv_0)))",
        "(lam (map (lam $0) (map (lam (mod $0 prev_dc_inv_0)) $0)))",
        "(fn_8 (lam (mod $0 prev_dc_inv_1)))",
        "(lam (map (lam $0) (map (lam (mod $0 prev_dc_inv_1)) $0)))",
        "(fn_8 (lam 0))",
        "(fn_8 (lam (length empty)))",
        "(fn_8 (lam (+ $0 $0)))",
        "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
        "(fn_8 (lam (+ $0 (+ $0 $0))))",
        "(fn_8 (lam (+ $0 (* prev_dc_inv_0 $0))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
        "(lam (map (lam (index $0 $1)) (range (- (length $0) 1))))",
        "(lam (cons (car $0) $0))",
        "(lam (cons (index 0 $0) $0))",
        "(lam (prev_dc_inv_5 (cdr (prev_dc_inv_4 $0)) $0))",
        "(lam (cdr (prev_dc_inv_5 (prev_dc_inv_4 $0) $0)))",
        "(lam (cons (car (prev_dc_inv_7 $0)) $0))",
        "(lam (cons (index prev_dc_inv_0 (cdr $0)) $0))",
        "(lam (prev_dc_inv_3 $0))",
        "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
        "(lam (cons (car $0) (cdr (cdr $0))))",
        "(lam (cons (index 0 $0) (cdr (cdr $0))))",
        "(lam (prev_dc_inv_5 $0 $0))",
        "(lam (prev_dc_inv_5 $0 (map (lam $0) $0)))",
        "(lam (fold (range (car $0)) empty (lam (lam (prev_dc_inv_5 $0 (cdr $2))))))",
        "(lam (fold (range (car $0)) empty (lam (lam (prev_dc_inv_5 (cdr $2) $0)))))",
        "(lam (fold $0 empty (lam (lam (prev_dc_inv_6 $0 $1)))))",
        "(lam (fold $0 $0 (lam (lam (prev_dc_inv_6 (cdr $0) $1)))))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 (prev_dc_inv_4 $0) $0)))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 (range prev_dc_inv_0) $0)))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_4 (cdr $0)) (prev_dc_inv_7 $0)))",
        "(lam (fold (cdr $0) $0 (lam (lam (cons $1 (prev_dc_inv_5 (prev_dc_inv_4 $0) (prev_dc_inv_4 (cdr (cdr $0)))))))))",
        "(lam (prev_dc_inv_7 $0))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0) (cdr (prev_dc_inv_7 (cdr (cdr $0))))))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_4 (prev_dc_inv_7 $0)) (prev_dc_inv_7 (cdr (cdr $0)))))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (map (lam (index $0 $1)) (range prev_dc_inv_0)))",
        "(lam (fold $0 empty (lam (lam (prev_dc_inv_5 $0 (range (- 1 $1)))))))",
        "(lam (fold $0 empty (lam (lam (prev_dc_inv_5 (range (- 1 $1)) $0)))))",
        "(lam (fold $0 empty (lam (lam (if (eq? $1 1) (prev_dc_inv_6 $0 $1) $0)))))",
        "(lam (fold $0 empty (lam (lam (if (is-prime (+ $1 $1)) (prev_dc_inv_6 $0 $1) $0)))))"
      ],
      "rewritten_dreamcoder": [
        "(#(lambda (lambda (map $1 $0))) (lambda (+ $0 1)))",
        "(#(lambda (lambda (map $1 $0))) (lambda (+ 1 $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (index #(+ 1 1) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cdr (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) (cdr $0)))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (range 1)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (+ #(+ 1 1) 1)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (+ 1 #(+ 1 1))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (+ 1 #(+ #(+ 1 1) #(+ 1 1)))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (+ #(+ 1 1) (+ 1 #(+ 1 1)))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (eq? (length (range $0)) $0)))",
        "(#(lambda (lambda (map $1 $0))) (lambda (eq? $0 (length (range $0)))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (gt? $0 0)))",
        "(#(lambda (lambda (map $1 $0))) (lambda (gt? $0 (length empty))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (gt? 1 (mod $0 (+ #(+ 1 1) 1)))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (gt? 1 (mod $0 (+ 1 #(+ 1 1))))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (gt? 1 (mod $0 #(+ #(+ 1 1) #(+ 1 1))))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (eq? (mod $0 #(+ #(+ 1 1) #(+ 1 1))) 0)))",
        "(#(lambda (lambda (map $1 $0))) (lambda (eq? $0 (+ #(+ 1 1) 1))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (eq? $0 (+ 1 #(+ 1 1)))))",
        "(lambda (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) $0))",
        "(#(lambda (lambda (map $1 $0))) (lambda (if (is-prime $0) 0 (+ 1 $0))))",
        "(lambda (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) $0))",
        "(#(lambda (lambda (map $1 $0))) (lambda (if (is-prime $0) 0 (+ 1 $0))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (- 1 $0)))",
        "(#(lambda (lambda (map $1 $0))) (lambda (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (range $0))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (index $0 (cons #(+ 1 1) (range $0)))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (index $0 (cons #(+ 1 1) (range (+ $0 $0))))))",
        "(lambda (fold $0 0 (lambda (lambda (+ $0 (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (range $1)))))))",
        "(lambda (fold $0 0 (lambda (lambda (+ (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (range $1)) $0)))))",
        "(lambda (fold $0 0 (lambda (lambda (+ $0 (if (eq? $1 (+ #(+ 1 1) 1)) 1 0))))))",
        "(lambda (fold $0 0 (lambda (lambda (+ $0 (if (eq? $1 (+ 1 #(+ 1 1))) 1 0))))))",
        "(lambda (fold $0 empty (lambda (lambda (if (eq? (mod $1 #(+ 1 1)) 0) (cons $1 $0) $0)))))",
        "(lambda (gt? 1 (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) $0)))",
        "(lambda (empty? (range (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) $0))))",
        "(lambda (gt? (mod (fold $0 0 (lambda (lambda $1))) #(+ #(+ 1 1) #(+ 1 1))) 0))",
        "(lambda (gt? (mod (fold $0 #(+ #(+ 1 1) #(+ 1 1)) (lambda (lambda $1))) #(+ #(+ 1 1) #(+ 1 1))) 0))",
        "(lambda (is-prime (index #(+ 1 1) (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (range #(+ 1 1))) 1))))",
        "(lambda (is-prime (index #(+ 1 1) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) (range #(+ 1 1)) 1)))))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (index #(+ 1 1) $0))",
        "(lambda (index 1 (cdr $0)))",
        "(lambda (index #(+ #(+ 1 1) #(+ 1 1)) $0))",
        "(lambda (index (* #(+ 1 1) #(+ 1 1)) $0))",
        "(lambda (is-square (fold $0 1 (lambda (lambda (+ $0 (mod $1 #(+ 1 1))))))))",
        "(lambda (is-prime (fold $0 #(+ 1 1) (lambda (lambda (- $0 (mod $1 $0)))))))",
        "(lambda (gt? (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) (map (lambda (+ #(+ 1 1) $0)) $0)))) 0))",
        "(lambda (gt? (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) (map (lambda (+ $0 #(+ 1 1))) $0)))) 0))",
        "(lambda (fold $0 (is-prime #(+ 1 1)) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (fold $0 (is-square 1) (lambda (lambda (if $0 (is-prime $1) $0)))))",
        "(lambda (fold $0 1 (lambda (lambda (+ $0 (length (range (- $1 $0))))))))",
        "(lambda (fold $0 1 (lambda (lambda (+ $1 (length (range (- $0 $1))))))))",
        "(lambda (length $0))",
        "(lambda (length (range (length $0))))",
        "(#(lambda (lambda (map $1 $0))) (lambda 0))",
        "(#(lambda (lambda (map $1 $0))) (lambda (length empty)))",
        "(#(lambda (lambda (map $1 $0))) (lambda (mod $0 #(+ 1 1))))",
        "(lambda (map (lambda $0) (map (lambda (mod $0 #(+ 1 1))) $0)))",
        "(#(lambda (lambda (map $1 $0))) (lambda (mod $0 #(+ #(+ 1 1) #(+ 1 1)))))",
        "(lambda (map (lambda $0) (map (lambda (mod $0 #(+ #(+ 1 1) #(+ 1 1)))) $0)))",
        "(#(lambda (lambda (map $1 $0))) (lambda 0))",
        "(#(lambda (lambda (map $1 $0))) (lambda (length empty)))",
        "(#(lambda (lambda (map $1 $0))) (lambda (+ $0 $0)))",
        "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
        "(#(lambda (lambda (map $1 $0))) (lambda (+ $0 (+ $0 $0))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (+ $0 (* #(+ 1 1) $0))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (- (length $0) 1))))",
        "(lambda (cons (car $0) $0))",
        "(lambda (cons (index 0 $0) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (cdr (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)) $0))",
        "(lambda (cdr (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0) $0)))",
        "(lambda (cons (car (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0)) $0))",
        "(lambda (cons (index #(+ 1 1) (cdr $0)) $0))",
        "(lambda (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) $0))",
        "(lambda (fold $0 1 (lambda (lambda (* $1 $0)))))",
        "(lambda (cons (car $0) (cdr (cdr $0))))",
        "(lambda (cons (index 0 $0) (cdr (cdr $0))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $0)))",
        "(lambda (fold (range (car $0)) empty (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cdr $2))))))",
        "(lambda (fold (range (car $0)) empty (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (cdr $2) $0)))))",
        "(lambda (fold $0 empty (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 $1)))))",
        "(lambda (fold $0 $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) (cdr $0) $1)))))",
        "(lambda (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0) $0)))",
        "(lambda (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (range #(+ 1 1)) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) (cdr $0)) (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0)))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cons $1 (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) (cdr (cdr $0)))))))))",
        "(lambda (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0) (cdr (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) (cdr (cdr $0))))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0)) (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) (cdr (cdr $0)))))",
        "(lambda (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0))",
        "(lambda (map (lambda (index $0 $1)) (range #(+ 1 1))))",
        "(lambda (fold $0 empty (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (range (- 1 $1)))))))",
        "(lambda (fold $0 empty (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (range (- 1 $1)) $0)))))",
        "(lambda (fold $0 empty (lambda (lambda (if (eq? $1 1) (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 $1) $0)))))",
        "(lambda (fold $0 empty (lambda (lambda (if (is-prime (+ $1 $1)) (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 $1) $0)))))"
      ],
      "utility": 1225,
      "expected_cost": 28607,
      "final_cost": 28607,
      "multiplier": 1.049917852273919,
      "multiplier_wrt_orig": 1.049917852273919,
      "num_uses": 27,
      "uses": [
        {
          "fn_8 (lam (+ $0 $0))": "(lam (map (lam (+ $0 $0)) $0))"
        },
        {
          "fn_8 (lam (+ $0 (* prev_dc_inv_0 $0)))": "(lam (map (lam (+ $0 (* prev_dc_inv_0 $0))) $0))"
        },
        {
          "fn_8 (lam (+ $0 (+ $0 $0)))": "(lam (map (lam (+ $0 (+ $0 $0))) $0))"
        },
        {
          "fn_8 (lam (+ $0 1))": "(lam (map (lam (+ $0 1)) $0))"
        },
        {
          "fn_8 (lam (+ 1 $0))": "(lam (map (lam (+ 1 $0)) $0))"
        },
        {
          "fn_8 (lam (- 1 $0))": "(lam (map (lam (- 1 $0)) $0))"
        },
        {
          "fn_8 (lam (eq? $0 (+ 1 prev_dc_inv_0)))": "(lam (map (lam (eq? $0 (+ 1 prev_dc_inv_0))) $0))"
        },
        {
          "fn_8 (lam (eq? $0 (+ prev_dc_inv_0 1)))": "(lam (map (lam (eq? $0 (+ prev_dc_inv_0 1))) $0))"
        },
        {
          "fn_8 (lam (eq? $0 (length (range $0))))": "(lam (map (lam (eq? $0 (length (range $0)))) $0))"
        },
        {
          "fn_8 (lam (eq? (length (range $0)) $0))": "(lam (map (lam (eq? (length (range $0)) $0)) $0))"
        },
        {
          "fn_8 (lam (eq? (mod $0 prev_dc_inv_1) 0))": "(lam (map (lam (eq? (mod $0 prev_dc_inv_1) 0)) $0))"
        },
        {
          "fn_8 (lam (gt? $0 (length empty)))": "(lam (map (lam (gt? $0 (length empty))) $0))"
        },
        {
          "fn_8 (lam (gt? $0 0))": "(lam (map (lam (gt? $0 0)) $0))"
        },
        {
          "fn_8 (lam (gt? 1 (mod $0 (+ 1 prev_dc_inv_0))))": "(lam (map (lam (gt? 1 (mod $0 (+ 1 prev_dc_inv_0)))) $0))"
        },
        {
          "fn_8 (lam (gt? 1 (mod $0 (+ prev_dc_inv_0 1))))": "(lam (map (lam (gt? 1 (mod $0 (+ prev_dc_inv_0 1)))) $0))"
        },
        {
          "fn_8 (lam (gt? 1 (mod $0 prev_dc_inv_1)))": "(lam (map (lam (gt? 1 (mod $0 prev_dc_inv_1))) $0))"
        },
        {
          "fn_8 (lam (if (is-prime $0) 0 (+ 1 $0)))": "(lam (map (lam (if (is-prime $0) 0 (+ 1 $0))) $0))"
        },
        {
          "fn_8 (lam (index $0 (cons prev_dc_inv_0 (range $0))))": "(lam (map (lam (index $0 (cons prev_dc_inv_0 (range $0)))) $0))"
        },
        {
          "fn_8 (lam (index $0 (cons prev_dc_inv_0 (range (+ $0 $0)))))": "(lam (map (lam (index $0 (cons prev_dc_inv_0 (range (+ $0 $0))))) $0))"
        },
        {
          "fn_8 (lam (length empty))": "(lam (map (lam (length empty)) $0))"
        },
        {
          "fn_8 (lam (mod $0 prev_dc_inv_0))": "(lam (map (lam (mod $0 prev_dc_inv_0)) $0))"
        },
        {
          "fn_8 (lam (mod $0 prev_dc_inv_1))": "(lam (map (lam (mod $0 prev_dc_inv_1)) $0))"
        },
        {
          "fn_8 (lam (prev_dc_inv_3 (range $0)))": "(lam (map (lam (prev_dc_inv_3 (range $0))) $0))"
        },
        {
          "fn_8 (lam 0)": "(lam (map (lam 0) $0))"
        }
      ]
    },
    {
      "body": "(lam (fold $0 #1 #0))",
      "dreamcoder": "#(lambda (lambda (lambda (fold $0 $1 $2))))",
      "arity": 2,
      "name": "fn_9",
      "rewritten": [
        "(fn_8 (lam (+ $0 1)))",
        "(fn_8 (lam (+ 1 $0)))",
        "(lam (prev_dc_inv_6 $0 (index prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_5 $0 (cdr (prev_dc_inv_4 (cdr $0)))))",
        "(lam (prev_dc_inv_6 $0 0))",
        "(lam (prev_dc_inv_5 $0 (range 1)))",
        "(lam (prev_dc_inv_6 $0 (+ prev_dc_inv_0 1)))",
        "(lam (prev_dc_inv_6 $0 (+ 1 prev_dc_inv_0)))",
        "(lam (prev_dc_inv_6 $0 (+ 1 prev_dc_inv_1)))",
        "(lam (prev_dc_inv_6 $0 (+ prev_dc_inv_0 (+ 1 prev_dc_inv_0))))",
        "(fn_8 (lam (eq? (length (range $0)) $0)))",
        "(fn_8 (lam (eq? $0 (length (range $0)))))",
        "(fn_8 (lam (gt? $0 0)))",
        "(fn_8 (lam (gt? $0 (length empty))))",
        "(fn_8 (lam (gt? 1 (mod $0 (+ prev_dc_inv_0 1)))))",
        "(fn_8 (lam (gt? 1 (mod $0 (+ 1 prev_dc_inv_0)))))",
        "(fn_8 (lam (gt? 1 (mod $0 prev_dc_inv_1))))",
        "(fn_8 (lam (eq? (mod $0 prev_dc_inv_1) 0)))",
        "(fn_8 (lam (eq? $0 (+ prev_dc_inv_0 1))))",
        "(fn_8 (lam (eq? $0 (+ 1 prev_dc_inv_0))))",
        "(lam (prev_dc_inv_2 $0))",
        "(fn_8 (lam (if (is-prime $0) 0 (+ 1 $0))))",
        "(lam (prev_dc_inv_2 $0))",
        "(fn_8 (lam (if (is-prime $0) 0 (+ 1 $0))))",
        "(fn_8 (lam (- 1 $0)))",
        "(fn_8 (lam (prev_dc_inv_3 (range $0))))",
        "(fn_8 (lam (index $0 (cons prev_dc_inv_0 (range $0)))))",
        "(fn_8 (lam (index $0 (cons prev_dc_inv_0 (range (+ $0 $0))))))",
        "(fn_9 (lam (lam (+ $0 (prev_dc_inv_3 (range $1))))) 0)",
        "(fn_9 (lam (lam (+ (prev_dc_inv_3 (range $1)) $0))) 0)",
        "(fn_9 (lam (lam (+ $0 (if (eq? $1 (+ prev_dc_inv_0 1)) 1 0)))) 0)",
        "(fn_9 (lam (lam (+ $0 (if (eq? $1 (+ 1 prev_dc_inv_0)) 1 0)))) 0)",
        "(fn_9 (lam (lam (if (eq? (mod $1 prev_dc_inv_0) 0) (cons $1 $0) $0))) empty)",
        "(lam (gt? 1 (prev_dc_inv_3 $0)))",
        "(lam (empty? (range (prev_dc_inv_3 $0))))",
        "(lam (gt? (mod (fold $0 0 (lam (lam $1))) prev_dc_inv_1) 0))",
        "(lam (gt? (mod (fold $0 prev_dc_inv_1 (lam (lam $1))) prev_dc_inv_1) 0))",
        "(lam (is-prime (index prev_dc_inv_0 (prev_dc_inv_6 (prev_dc_inv_5 $0 (range prev_dc_inv_0)) 1))))",
        "(lam (is-prime (index prev_dc_inv_0 (prev_dc_inv_5 $0 (prev_dc_inv_6 (range prev_dc_inv_0) 1)))))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (index prev_dc_inv_0 $0))",
        "(lam (index 1 (cdr $0)))",
        "(lam (index prev_dc_inv_1 $0))",
        "(lam (index (* prev_dc_inv_0 prev_dc_inv_0) $0))",
        "(lam (is-square (fold $0 1 (lam (lam (+ $0 (mod $1 prev_dc_inv_0)))))))",
        "(lam (is-prime (fold $0 prev_dc_inv_0 (lam (lam (- $0 (mod $1 $0)))))))",
        "(lam (gt? (prev_dc_inv_3 (prev_dc_inv_2 (prev_dc_inv_2 (map (lam (+ prev_dc_inv_0 $0)) $0)))) 0))",
        "(lam (gt? (prev_dc_inv_3 (prev_dc_inv_2 (prev_dc_inv_2 (map (lam (+ $0 prev_dc_inv_0)) $0)))) 0))",
        "(fn_9 (lam (lam (if $0 (is-prime $1) $0))) (is-prime prev_dc_inv_0))",
        "(fn_9 (lam (lam (if $0 (is-prime $1) $0))) (is-square 1))",
        "(fn_9 (lam (lam (+ $0 (length (range (- $1 $0)))))) 1)",
        "(fn_9 (lam (lam (+ $1 (length (range (- $0 $1)))))) 1)",
        "(lam (length $0))",
        "(lam (length (range (length $0))))",
        "(fn_8 (lam 0))",
        "(fn_8 (lam (length empty)))",
        "(fn_8 (lam (mod $0 prev_dc_inv_0)))",
        "(lam (map (lam $0) (map (lam (mod $0 prev_dc_inv_0)) $0)))",
        "(fn_8 (lam (mod $0 prev_dc_inv_1)))",
        "(lam (map (lam $0) (map (lam (mod $0 prev_dc_inv_1)) $0)))",
        "(fn_8 (lam 0))",
        "(fn_8 (lam (length empty)))",
        "(fn_8 (lam (+ $0 $0)))",
        "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
        "(fn_8 (lam (+ $0 (+ $0 $0))))",
        "(fn_8 (lam (+ $0 (* prev_dc_inv_0 $0))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
        "(lam (map (lam (index $0 $1)) (range (- (length $0) 1))))",
        "(lam (cons (car $0) $0))",
        "(lam (cons (index 0 $0) $0))",
        "(lam (prev_dc_inv_5 (cdr (prev_dc_inv_4 $0)) $0))",
        "(lam (cdr (prev_dc_inv_5 (prev_dc_inv_4 $0) $0)))",
        "(lam (cons (car (prev_dc_inv_7 $0)) $0))",
        "(lam (cons (index prev_dc_inv_0 (cdr $0)) $0))",
        "(lam (prev_dc_inv_3 $0))",
        "(fn_9 (lam (lam (* $1 $0))) 1)",
        "(lam (cons (car $0) (cdr (cdr $0))))",
        "(lam (cons (index 0 $0) (cdr (cdr $0))))",
        "(lam (prev_dc_inv_5 $0 $0))",
        "(lam (prev_dc_inv_5 $0 (map (lam $0) $0)))",
        "(lam (fold (range (car $0)) empty (lam (lam (prev_dc_inv_5 $0 (cdr $2))))))",
        "(lam (fold (range (car $0)) empty (lam (lam (prev_dc_inv_5 (cdr $2) $0)))))",
        "(fn_9 (lam (lam (prev_dc_inv_6 $0 $1))) empty)",
        "(lam (fold $0 $0 (lam (lam (prev_dc_inv_6 (cdr $0) $1)))))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 (prev_dc_inv_4 $0) $0)))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 (range prev_dc_inv_0) $0)))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_4 (cdr $0)) (prev_dc_inv_7 $0)))",
        "(lam (fold (cdr $0) $0 (lam (lam (cons $1 (prev_dc_inv_5 (prev_dc_inv_4 $0) (prev_dc_inv_4 (cdr (cdr $0)))))))))",
        "(lam (prev_dc_inv_7 $0))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0) (cdr (prev_dc_inv_7 (cdr (cdr $0))))))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_4 (prev_dc_inv_7 $0)) (prev_dc_inv_7 (cdr (cdr $0)))))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (map (lam (index $0 $1)) (range prev_dc_inv_0)))",
        "(fn_9 (lam (lam (prev_dc_inv_5 $0 (range (- 1 $1))))) empty)",
        "(fn_9 (lam (lam (prev_dc_inv_5 (range (- 1 $1)) $0))) empty)",
        "(fn_9 (lam (lam (if (eq? $1 1) (prev_dc_inv_6 $0 $1) $0))) empty)",
        "(fn_9 (lam (lam (if (is-prime (+ $1 $1)) (prev_dc_inv_6 $0 $1) $0))) empty)"
      ],
      "rewritten_dreamcoder": [
        "(fn_8 (lambda (+ $0 1)))",
        "(fn_8 (lambda (+ 1 $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (index #(+ 1 1) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cdr (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) (cdr $0)))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (range 1)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (+ #(+ 1 1) 1)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (+ 1 #(+ 1 1))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (+ 1 #(+ #(+ 1 1) #(+ 1 1)))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (+ #(+ 1 1) (+ 1 #(+ 1 1)))))",
        "(fn_8 (lambda (eq? (length (range $0)) $0)))",
        "(fn_8 (lambda (eq? $0 (length (range $0)))))",
        "(fn_8 (lambda (gt? $0 0)))",
        "(fn_8 (lambda (gt? $0 (length empty))))",
        "(fn_8 (lambda (gt? 1 (mod $0 (+ #(+ 1 1) 1)))))",
        "(fn_8 (lambda (gt? 1 (mod $0 (+ 1 #(+ 1 1))))))",
        "(fn_8 (lambda (gt? 1 (mod $0 #(+ #(+ 1 1) #(+ 1 1))))))",
        "(fn_8 (lambda (eq? (mod $0 #(+ #(+ 1 1) #(+ 1 1))) 0)))",
        "(fn_8 (lambda (eq? $0 (+ #(+ 1 1) 1))))",
        "(fn_8 (lambda (eq? $0 (+ 1 #(+ 1 1)))))",
        "(lambda (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) $0))",
        "(fn_8 (lambda (if (is-prime $0) 0 (+ 1 $0))))",
        "(lambda (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) $0))",
        "(fn_8 (lambda (if (is-prime $0) 0 (+ 1 $0))))",
        "(fn_8 (lambda (- 1 $0)))",
        "(fn_8 (lambda (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (range $0))))",
        "(fn_8 (lambda (index $0 (cons #(+ 1 1) (range $0)))))",
        "(fn_8 (lambda (index $0 (cons #(+ 1 1) (range (+ $0 $0))))))",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (+ $0 (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (range $1))))) 0)",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (+ (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (range $1)) $0))) 0)",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (+ $0 (if (eq? $1 (+ #(+ 1 1) 1)) 1 0)))) 0)",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (+ $0 (if (eq? $1 (+ 1 #(+ 1 1))) 1 0)))) 0)",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (if (eq? (mod $1 #(+ 1 1)) 0) (cons $1 $0) $0))) empty)",
        "(lambda (gt? 1 (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) $0)))",
        "(lambda (empty? (range (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) $0))))",
        "(lambda (gt? (mod (fold $0 0 (lambda (lambda $1))) #(+ #(+ 1 1) #(+ 1 1))) 0))",
        "(lambda (gt? (mod (fold $0 #(+ #(+ 1 1) #(+ 1 1)) (lambda (lambda $1))) #(+ #(+ 1 1) #(+ 1 1))) 0))",
        "(lambda (is-prime (index #(+ 1 1) (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (range #(+ 1 1))) 1))))",
        "(lambda (is-prime (index #(+ 1 1) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) (range #(+ 1 1)) 1)))))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (index #(+ 1 1) $0))",
        "(lambda (index 1 (cdr $0)))",
        "(lambda (index #(+ #(+ 1 1) #(+ 1 1)) $0))",
        "(lambda (index (* #(+ 1 1) #(+ 1 1)) $0))",
        "(lambda (is-square (fold $0 1 (lambda (lambda (+ $0 (mod $1 #(+ 1 1))))))))",
        "(lambda (is-prime (fold $0 #(+ 1 1) (lambda (lambda (- $0 (mod $1 $0)))))))",
        "(lambda (gt? (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) (map (lambda (+ #(+ 1 1) $0)) $0)))) 0))",
        "(lambda (gt? (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) (map (lambda (+ $0 #(+ 1 1))) $0)))) 0))",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (if $0 (is-prime $1) $0))) (is-prime #(+ 1 1)))",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (if $0 (is-prime $1) $0))) (is-square 1))",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (+ $0 (length (range (- $1 $0)))))) 1)",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (+ $1 (length (range (- $0 $1)))))) 1)",
        "(lambda (length $0))",
        "(lambda (length (range (length $0))))",
        "(fn_8 (lambda 0))",
        "(fn_8 (lambda (length empty)))",
        "(fn_8 (lambda (mod $0 #(+ 1 1))))",
        "(lambda (map (lambda $0) (map (lambda (mod $0 #(+ 1 1))) $0)))",
        "(fn_8 (lambda (mod $0 #(+ #(+ 1 1) #(+ 1 1)))))",
        "(lambda (map (lambda $0) (map (lambda (mod $0 #(+ #(+ 1 1) #(+ 1 1)))) $0)))",
        "(fn_8 (lambda 0))",
        "(fn_8 (lambda (length empty)))",
        "(fn_8 (lambda (+ $0 $0)))",
        "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
        "(fn_8 (lambda (+ $0 (+ $0 $0))))",
        "(fn_8 (lambda (+ $0 (* #(+ 1 1) $0))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (- (length $0) 1))))",
        "(lambda (cons (car $0) $0))",
        "(lambda (cons (index 0 $0) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (cdr (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)) $0))",
        "(lambda (cdr (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0) $0)))",
        "(lambda (cons (car (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0)) $0))",
        "(lambda (cons (index #(+ 1 1) (cdr $0)) $0))",
        "(lambda (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) $0))",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (* $1 $0))) 1)",
        "(lambda (cons (car $0) (cdr (cdr $0))))",
        "(lambda (cons (index 0 $0) (cdr (cdr $0))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $0)))",
        "(lambda (fold (range (car $0)) empty (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cdr $2))))))",
        "(lambda (fold (range (car $0)) empty (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (cdr $2) $0)))))",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 $1))) empty)",
        "(lambda (fold $0 $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) (cdr $0) $1)))))",
        "(lambda (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0) $0)))",
        "(lambda (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (range #(+ 1 1)) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) (cdr $0)) (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0)))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cons $1 (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) (cdr (cdr $0)))))))))",
        "(lambda (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0) (cdr (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) (cdr (cdr $0))))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0)) (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) (cdr (cdr $0)))))",
        "(lambda (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0))",
        "(lambda (map (lambda (index $0 $1)) (range #(+ 1 1))))",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (range (- 1 $1))))) empty)",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (range (- 1 $1)) $0))) empty)",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (if (eq? $1 1) (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 $1) $0))) empty)",
        "(#(lambda (lambda (lambda (fold $0 $1 $2)))) (lambda (lambda (if (is-prime (+ $1 $1)) (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 $1) $0))) empty)"
      ],
      "utility": 612,
      "expected_cost": 27791,
      "final_cost": 27791,
      "multiplier": 1.0293620236767298,
      "multiplier_wrt_orig": 1.0807455651110072,
      "num_uses": 16,
      "uses": [
        {
          "fn_9 (lam (lam (prev_dc_inv_6 (cdr $0) $1))) #0": "(lam (fold $0 $0 (lam (lam (prev_dc_inv_6 (cdr $0) $1)))))"
        },
        {
          "fn_9 (lam (lam (if $0 (is-prime $1) $0))) (is-prime prev_dc_inv_0)": "(lam (fold $0 (is-prime prev_dc_inv_0) (lam (lam (if $0 (is-prime $1) $0)))))"
        },
        {
          "fn_9 (lam (lam (if $0 (is-prime $1) $0))) (is-square 1)": "(lam (fold $0 (is-square 1) (lam (lam (if $0 (is-prime $1) $0)))))"
        },
        {
          "fn_9 (lam (lam (+ $0 (if (eq? $1 (+ 1 prev_dc_inv_0)) 1 0)))) 0": "(lam (fold $0 0 (lam (lam (+ $0 (if (eq? $1 (+ 1 prev_dc_inv_0)) 1 0))))))"
        },
        {
          "fn_9 (lam (lam (+ $0 (if (eq? $1 (+ prev_dc_inv_0 1)) 1 0)))) 0": "(lam (fold $0 0 (lam (lam (+ $0 (if (eq? $1 (+ prev_dc_inv_0 1)) 1 0))))))"
        },
        {
          "fn_9 (lam (lam (+ $0 (prev_dc_inv_3 (range $1))))) 0": "(lam (fold $0 0 (lam (lam (+ $0 (prev_dc_inv_3 (range $1)))))))"
        },
        {
          "fn_9 (lam (lam (+ (prev_dc_inv_3 (range $1)) $0))) 0": "(lam (fold $0 0 (lam (lam (+ (prev_dc_inv_3 (range $1)) $0)))))"
        },
        {
          "fn_9 (lam (lam (* $1 $0))) 1": "(lam (fold $0 1 (lam (lam (* $1 $0)))))"
        },
        {
          "fn_9 (lam (lam (+ $0 (length (range (- $1 $0)))))) 1": "(lam (fold $0 1 (lam (lam (+ $0 (length (range (- $1 $0))))))))"
        },
        {
          "fn_9 (lam (lam (+ $1 (length (range (- $0 $1)))))) 1": "(lam (fold $0 1 (lam (lam (+ $1 (length (range (- $0 $1))))))))"
        },
        {
          "fn_9 (lam (lam (if (eq? $1 1) (prev_dc_inv_6 $0 $1) $0))) empty": "(lam (fold $0 empty (lam (lam (if (eq? $1 1) (prev_dc_inv_6 $0 $1) $0)))))"
        },
        {
          "fn_9 (lam (lam (if (eq? (mod $1 prev_dc_inv_0) 0) (cons $1 $0) $0))) empty": "(lam (fold $0 empty (lam (lam (if (eq? (mod $1 prev_dc_inv_0) 0) (cons $1 $0) $0)))))"
        },
        {
          "fn_9 (lam (lam (if (is-prime (+ $1 $1)) (prev_dc_inv_6 $0 $1) $0))) empty": "(lam (fold $0 empty (lam (lam (if (is-prime (+ $1 $1)) (prev_dc_inv_6 $0 $1) $0)))))"
        },
        {
          "fn_9 (lam (lam (prev_dc_inv_5 $0 (range (- 1 $1))))) empty": "(lam (fold $0 empty (lam (lam (prev_dc_inv_5 $0 (range (- 1 $1)))))))"
        },
        {
          "fn_9 (lam (lam (prev_dc_inv_5 (range (- 1 $1)) $0))) empty": "(lam (fold $0 empty (lam (lam (prev_dc_inv_5 (range (- 1 $1)) $0)))))"
        },
        {
          "fn_9 (lam (lam (prev_dc_inv_6 $0 $1))) empty": "(lam (fold $0 empty (lam (lam (prev_dc_inv_6 $0 $1)))))"
        }
      ]
    },
    {
      "body": "(+ prev_dc_inv_0 1)",
      "dreamcoder": "#(+ #(+ 1 1) 1)",
      "arity": 0,
      "name": "fn_10",
      "rewritten": [
        "(fn_8 (lam (+ $0 1)))",
        "(fn_8 (lam (+ 1 $0)))",
        "(lam (prev_dc_inv_6 $0 (index prev_dc_inv_0 $0)))",
        "(lam (prev_dc_inv_5 $0 (cdr (prev_dc_inv_4 (cdr $0)))))",
        "(lam (prev_dc_inv_6 $0 0))",
        "(lam (prev_dc_inv_5 $0 (range 1)))",
        "(lam (prev_dc_inv_6 $0 fn_10))",
        "(lam (prev_dc_inv_6 $0 (+ 1 prev_dc_inv_0)))",
        "(lam (prev_dc_inv_6 $0 (+ 1 prev_dc_inv_1)))",
        "(lam (prev_dc_inv_6 $0 (+ prev_dc_inv_0 (+ 1 prev_dc_inv_0))))",
        "(fn_8 (lam (eq? (length (range $0)) $0)))",
        "(fn_8 (lam (eq? $0 (length (range $0)))))",
        "(fn_8 (lam (gt? $0 0)))",
        "(fn_8 (lam (gt? $0 (length empty))))",
        "(fn_8 (lam (gt? 1 (mod $0 fn_10))))",
        "(fn_8 (lam (gt? 1 (mod $0 (+ 1 prev_dc_inv_0)))))",
        "(fn_8 (lam (gt? 1 (mod $0 prev_dc_inv_1))))",
        "(fn_8 (lam (eq? (mod $0 prev_dc_inv_1) 0)))",
        "(fn_8 (lam (eq? $0 fn_10)))",
        "(fn_8 (lam (eq? $0 (+ 1 prev_dc_inv_0))))",
        "(lam (prev_dc_inv_2 $0))",
        "(fn_8 (lam (if (is-prime $0) 0 (+ 1 $0))))",
        "(lam (prev_dc_inv_2 $0))",
        "(fn_8 (lam (if (is-prime $0) 0 (+ 1 $0))))",
        "(fn_8 (lam (- 1 $0)))",
        "(fn_8 (lam (prev_dc_inv_3 (range $0))))",
        "(fn_8 (lam (index $0 (cons prev_dc_inv_0 (range $0)))))",
        "(fn_8 (lam (index $0 (cons prev_dc_inv_0 (range (+ $0 $0))))))",
        "(fn_9 (lam (lam (+ $0 (prev_dc_inv_3 (range $1))))) 0)",
        "(fn_9 (lam (lam (+ (prev_dc_inv_3 (range $1)) $0))) 0)",
        "(fn_9 (lam (lam (+ $0 (if (eq? $1 fn_10) 1 0)))) 0)",
        "(fn_9 (lam (lam (+ $0 (if (eq? $1 (+ 1 prev_dc_inv_0)) 1 0)))) 0)",
        "(fn_9 (lam (lam (if (eq? (mod $1 prev_dc_inv_0) 0) (cons $1 $0) $0))) empty)",
        "(lam (gt? 1 (prev_dc_inv_3 $0)))",
        "(lam (empty? (range (prev_dc_inv_3 $0))))",
        "(lam (gt? (mod (fold $0 0 (lam (lam $1))) prev_dc_inv_1) 0))",
        "(lam (gt? (mod (fold $0 prev_dc_inv_1 (lam (lam $1))) prev_dc_inv_1) 0))",
        "(lam (is-prime (index prev_dc_inv_0 (prev_dc_inv_6 (prev_dc_inv_5 $0 (range prev_dc_inv_0)) 1))))",
        "(lam (is-prime (index prev_dc_inv_0 (prev_dc_inv_5 $0 (prev_dc_inv_6 (range prev_dc_inv_0) 1)))))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (index prev_dc_inv_0 $0))",
        "(lam (index 1 (cdr $0)))",
        "(lam (index prev_dc_inv_1 $0))",
        "(lam (index (* prev_dc_inv_0 prev_dc_inv_0) $0))",
        "(lam (is-square (fold $0 1 (lam (lam (+ $0 (mod $1 prev_dc_inv_0)))))))",
        "(lam (is-prime (fold $0 prev_dc_inv_0 (lam (lam (- $0 (mod $1 $0)))))))",
        "(lam (gt? (prev_dc_inv_3 (prev_dc_inv_2 (prev_dc_inv_2 (map (lam (+ prev_dc_inv_0 $0)) $0)))) 0))",
        "(lam (gt? (prev_dc_inv_3 (prev_dc_inv_2 (prev_dc_inv_2 (map (lam (+ $0 prev_dc_inv_0)) $0)))) 0))",
        "(fn_9 (lam (lam (if $0 (is-prime $1) $0))) (is-prime prev_dc_inv_0))",
        "(fn_9 (lam (lam (if $0 (is-prime $1) $0))) (is-square 1))",
        "(fn_9 (lam (lam (+ $0 (length (range (- $1 $0)))))) 1)",
        "(fn_9 (lam (lam (+ $1 (length (range (- $0 $1)))))) 1)",
        "(lam (length $0))",
        "(lam (length (range (length $0))))",
        "(fn_8 (lam 0))",
        "(fn_8 (lam (length empty)))",
        "(fn_8 (lam (mod $0 prev_dc_inv_0)))",
        "(lam (map (lam $0) (map (lam (mod $0 prev_dc_inv_0)) $0)))",
        "(fn_8 (lam (mod $0 prev_dc_inv_1)))",
        "(lam (map (lam $0) (map (lam (mod $0 prev_dc_inv_1)) $0)))",
        "(fn_8 (lam 0))",
        "(fn_8 (lam (length empty)))",
        "(fn_8 (lam (+ $0 $0)))",
        "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
        "(fn_8 (lam (+ $0 (+ $0 $0))))",
        "(fn_8 (lam (+ $0 (* prev_dc_inv_0 $0))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr $0)))))",
        "(lam (map (lam (index $0 $1)) (range (- (length $0) 1))))",
        "(lam (cons (car $0) $0))",
        "(lam (cons (index 0 $0) $0))",
        "(lam (prev_dc_inv_5 (cdr (prev_dc_inv_4 $0)) $0))",
        "(lam (cdr (prev_dc_inv_5 (prev_dc_inv_4 $0) $0)))",
        "(lam (cons (car (prev_dc_inv_7 $0)) $0))",
        "(lam (cons (index prev_dc_inv_0 (cdr $0)) $0))",
        "(lam (prev_dc_inv_3 $0))",
        "(fn_9 (lam (lam (* $1 $0))) 1)",
        "(lam (cons (car $0) (cdr (cdr $0))))",
        "(lam (cons (index 0 $0) (cdr (cdr $0))))",
        "(lam (prev_dc_inv_5 $0 $0))",
        "(lam (prev_dc_inv_5 $0 (map (lam $0) $0)))",
        "(lam (fold (range (car $0)) empty (lam (lam (prev_dc_inv_5 $0 (cdr $2))))))",
        "(lam (fold (range (car $0)) empty (lam (lam (prev_dc_inv_5 (cdr $2) $0)))))",
        "(fn_9 (lam (lam (prev_dc_inv_6 $0 $1))) empty)",
        "(lam (fold $0 $0 (lam (lam (prev_dc_inv_6 (cdr $0) $1)))))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 (prev_dc_inv_4 $0) $0)))",
        "(lam (prev_dc_inv_7 (prev_dc_inv_5 (range prev_dc_inv_0) $0)))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_4 (cdr $0)) (prev_dc_inv_7 $0)))",
        "(lam (fold (cdr $0) $0 (lam (lam (cons $1 (prev_dc_inv_5 (prev_dc_inv_4 $0) (prev_dc_inv_4 (cdr (cdr $0)))))))))",
        "(lam (prev_dc_inv_7 $0))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_7 $0) (cdr (prev_dc_inv_7 (cdr (cdr $0))))))",
        "(lam (prev_dc_inv_5 (prev_dc_inv_4 (prev_dc_inv_7 $0)) (prev_dc_inv_7 (cdr (cdr $0)))))",
        "(lam (prev_dc_inv_4 $0))",
        "(lam (map (lam (index $0 $1)) (range prev_dc_inv_0)))",
        "(fn_9 (lam (lam (prev_dc_inv_5 $0 (range (- 1 $1))))) empty)",
        "(fn_9 (lam (lam (prev_dc_inv_5 (range (- 1 $1)) $0))) empty)",
        "(fn_9 (lam (lam (if (eq? $1 1) (prev_dc_inv_6 $0 $1) $0))) empty)",
        "(fn_9 (lam (lam (if (is-prime (+ $1 $1)) (prev_dc_inv_6 $0 $1) $0))) empty)"
      ],
      "rewritten_dreamcoder": [
        "(fn_8 (lambda (+ $0 1)))",
        "(fn_8 (lambda (+ 1 $0)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (index #(+ 1 1) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cdr (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) (cdr $0)))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (range 1)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 #(+ #(+ 1 1) 1)))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (+ 1 #(+ 1 1))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (+ 1 #(+ #(+ 1 1) #(+ 1 1)))))",
        "(lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 (+ #(+ 1 1) (+ 1 #(+ 1 1)))))",
        "(fn_8 (lambda (eq? (length (range $0)) $0)))",
        "(fn_8 (lambda (eq? $0 (length (range $0)))))",
        "(fn_8 (lambda (gt? $0 0)))",
        "(fn_8 (lambda (gt? $0 (length empty))))",
        "(fn_8 (lambda (gt? 1 (mod $0 #(+ #(+ 1 1) 1)))))",
        "(fn_8 (lambda (gt? 1 (mod $0 (+ 1 #(+ 1 1))))))",
        "(fn_8 (lambda (gt? 1 (mod $0 #(+ #(+ 1 1) #(+ 1 1))))))",
        "(fn_8 (lambda (eq? (mod $0 #(+ #(+ 1 1) #(+ 1 1))) 0)))",
        "(fn_8 (lambda (eq? $0 #(+ #(+ 1 1) 1))))",
        "(fn_8 (lambda (eq? $0 (+ 1 #(+ 1 1)))))",
        "(lambda (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) $0))",
        "(fn_8 (lambda (if (is-prime $0) 0 (+ 1 $0))))",
        "(lambda (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) $0))",
        "(fn_8 (lambda (if (is-prime $0) 0 (+ 1 $0))))",
        "(fn_8 (lambda (- 1 $0)))",
        "(fn_8 (lambda (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (range $0))))",
        "(fn_8 (lambda (index $0 (cons #(+ 1 1) (range $0)))))",
        "(fn_8 (lambda (index $0 (cons #(+ 1 1) (range (+ $0 $0))))))",
        "(fn_9 (lambda (lambda (+ $0 (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (range $1))))) 0)",
        "(fn_9 (lambda (lambda (+ (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (range $1)) $0))) 0)",
        "(fn_9 (lambda (lambda (+ $0 (if (eq? $1 #(+ #(+ 1 1) 1)) 1 0)))) 0)",
        "(fn_9 (lambda (lambda (+ $0 (if (eq? $1 (+ 1 #(+ 1 1))) 1 0)))) 0)",
        "(fn_9 (lambda (lambda (if (eq? (mod $1 #(+ 1 1)) 0) (cons $1 $0) $0))) empty)",
        "(lambda (gt? 1 (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) $0)))",
        "(lambda (empty? (range (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) $0))))",
        "(lambda (gt? (mod (fold $0 0 (lambda (lambda $1))) #(+ #(+ 1 1) #(+ 1 1))) 0))",
        "(lambda (gt? (mod (fold $0 #(+ #(+ 1 1) #(+ 1 1)) (lambda (lambda $1))) #(+ #(+ 1 1) #(+ 1 1))) 0))",
        "(lambda (is-prime (index #(+ 1 1) (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (range #(+ 1 1))) 1))))",
        "(lambda (is-prime (index #(+ 1 1) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) (range #(+ 1 1)) 1)))))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (index #(+ 1 1) $0))",
        "(lambda (index 1 (cdr $0)))",
        "(lambda (index #(+ #(+ 1 1) #(+ 1 1)) $0))",
        "(lambda (index (* #(+ 1 1) #(+ 1 1)) $0))",
        "(lambda (is-square (fold $0 1 (lambda (lambda (+ $0 (mod $1 #(+ 1 1))))))))",
        "(lambda (is-prime (fold $0 #(+ 1 1) (lambda (lambda (- $0 (mod $1 $0)))))))",
        "(lambda (gt? (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) (map (lambda (+ #(+ 1 1) $0)) $0)))) 0))",
        "(lambda (gt? (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) (#(map (lambda (if (is-prime $0) 0 (+ $0 1)))) (map (lambda (+ $0 #(+ 1 1))) $0)))) 0))",
        "(fn_9 (lambda (lambda (if $0 (is-prime $1) $0))) (is-prime #(+ 1 1)))",
        "(fn_9 (lambda (lambda (if $0 (is-prime $1) $0))) (is-square 1))",
        "(fn_9 (lambda (lambda (+ $0 (length (range (- $1 $0)))))) 1)",
        "(fn_9 (lambda (lambda (+ $1 (length (range (- $0 $1)))))) 1)",
        "(lambda (length $0))",
        "(lambda (length (range (length $0))))",
        "(fn_8 (lambda 0))",
        "(fn_8 (lambda (length empty)))",
        "(fn_8 (lambda (mod $0 #(+ 1 1))))",
        "(lambda (map (lambda $0) (map (lambda (mod $0 #(+ 1 1))) $0)))",
        "(fn_8 (lambda (mod $0 #(+ #(+ 1 1) #(+ 1 1)))))",
        "(lambda (map (lambda $0) (map (lambda (mod $0 #(+ #(+ 1 1) #(+ 1 1)))) $0)))",
        "(fn_8 (lambda 0))",
        "(fn_8 (lambda (length empty)))",
        "(fn_8 (lambda (+ $0 $0)))",
        "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
        "(fn_8 (lambda (+ $0 (+ $0 $0))))",
        "(fn_8 (lambda (+ $0 (* #(+ 1 1) $0))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr $0)))))",
        "(lambda (map (lambda (index $0 $1)) (range (- (length $0) 1))))",
        "(lambda (cons (car $0) $0))",
        "(lambda (cons (index 0 $0) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (cdr (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)) $0))",
        "(lambda (cdr (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0) $0)))",
        "(lambda (cons (car (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0)) $0))",
        "(lambda (cons (index #(+ 1 1) (cdr $0)) $0))",
        "(lambda (#(lambda (fold $0 1 (lambda (lambda (* $0 $1))))) $0))",
        "(fn_9 (lambda (lambda (* $1 $0))) 1)",
        "(lambda (cons (car $0) (cdr (cdr $0))))",
        "(lambda (cons (index 0 $0) (cdr (cdr $0))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $0)))",
        "(lambda (fold (range (car $0)) empty (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (cdr $2))))))",
        "(lambda (fold (range (car $0)) empty (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (cdr $2) $0)))))",
        "(fn_9 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 $1))) empty)",
        "(lambda (fold $0 $0 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) (cdr $0) $1)))))",
        "(lambda (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0) $0)))",
        "(lambda (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (range #(+ 1 1)) $0)))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) (cdr $0)) (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0)))",
        "(lambda (fold (cdr $0) $0 (lambda (lambda (cons $1 (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) (cdr (cdr $0)))))))))",
        "(lambda (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0) (cdr (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) (cdr (cdr $0))))))",
        "(lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) $0)) (#(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)))))) (cdr (cdr $0)))))",
        "(lambda (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0))",
        "(lambda (map (lambda (index $0 $1)) (range #(+ 1 1))))",
        "(fn_9 (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $0 (range (- 1 $1))))) empty)",
        "(fn_9 (lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) (range (- 1 $1)) $0))) empty)",
        "(fn_9 (lambda (lambda (if (eq? $1 1) (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 $1) $0))) empty)",
        "(fn_9 (lambda (lambda (if (is-prime (+ $1 $1)) (#(lambda (lambda (#(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0)))))) $1 (cons $0 empty)))) $0 $1) $0))) empty)"
      ],
      "utility": 506,
      "expected_cost": 26983,
      "final_cost": 26983,
      "multiplier": 1.029944780046696,
      "multiplier_wrt_orig": 1.1131082533446985,
      "num_uses": 4,
      "uses": [
        {
          "fn_10 ": "(+ prev_dc_inv_0 1)"
        }
      ]
    }
  ]
}