{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.35.48/bench001_it1.json --max-arity=3 --threads=1 --iterations=2 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.35.48/out/stitch/2022-10-04_19-35-55/raw/bench001_it1.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.35.48/bench001_it1.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.35.48/out/stitch/2022-10-04_19-35-55/raw/bench001_it1.json",
    "iterations": 2,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 20339,
  "original": [
    "(lam (fold $0 (cons (+ 1 (+ prev_dc_inv_0 prev_dc_inv_0)) empty) (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (cons (+ prev_dc_inv_0 (+ 1 prev_dc_inv_0)) empty) (lam (lam (cons $1 $0)))))",
    "(lam (map (lam (index $0 (cons prev_dc_inv_0 (range $0)))) $0))",
    "(lam (map (lam (index $0 (cons prev_dc_inv_0 (range (+ $0 $0))))) $0))",
    "(lam (empty? (range (fold $0 1 (lam (lam (* $0 $1)))))))",
    "(lam (empty? (range (fold $0 1 (lam (lam (* $1 $0)))))))",
    "(lam (car $0))",
    "(lam (index 0 $0))",
    "(lam (index prev_dc_inv_0 (cdr (cdr $0))))",
    "(lam (index (+ prev_dc_inv_0 prev_dc_inv_0) $0))",
    "(lam (is-square (fold $0 1 (lam (lam (+ $0 (mod $1 prev_dc_inv_0)))))))",
    "(lam (is-prime (fold $0 prev_dc_inv_0 (lam (lam (- $0 (mod $1 $0)))))))",
    "(lam (fold $0 1 (lam (lam (+ $0 (length (range (- $1 $0))))))))",
    "(lam (fold $0 1 (lam (lam (+ $1 (length (range (- $0 $1))))))))",
    "(lam (length $0))",
    "(lam (length (range (length $0))))",
    "(lam (map (lam (mod $0 prev_dc_inv_0)) $0))",
    "(lam (map (lam $0) (map (lam (mod $0 prev_dc_inv_0)) $0)))",
    "(lam (map (lam 0) $0))",
    "(lam (map (lam (length empty)) $0))",
    "(lam (map (lam (+ $0 $0)) $0))",
    "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
    "(lam (cons (car $0) $0))",
    "(lam (cons (car (prev_dc_inv_1 $0)) $0))",
    "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
    "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
    "(lam (fold $0 $0 (lam (lam (cons $1 $0)))))",
    "(lam (fold $0 (map (lam $0) $0) (lam (lam (cons $1 $0)))))",
    "(lam (fold (cdr (cdr (cdr $0))) $0 (lam (lam (cons $1 (prev_dc_inv_1 $0))))))",
    "(lam (prev_dc_inv_1 $0))",
    "(lam (map (lam (index $0 $1)) (range prev_dc_inv_0)))"
  ],
  "invs": [
    {
      "body": "(lam (lam (#0 $1 $0)))",
      "dreamcoder": "#(lambda (lambda (lambda ($2 $1 $0))))",
      "arity": 1,
      "name": "fn_2",
      "rewritten": [
        "(lam (fold $0 (cons (+ 1 (+ prev_dc_inv_0 prev_dc_inv_0)) empty) (fn_2 cons)))",
        "(lam (fold $0 (cons (+ prev_dc_inv_0 (+ 1 prev_dc_inv_0)) empty) (fn_2 cons)))",
        "(lam (map (lam (index $0 (cons prev_dc_inv_0 (range $0)))) $0))",
        "(lam (map (lam (index $0 (cons prev_dc_inv_0 (range (+ $0 $0))))) $0))",
        "(lam (empty? (range (fold $0 1 (lam (lam (* $0 $1)))))))",
        "(lam (empty? (range (fold $0 1 (fn_2 *)))))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (index prev_dc_inv_0 (cdr (cdr $0))))",
        "(lam (index (+ prev_dc_inv_0 prev_dc_inv_0) $0))",
        "(lam (is-square (fold $0 1 (lam (lam (+ $0 (mod $1 prev_dc_inv_0)))))))",
        "(lam (is-prime (fold $0 prev_dc_inv_0 (lam (lam (- $0 (mod $1 $0)))))))",
        "(lam (fold $0 1 (lam (lam (+ $0 (length (range (- $1 $0))))))))",
        "(lam (fold $0 1 (lam (lam (+ $1 (length (range (- $0 $1))))))))",
        "(lam (length $0))",
        "(lam (length (range (length $0))))",
        "(lam (map (lam (mod $0 prev_dc_inv_0)) $0))",
        "(lam (map (lam $0) (map (lam (mod $0 prev_dc_inv_0)) $0)))",
        "(lam (map (lam 0) $0))",
        "(lam (map (lam (length empty)) $0))",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
        "(lam (cons (car $0) $0))",
        "(lam (cons (car (prev_dc_inv_1 $0)) $0))",
        "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
        "(lam (fold $0 1 (fn_2 *)))",
        "(lam (fold $0 $0 (fn_2 cons)))",
        "(lam (fold $0 (map (lam $0) $0) (fn_2 cons)))",
        "(lam (fold (cdr (cdr (cdr $0))) $0 (lam (lam (cons $1 (prev_dc_inv_1 $0))))))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (map (lam (index $0 $1)) (range prev_dc_inv_0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (fold $0 (cons (+ 1 (+ #(+ 1 1) #(+ 1 1))) empty) (#(lambda (lambda (lambda ($2 $1 $0)))) cons)))",
        "(lambda (fold $0 (cons (+ #(+ 1 1) (+ 1 #(+ 1 1))) empty) (#(lambda (lambda (lambda ($2 $1 $0)))) cons)))",
        "(lambda (map (lambda (index $0 (cons #(+ 1 1) (range $0)))) $0))",
        "(lambda (map (lambda (index $0 (cons #(+ 1 1) (range (+ $0 $0))))) $0))",
        "(lambda (empty? (range (fold $0 1 (lambda (lambda (* $0 $1)))))))",
        "(lambda (empty? (range (fold $0 1 (#(lambda (lambda (lambda ($2 $1 $0)))) *)))))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (index #(+ 1 1) (cdr (cdr $0))))",
        "(lambda (index (+ #(+ 1 1) #(+ 1 1)) $0))",
        "(lambda (is-square (fold $0 1 (lambda (lambda (+ $0 (mod $1 #(+ 1 1))))))))",
        "(lambda (is-prime (fold $0 #(+ 1 1) (lambda (lambda (- $0 (mod $1 $0)))))))",
        "(lambda (fold $0 1 (lambda (lambda (+ $0 (length (range (- $1 $0))))))))",
        "(lambda (fold $0 1 (lambda (lambda (+ $1 (length (range (- $0 $1))))))))",
        "(lambda (length $0))",
        "(lambda (length (range (length $0))))",
        "(lambda (map (lambda (mod $0 #(+ 1 1))) $0))",
        "(lambda (map (lambda $0) (map (lambda (mod $0 #(+ 1 1))) $0)))",
        "(lambda (map (lambda 0) $0))",
        "(lambda (map (lambda (length empty)) $0))",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
        "(lambda (cons (car $0) $0))",
        "(lambda (cons (car (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)) $0))",
        "(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))",
        "(lambda (fold $0 1 (#(lambda (lambda (lambda ($2 $1 $0)))) *)))",
        "(lambda (fold $0 $0 (#(lambda (lambda (lambda ($2 $1 $0)))) cons)))",
        "(lambda (fold $0 (map (lambda $0) $0) (#(lambda (lambda (lambda ($2 $1 $0)))) cons)))",
        "(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0))))))",
        "(lambda (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0))",
        "(lambda (map (lambda (index $0 $1)) (range #(+ 1 1))))"
      ],
      "utility": 208,
      "expected_cost": 9403,
      "final_cost": 9403,
      "multiplier": 1.0438158034669787,
      "multiplier_wrt_orig": 1.0438158034669787,
      "num_uses": 6,
      "uses": [
        {
          "fn_2 *": "(lam (lam (* $1 $0)))"
        },
        {
          "fn_2 cons": "(lam (lam (cons $1 $0)))"
        }
      ]
    },
    {
      "body": "(lam (map #0 $0))",
      "dreamcoder": "#(lambda (lambda (map $1 $0)))",
      "arity": 1,
      "name": "fn_3",
      "rewritten": [
        "(lam (fold $0 (cons (+ 1 (+ prev_dc_inv_0 prev_dc_inv_0)) empty) (fn_2 cons)))",
        "(lam (fold $0 (cons (+ prev_dc_inv_0 (+ 1 prev_dc_inv_0)) empty) (fn_2 cons)))",
        "(fn_3 (lam (index $0 (cons prev_dc_inv_0 (range $0)))))",
        "(fn_3 (lam (index $0 (cons prev_dc_inv_0 (range (+ $0 $0))))))",
        "(lam (empty? (range (fold $0 1 (lam (lam (* $0 $1)))))))",
        "(lam (empty? (range (fold $0 1 (fn_2 *)))))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (index prev_dc_inv_0 (cdr (cdr $0))))",
        "(lam (index (+ prev_dc_inv_0 prev_dc_inv_0) $0))",
        "(lam (is-square (fold $0 1 (lam (lam (+ $0 (mod $1 prev_dc_inv_0)))))))",
        "(lam (is-prime (fold $0 prev_dc_inv_0 (lam (lam (- $0 (mod $1 $0)))))))",
        "(lam (fold $0 1 (lam (lam (+ $0 (length (range (- $1 $0))))))))",
        "(lam (fold $0 1 (lam (lam (+ $1 (length (range (- $0 $1))))))))",
        "(lam (length $0))",
        "(lam (length (range (length $0))))",
        "(fn_3 (lam (mod $0 prev_dc_inv_0)))",
        "(lam (map (lam $0) (map (lam (mod $0 prev_dc_inv_0)) $0)))",
        "(fn_3 (lam 0))",
        "(fn_3 (lam (length empty)))",
        "(fn_3 (lam (+ $0 $0)))",
        "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
        "(lam (cons (car $0) $0))",
        "(lam (cons (car (prev_dc_inv_1 $0)) $0))",
        "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
        "(lam (fold $0 1 (fn_2 *)))",
        "(lam (fold $0 $0 (fn_2 cons)))",
        "(lam (fold $0 (map (lam $0) $0) (fn_2 cons)))",
        "(lam (fold (cdr (cdr (cdr $0))) $0 (lam (lam (cons $1 (prev_dc_inv_1 $0))))))",
        "(lam (prev_dc_inv_1 $0))",
        "(lam (map (lam (index $0 $1)) (range prev_dc_inv_0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (fold $0 (cons (+ 1 (+ #(+ 1 1) #(+ 1 1))) empty) (fn_2 cons)))",
        "(lambda (fold $0 (cons (+ #(+ 1 1) (+ 1 #(+ 1 1))) empty) (fn_2 cons)))",
        "(#(lambda (lambda (map $1 $0))) (lambda (index $0 (cons #(+ 1 1) (range $0)))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (index $0 (cons #(+ 1 1) (range (+ $0 $0))))))",
        "(lambda (empty? (range (fold $0 1 (lambda (lambda (* $0 $1)))))))",
        "(lambda (empty? (range (fold $0 1 (fn_2 *)))))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (index #(+ 1 1) (cdr (cdr $0))))",
        "(lambda (index (+ #(+ 1 1) #(+ 1 1)) $0))",
        "(lambda (is-square (fold $0 1 (lambda (lambda (+ $0 (mod $1 #(+ 1 1))))))))",
        "(lambda (is-prime (fold $0 #(+ 1 1) (lambda (lambda (- $0 (mod $1 $0)))))))",
        "(lambda (fold $0 1 (lambda (lambda (+ $0 (length (range (- $1 $0))))))))",
        "(lambda (fold $0 1 (lambda (lambda (+ $1 (length (range (- $0 $1))))))))",
        "(lambda (length $0))",
        "(lambda (length (range (length $0))))",
        "(#(lambda (lambda (map $1 $0))) (lambda (mod $0 #(+ 1 1))))",
        "(lambda (map (lambda $0) (map (lambda (mod $0 #(+ 1 1))) $0)))",
        "(#(lambda (lambda (map $1 $0))) (lambda 0))",
        "(#(lambda (lambda (map $1 $0))) (lambda (length empty)))",
        "(#(lambda (lambda (map $1 $0))) (lambda (+ $0 $0)))",
        "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
        "(lambda (cons (car $0) $0))",
        "(lambda (cons (car (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0)) $0))",
        "(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))",
        "(lambda (fold $0 1 (fn_2 *)))",
        "(lambda (fold $0 $0 (fn_2 cons)))",
        "(lambda (fold $0 (map (lambda $0) $0) (fn_2 cons)))",
        "(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0))))))",
        "(lambda (#(lambda (cons (car $0) (cons (car (cdr $0)) empty))) $0))",
        "(lambda (map (lambda (index $0 $1)) (range #(+ 1 1))))"
      ],
      "utility": 205,
      "expected_cost": 8995,
      "final_cost": 8995,
      "multiplier": 1.0453585325180657,
      "multiplier_wrt_orig": 1.0911617565314062,
      "num_uses": 6,
      "uses": [
        {
          "fn_3 (lam (+ $0 $0))": "(lam (map (lam (+ $0 $0)) $0))"
        },
        {
          "fn_3 (lam (index $0 (cons prev_dc_inv_0 (range $0))))": "(lam (map (lam (index $0 (cons prev_dc_inv_0 (range $0)))) $0))"
        },
        {
          "fn_3 (lam (index $0 (cons prev_dc_inv_0 (range (+ $0 $0)))))": "(lam (map (lam (index $0 (cons prev_dc_inv_0 (range (+ $0 $0))))) $0))"
        },
        {
          "fn_3 (lam (length empty))": "(lam (map (lam (length empty)) $0))"
        },
        {
          "fn_3 (lam (mod $0 prev_dc_inv_0))": "(lam (map (lam (mod $0 prev_dc_inv_0)) $0))"
        },
        {
          "fn_3 (lam 0)": "(lam (map (lam 0) $0))"
        }
      ]
    }
  ]
}