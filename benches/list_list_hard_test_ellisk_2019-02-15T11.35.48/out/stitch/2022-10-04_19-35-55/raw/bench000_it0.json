{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.35.48/bench000_it0.json --max-arity=3 --threads=1 --iterations=2 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.35.48/out/stitch/2022-10-04_19-35-55/raw/bench000_it0.json",
  "args": {
    "file": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.35.48/bench000_it0.json",
    "out": "compression_benchmark/benches/list_list_hard_test_ellisk_2019-02-15T11.35.48/out/stitch/2022-10-04_19-35-55/raw/bench000_it0.json",
    "iterations": 2,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 12644,
  "original": [
    "(lam (map (lam (index $0 (cons (+ 1 1) (range $0)))) $0))",
    "(lam (map (lam (index $0 (cons (+ $0 (+ 1 1)) (range $0)))) $0))",
    "(lam (car $0))",
    "(lam (index 0 $0))",
    "(lam (is-square (fold $0 1 (lam (lam (+ $0 (mod $1 (+ 1 1))))))))",
    "(lam (is-prime (fold $0 (+ 1 1) (lam (lam (- $0 (mod $1 $0)))))))",
    "(lam (fold $0 0 (lam (lam (+ $0 (length (range (- $1 $0))))))))",
    "(lam (fold $0 1 (lam (lam (+ $0 (length (range (- $1 $0))))))))",
    "(lam (map (lam (+ $0 $0)) $0))",
    "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
    "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
    "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
    "(lam (fold (cdr (cdr (cdr $0))) $0 (lam (lam (cons $1 (cons (car $0) (cons (car (cdr $0)) empty)))))))",
    "(lam (cons (car $0) (cons (car (cdr $0)) empty)))",
    "(lam (cons (car $0) (cons (index 1 $0) empty)))"
  ],
  "invs": [
    {
      "body": "(cons (car #0))",
      "dreamcoder": "#(lambda (cons (car $0)))",
      "arity": 1,
      "name": "fn_0",
      "rewritten": [
        "(lam (map (lam (index $0 (cons (+ 1 1) (range $0)))) $0))",
        "(lam (map (lam (index $0 (cons (+ $0 (+ 1 1)) (range $0)))) $0))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (is-square (fold $0 1 (lam (lam (+ $0 (mod $1 (+ 1 1))))))))",
        "(lam (is-prime (fold $0 (+ 1 1) (lam (lam (- $0 (mod $1 $0)))))))",
        "(lam (fold $0 0 (lam (lam (+ $0 (length (range (- $1 $0))))))))",
        "(lam (fold $0 1 (lam (lam (+ $0 (length (range (- $1 $0))))))))",
        "(lam (map (lam (+ $0 $0)) $0))",
        "(lam (map (lam (+ $0 $0)) (map (lam $0) $0)))",
        "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
        "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
        "(lam (fold (cdr (cdr (cdr $0))) $0 (lam (lam (cons $1 (fn_0 $0 (fn_0 (cdr $0) empty)))))))",
        "(lam (fn_0 $0 (fn_0 (cdr $0) empty)))",
        "(lam (fn_0 $0 (cons (index 1 $0) empty)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (index $0 (cons (+ 1 1) (range $0)))) $0))",
        "(lambda (map (lambda (index $0 (cons (+ $0 (+ 1 1)) (range $0)))) $0))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (is-square (fold $0 1 (lambda (lambda (+ $0 (mod $1 (+ 1 1))))))))",
        "(lambda (is-prime (fold $0 (+ 1 1) (lambda (lambda (- $0 (mod $1 $0)))))))",
        "(lambda (fold $0 0 (lambda (lambda (+ $0 (length (range (- $1 $0))))))))",
        "(lambda (fold $0 1 (lambda (lambda (+ $0 (length (range (- $1 $0))))))))",
        "(lambda (map (lambda (+ $0 $0)) $0))",
        "(lambda (map (lambda (+ $0 $0)) (map (lambda $0) $0)))",
        "(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))",
        "(lambda (fold $0 1 (lambda (lambda (* $1 $0)))))",
        "(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (#(lambda (cons (car $0))) $0 (#(lambda (cons (car $0))) (cdr $0) empty)))))))",
        "(lambda (#(lambda (cons (car $0))) $0 (#(lambda (cons (car $0))) (cdr $0) empty)))",
        "(lambda (#(lambda (cons (car $0))) $0 (cons (index 1 $0) empty)))"
      ],
      "utility": 202,
      "expected_cost": 6474,
      "final_cost": 6474,
      "multiplier": 1.0624034599938215,
      "multiplier_wrt_orig": 1.0624034599938215,
      "num_uses": 5,
      "uses": [
        {
          "fn_0 $0": "(cons (car $0))"
        },
        {
          "fn_0 (cdr $0)": "(cons (car (cdr $0)))"
        }
      ]
    },
    {
      "body": "(+ #0 #0)",
      "dreamcoder": "#(lambda (+ $0 $0))",
      "arity": 1,
      "name": "fn_1",
      "rewritten": [
        "(lam (map (lam (index $0 (cons (fn_1 1) (range $0)))) $0))",
        "(lam (map (lam (index $0 (cons (+ $0 (fn_1 1)) (range $0)))) $0))",
        "(lam (car $0))",
        "(lam (index 0 $0))",
        "(lam (is-square (fold $0 1 (lam (lam (+ $0 (mod $1 (fn_1 1))))))))",
        "(lam (is-prime (fold $0 (fn_1 1) (lam (lam (- $0 (mod $1 $0)))))))",
        "(lam (fold $0 0 (lam (lam (+ $0 (length (range (- $1 $0))))))))",
        "(lam (fold $0 1 (lam (lam (+ $0 (length (range (- $1 $0))))))))",
        "(lam (map (lam (fn_1 $0)) $0))",
        "(lam (map (lam (fn_1 $0)) (map (lam $0) $0)))",
        "(lam (fold $0 1 (lam (lam (* $0 $1)))))",
        "(lam (fold $0 1 (lam (lam (* $1 $0)))))",
        "(lam (fold (cdr (cdr (cdr $0))) $0 (lam (lam (cons $1 (fn_0 $0 (fn_0 (cdr $0) empty)))))))",
        "(lam (fn_0 $0 (fn_0 (cdr $0) empty)))",
        "(lam (fn_0 $0 (cons (index 1 $0) empty)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (index $0 (cons (#(lambda (+ $0 $0)) 1) (range $0)))) $0))",
        "(lambda (map (lambda (index $0 (cons (+ $0 (#(lambda (+ $0 $0)) 1)) (range $0)))) $0))",
        "(lambda (car $0))",
        "(lambda (index 0 $0))",
        "(lambda (is-square (fold $0 1 (lambda (lambda (+ $0 (mod $1 (#(lambda (+ $0 $0)) 1))))))))",
        "(lambda (is-prime (fold $0 (#(lambda (+ $0 $0)) 1) (lambda (lambda (- $0 (mod $1 $0)))))))",
        "(lambda (fold $0 0 (lambda (lambda (+ $0 (length (range (- $1 $0))))))))",
        "(lambda (fold $0 1 (lambda (lambda (+ $0 (length (range (- $1 $0))))))))",
        "(lambda (map (lambda (#(lambda (+ $0 $0)) $0)) $0))",
        "(lambda (map (lambda (#(lambda (+ $0 $0)) $0)) (map (lambda $0) $0)))",
        "(lambda (fold $0 1 (lambda (lambda (* $0 $1)))))",
        "(lambda (fold $0 1 (lambda (lambda (* $1 $0)))))",
        "(lambda (fold (cdr (cdr (cdr $0))) $0 (lambda (lambda (cons $1 (fn_0 $0 (fn_0 (cdr $0) empty)))))))",
        "(lambda (fn_0 $0 (fn_0 (cdr $0) empty)))",
        "(lambda (fn_0 $0 (cons (index 1 $0) empty)))"
      ],
      "utility": 201,
      "expected_cost": 6171,
      "final_cost": 6171,
      "multiplier": 1.0491006319883325,
      "multiplier_wrt_orig": 1.1145681413061093,
      "num_uses": 6,
      "uses": [
        {
          "fn_1 $0": "(+ $0 $0)"
        },
        {
          "fn_1 1": "(+ 1 1)"
        }
      ]
    }
  ]
}