{
    "bench_group": "towers_tower_batch_50_3600_ellisk_2019-03-26T11.05.16",
    "bench": "bench001_it1",
    "mode": "stitch",
    "run": "compression_benchmark/benches/towers_tower_batch_50_3600_ellisk_2019-03-26T11.05.16/out/stitch/2022-10-04_19-36-10",
    "metrics": {
        "time_binary_seconds": 0.08,
        "time_per_inv_with_rewrite": 10.8,
        "time_per_inv_no_rewrite": 10.4,
        "mem_peak_kb": 5176,
        "compression_ratio": 1.1265080366754519,
        "absolute_compression": 6816,
        "compression_ratio_min": 1.2700345495913037
    },
    "num_inventions": 5,
    "inventions": [
        {
            "name": "fn_6",
            "dreamcoder": "#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (tower_loopM $0 (lambda (lambda (1x3 (moveHand 4 ($3 $0))))) (moveHand 2 (3x1 $2)))))) $0 (lambda (reverseHand (1x3 $0))))) (moveHand 4 $0) $4))) $0))))",
            "stitch_uncanonical": "(lam (tower_loopM #1 (lam (lam (prev_dc_inv_5 (moveHand 4 $0) #0))) $0))",
            "stitch_canonical": "(lam (tower_loopM #0 (lam (lam (prev_dc_inv_5 (moveHand 4 $0) #1))) $0))",
            "arity": 2
        },
        {
            "name": "fn_7",
            "dreamcoder": "#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (#(lambda (lambda (lambda (tower_loopM $0 (lambda (lambda (1x3 (moveHand 4 ($3 $0))))) (moveHand 2 (3x1 $2)))))) $0 (lambda (reverseHand (1x3 $0))))) (reverseHand (moveHand 4 $0)) $4))) $0))))",
            "stitch_uncanonical": "(lam (tower_loopM #1 (lam (lam (prev_dc_inv_5 (reverseHand (moveHand 4 $0)) #0))) $0))",
            "stitch_canonical": "(lam (tower_loopM #0 (lam (lam (prev_dc_inv_5 (reverseHand (moveHand 4 $0)) #1))) $0))",
            "arity": 2
        },
        {
            "name": "fn_8",
            "dreamcoder": "#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (moveHand 4 (#(lambda (#(lambda (lambda (lambda (tower_loopM $0 (lambda (lambda (1x3 (moveHand 4 ($3 $0))))) (moveHand 2 (3x1 $2)))))) $0 (lambda (reverseHand (1x3 $0))))) (moveHand 4 (reverseHand (#(lambda (lambda (tower_loopM $1 (lambda (lambda (moveHand $2 (1x3 (moveHand 2 (tower_embed (lambda (moveHand 2 (1x3 $0))) (3x1 $0)))))))))) 1 2 $0))) $4)))) $0))))",
            "stitch_uncanonical": "(lam (tower_loopM #1 (lam (lam (moveHand 4 (prev_dc_inv_5 (moveHand 4 (reverseHand (prev_dc_inv_4 1 2 $0))) #0)))) $0))",
            "stitch_canonical": "(lam (tower_loopM #0 (lam (lam (moveHand 4 (prev_dc_inv_5 (moveHand 4 (reverseHand (prev_dc_inv_4 1 2 $0))) #1)))) $0))",
            "arity": 2
        },
        {
            "name": "fn_9",
            "dreamcoder": "#(lambda (lambda (#(lambda (lambda (tower_loopM $1 (lambda (lambda (moveHand $2 (1x3 (moveHand 2 (tower_embed (lambda (moveHand 2 (1x3 $0))) (3x1 $0)))))))))) $1 4 $0)))",
            "stitch_uncanonical": "(lam (prev_dc_inv_4 #0 4 $0))",
            "stitch_canonical": "(lam (prev_dc_inv_4 #0 4 $0))",
            "arity": 1
        },
        {
            "name": "fn_10",
            "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) $1 $2 $0))))",
            "stitch_uncanonical": "(lam (prev_dc_inv_3 #1 #0 $0))",
            "stitch_canonical": "(lam (prev_dc_inv_3 #0 #1 $0))",
            "arity": 2
        }
    ]
}