{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": -0.46468,
        "productions": [
            {
                "expression": "char-eq?",
                "logProbability": -0.000118
            },
            {
                "expression": "empty?",
                "logProbability": -0.032914
            },
            {
                "expression": "1",
                "logProbability": -0.12079
            },
            {
                "expression": "length",
                "logProbability": -0.134741
            },
            {
                "expression": "range",
                "logProbability": -0.151984
            },
            {
                "expression": "+",
                "logProbability": -0.167376
            },
            {
                "expression": "0",
                "logProbability": -0.195584
            },
            {
                "expression": "-",
                "logProbability": -0.200165
            },
            {
                "expression": "LPAREN",
                "logProbability": -0.323149
            },
            {
                "expression": "','",
                "logProbability": -0.407649
            },
            {
                "expression": "SPACE",
                "logProbability": -0.43756
            },
            {
                "expression": "'.'",
                "logProbability": -0.46827
            },
            {
                "expression": "'-'",
                "logProbability": -0.468331
            },
            {
                "expression": "RPAREN",
                "logProbability": -0.50008
            },
            {
                "expression": "cons",
                "logProbability": -1.104059
            },
            {
                "expression": "STRING",
                "logProbability": -1.223596
            },
            {
                "expression": "cdr",
                "logProbability": -1.263242
            },
            {
                "expression": "empty",
                "logProbability": -1.27759
            },
            {
                "expression": "map",
                "logProbability": -1.308356
            },
            {
                "expression": "unfold",
                "logProbability": -1.327781
            },
            {
                "expression": "index",
                "logProbability": -1.516786
            },
            {
                "expression": "fold",
                "logProbability": -1.521371
            },
            {
                "expression": "if",
                "logProbability": -1.521378
            },
            {
                "expression": "car",
                "logProbability": -1.526004
            },
            {
                "expression": "#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0))))))",
                "logProbability": -1.039665
            },
            {
                "expression": "#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $1 $2) $3 $0)))))))",
                "logProbability": -1.223596
            },
            {
                "expression": "#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
                "logProbability": -1.223596
            },
            {
                "expression": "#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0)))))",
                "logProbability": -1.254313
            },
            {
                "expression": "#(lambda (lambda (fold $1 $1 (lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 $4) (cdr $0) $0)))))))))",
                "logProbability": -1.254368
            },
            {
                "expression": "#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $1 $2) empty (cons $1 $0)))))))",
                "logProbability": -1.254368
            },
            {
                "expression": "#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0))))))))",
                "logProbability": -1.263243
            }
        ]
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "Replace ',' w/ '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' ',' $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' ',' (map (lambda $0) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Replace '-' w/ ' '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) SPACE '-' $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 $4) (cdr $0) $0))))))))) (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) SPACE '-' $0) LPAREN))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Replace ' ' w/ '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN SPACE $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) LPAREN SPACE $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "drop first word delimited by '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $1 $2) $3 $0))))))) $0 '.'))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) SPACE '.' $0) $0 (lambda (lambda (cdr (if (char-eq? $1 SPACE) $2 $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=0) word delimited by '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $1 $2) empty (cons $1 $0))))))) $0 '.'))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 $4) (cdr $0) $0))))))))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $1 $2) empty (cons $1 $0))))))) $0 '.') LPAREN))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=0) word delimited by ','",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $1 $2) empty (cons $1 $0))))))) $0 ','))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? (car $0) ',') empty $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=-1) word delimited by ','",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 $4) (cdr $0) $0))))))))) $0 ','))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 ',') $0 (cons $1 $0))))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "drop first word delimited by ' '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $1 $2) $3 $0))))))) $0 SPACE))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 SPACE) (if (char-eq? $1 ',') empty $2) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=-1) word delimited by ' '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 $4) (cdr $0) $0))))))))) $0 SPACE))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 SPACE) (cdr $2) $0))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "drop first word delimited by '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $1 $2) $3 $0))))))) $0 LPAREN))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold (cdr $0) $0 (lambda (lambda (cdr (if (char-eq? $1 LPAREN) (cdr $2) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=0) word delimited by '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $1 $2) empty (cons $1 $0))))))) $0 LPAREN))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 empty (lambda (lambda (if (char-eq? $1 LPAREN) empty (cons $1 $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '.' $0) $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 $4) (cdr $0) $0))))))))) (cons '.' $0) LPAREN) $1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) (#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0))))) '.' ',' $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '-'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '-' $0) $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '-' $0) (map (lambda $0) $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '  '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons SPACE (cons SPACE $0)) $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 $4) (cdr $0) $0))))))))) (cons SPACE (cons SPACE $0)) LPAREN) $1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '(,'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN (cons ',' $0)) $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN (cons ',' $0)) (map (lambda $0) $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Drop last 2 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (length $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (length (range (length $0)))) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Drop last 4 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (length $0)) (cdr (cdr $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (length (cdr $0))) (cdr $0)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first 4 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (+ (index 1 $0) 1)) (range (length $0))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (+ 1 (index 1 $0))) (range (length $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Drop last 5 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (length $0)) (cdr (cdr (cdr $0)))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (length (cdr $0))) (cdr (cdr $0))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Extract word delimited by ')' - ','",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $1 $2) $3 $0))))))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $1 $2) empty (cons $1 $0))))))) $0 ',') RPAREN))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $1 $2) empty (cons $1 $0))))))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $1 $2) $3 $0))))))) $0 RPAREN) ','))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first character and append '-'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cons (car $0) (cons '-' empty)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate separate words (II)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $1 (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 $4) (cdr $0) $0))))))))) $0 LPAREN))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate separate words (III)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '.' (cons (car $0) (cons '.' empty))) (cons (car $1) empty))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate words separated by '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $0 (fold $0 $0 (lambda (lambda (if (char-eq? $1 LPAREN) (cdr $2) (cdr $0)))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Abbreviate separate words (IIIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty)))))) $1 $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (cons (car $1) (cons '.' (cons (index 0 $0) (cons '.' empty))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 2 strings (I)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 2 strings (III)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 2 strings (IIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 2 strings (IIIII)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (#(lambda (lambda (fold $1 $1 (lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 $4) (cdr $0) $0))))))))) $1 LPAREN))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append '636'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend 'Sergienko'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend 'Spell'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Prepend '086' to first word",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $1 $2) empty (cons $1 $0))))))) $0 SPACE) STRING))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $1 $2) empty (cons $1 $0))))))) (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING) SPACE))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "parentheses around a single word (III)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) (cons LPAREN $0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons LPAREN (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons RPAREN empty) $0)))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 3,
        "num_learned": 2,
        "new_grammar": {
            "logVariable": -0.475753,
            "productions": [
                {
                    "expression": "char-eq?",
                    "logProbability": -6e-05
                },
                {
                    "expression": "empty?",
                    "logProbability": -0.032857
                },
                {
                    "expression": "1",
                    "logProbability": -0.121474
                },
                {
                    "expression": "length",
                    "logProbability": -0.130073
                },
                {
                    "expression": "+",
                    "logProbability": -0.162714
                },
                {
                    "expression": "0",
                    "logProbability": -0.190779
                },
                {
                    "expression": "-",
                    "logProbability": -0.195502
                },
                {
                    "expression": "range",
                    "logProbability": -0.231489
                },
                {
                    "expression": "LPAREN",
                    "logProbability": -0.484192
                },
                {
                    "expression": "SPACE",
                    "logProbability": -0.487813
                },
                {
                    "expression": "','",
                    "logProbability": -0.542782
                },
                {
                    "expression": "'.'",
                    "logProbability": -0.572316
                },
                {
                    "expression": "'-'",
                    "logProbability": -0.602223
                },
                {
                    "expression": "RPAREN",
                    "logProbability": -0.632995
                },
                {
                    "expression": "cons",
                    "logProbability": -1.397171
                },
                {
                    "expression": "STRING",
                    "logProbability": -1.410883
                },
                {
                    "expression": "cdr",
                    "logProbability": -1.44692
                },
                {
                    "expression": "empty",
                    "logProbability": -1.4877
                },
                {
                    "expression": "map",
                    "logProbability": -1.529577
                },
                {
                    "expression": "unfold",
                    "logProbability": -1.543195
                },
                {
                    "expression": "index",
                    "logProbability": -1.743778
                },
                {
                    "expression": "fold",
                    "logProbability": -1.748477
                },
                {
                    "expression": "if",
                    "logProbability": -1.748483
                },
                {
                    "expression": "car",
                    "logProbability": -1.753224
                },
                {
                    "expression": "#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0))))))",
                    "logProbability": -1.30572
                },
                {
                    "expression": "#(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons $0 $1))))",
                    "logProbability": -1.361479
                },
                {
                    "expression": "#(lambda (lambda (fold $1 $1 (lambda (lambda (if (char-eq? $1 $2) empty (cons $1 $0)))))))",
                    "logProbability": -1.381474
                },
                {
                    "expression": "#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
                    "logProbability": -1.410883
                },
                {
                    "expression": "#(lambda (lambda (fold $1 $1 (lambda (lambda (cdr (if (char-eq? $1 $2) $3 $0)))))))",
                    "logProbability": -1.420041
                },
                {
                    "expression": "#(lambda (lambda (map (lambda (if (char-eq? $0 $1) $2 $0)))))",
                    "logProbability": -1.440687
                },
                {
                    "expression": "#(lambda (lambda (fold $1 $1 (lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 $4) (cdr $0) $0)))))))))",
                    "logProbability": -1.457587
                },
                {
                    "expression": "#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0))))))))",
                    "logProbability": -1.478653
                },
                {
                    "expression": "#(lambda (lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $1 (lambda (length (cdr $0))) (cdr $0))))",
                    "logProbability": -1.47866
                }
            ]
        }
    }
}