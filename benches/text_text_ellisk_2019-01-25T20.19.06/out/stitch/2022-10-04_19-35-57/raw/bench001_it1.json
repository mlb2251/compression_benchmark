{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-25T20.19.06/bench001_it1.json --max-arity=3 --threads=1 --iterations=2 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-25T20.19.06/out/stitch/2022-10-04_19-35-57/raw/bench001_it1.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-25T20.19.06/bench001_it1.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-25T20.19.06/out/stitch/2022-10-04_19-35-57/raw/bench001_it1.json",
    "iterations": 2,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 26404,
  "original": [
    "(lam (map (lam (if (char-eq? $0 ',') '.' $0)) $0))",
    "(lam (map (lam (if (char-eq? ',' $0) '.' $0)) $0))",
    "(lam (map (lam (if (char-eq? $0 SPACE) LPAREN $0)) $0))",
    "(lam (map (lam (if (char-eq? SPACE $0) LPAREN $0)) $0))",
    "(lam (fold $0 $0 (lam (lam (if (char-eq? $1 ',') empty (cons $1 $0))))))",
    "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? (car $0) ',') empty $0))))))",
    "(lam (fold $0 $0 (lam (lam (fold $0 $0 (lam (lam (if (char-eq? $1 ',') (cdr $0) $0))))))))",
    "(lam (fold $0 $0 (lam (lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 ',') $0 (cons $1 $0))))))))))",
    "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 SPACE) $2 $0))))))",
    "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 SPACE) (if (char-eq? $1 ',') empty $2) $0))))))",
    "(lam (lam (prev_dc_inv_0 (cons LPAREN $0) $1)))",
    "(lam (lam (prev_dc_inv_0 (cons LPAREN $0) (map (lam (if (char-eq? $0 ',') '.' $0)) $1))))",
    "(lam (lam (prev_dc_inv_0 (cons '-' $0) $1)))",
    "(lam (lam (prev_dc_inv_0 (cons '-' $0) (map (lam $0) $1))))",
    "(lam (prev_dc_inv_1 $0 (lam (length $0)) $0))",
    "(lam (prev_dc_inv_1 $0 (lam (length (range (length $0)))) $0))",
    "(lam (prev_dc_inv_1 $0 (lam (+ (index 1 $0) 1)) (range (length $0))))",
    "(lam (prev_dc_inv_1 $0 (lam (+ 1 (index 1 $0))) (range (length $0))))",
    "(lam (cons (car $0) (cons '-' empty)))",
    "(lam (cons (car $0) (map (lam '-') (range 1))))",
    "(lam (lam (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
    "(lam (lam (prev_dc_inv_0 (cons '.' (cons (car $0) (cons '.' empty))) (cons (car $1) empty))))",
    "(lam (lam (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
    "(lam (lam (cons (car $1) (cons '.' (cons (index 0 $0) (cons '.' empty))))))",
    "(lam (lam (prev_dc_inv_0 $0 $1)))",
    "(lam (lam (prev_dc_inv_0 (map (lam $0) $0) $1)))",
    "(lam (lam (prev_dc_inv_0 $0 $1)))",
    "(lam (lam (prev_dc_inv_0 $0 (map (lam $0) $1))))",
    "(lam (prev_dc_inv_0 STRING $0))",
    "(lam (prev_dc_inv_0 (map (lam $0) STRING) $0))",
    "(lam (prev_dc_inv_0 $0 STRING))",
    "(lam (prev_dc_inv_0 $0 (map (lam $0) STRING)))"
  ],
  "invs": [
    {
      "body": "(lam (lam (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
      "dreamcoder": "#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
      "arity": 0,
      "name": "fn_2",
      "rewritten": [
        "(lam (map (lam (if (char-eq? $0 ',') '.' $0)) $0))",
        "(lam (map (lam (if (char-eq? ',' $0) '.' $0)) $0))",
        "(lam (map (lam (if (char-eq? $0 SPACE) LPAREN $0)) $0))",
        "(lam (map (lam (if (char-eq? SPACE $0) LPAREN $0)) $0))",
        "(lam (fold $0 $0 (lam (lam (if (char-eq? $1 ',') empty (cons $1 $0))))))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? (car $0) ',') empty $0))))))",
        "(lam (fold $0 $0 (lam (lam (fold $0 $0 (lam (lam (if (char-eq? $1 ',') (cdr $0) $0))))))))",
        "(lam (fold $0 $0 (lam (lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 ',') $0 (cons $1 $0))))))))))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 SPACE) $2 $0))))))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 SPACE) (if (char-eq? $1 ',') empty $2) $0))))))",
        "(lam (lam (prev_dc_inv_0 (cons LPAREN $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (cons LPAREN $0) (map (lam (if (char-eq? $0 ',') '.' $0)) $1))))",
        "(lam (lam (prev_dc_inv_0 (cons '-' $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (cons '-' $0) (map (lam $0) $1))))",
        "(lam (prev_dc_inv_1 $0 (lam (length $0)) $0))",
        "(lam (prev_dc_inv_1 $0 (lam (length (range (length $0)))) $0))",
        "(lam (prev_dc_inv_1 $0 (lam (+ (index 1 $0) 1)) (range (length $0))))",
        "(lam (prev_dc_inv_1 $0 (lam (+ 1 (index 1 $0))) (range (length $0))))",
        "(lam (cons (car $0) (cons '-' empty)))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "fn_2",
        "(lam (lam (prev_dc_inv_0 (cons '.' (cons (car $0) (cons '.' empty))) (cons (car $1) empty))))",
        "fn_2",
        "(lam (lam (cons (car $1) (cons '.' (cons (index 0 $0) (cons '.' empty))))))",
        "(lam (lam (prev_dc_inv_0 $0 $1)))",
        "(lam (lam (prev_dc_inv_0 (map (lam $0) $0) $1)))",
        "(lam (lam (prev_dc_inv_0 $0 $1)))",
        "(lam (lam (prev_dc_inv_0 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_0 STRING $0))",
        "(lam (prev_dc_inv_0 (map (lam $0) STRING) $0))",
        "(lam (prev_dc_inv_0 $0 STRING))",
        "(lam (prev_dc_inv_0 $0 (map (lam $0) STRING)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (if (char-eq? $0 ',') '.' $0)) $0))",
        "(lambda (map (lambda (if (char-eq? ',' $0) '.' $0)) $0))",
        "(lambda (map (lambda (if (char-eq? $0 SPACE) LPAREN $0)) $0))",
        "(lambda (map (lambda (if (char-eq? SPACE $0) LPAREN $0)) $0))",
        "(lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 ',') empty (cons $1 $0))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? (car $0) ',') empty $0))))))",
        "(lambda (fold $0 $0 (lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 ',') (cdr $0) $0))))))))",
        "(lambda (fold $0 $0 (lambda (lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 ',') $0 (cons $1 $0))))))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 SPACE) $2 $0))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 SPACE) (if (char-eq? $1 ',') empty $2) $0))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) (map (lambda (if (char-eq? $0 ',') '.' $0)) $1))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '-' $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '-' $0) (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (length $0)) $0))",
        "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (length (range (length $0)))) $0))",
        "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (+ (index 1 $0) 1)) (range (length $0))))",
        "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (+ 1 (index 1 $0))) (range (length $0))))",
        "(lambda (cons (car $0) (cons '-' empty)))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '.' (cons (car $0) (cons '.' empty))) (cons (car $1) empty))))",
        "#(lambda (lambda (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))",
        "(lambda (lambda (cons (car $1) (cons '.' (cons (index 0 $0) (cons '.' empty))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))"
      ],
      "utility": 912,
      "expected_cost": 9609,
      "final_cost": 9609,
      "multiplier": 1.210635862212509,
      "multiplier_wrt_orig": 1.210635862212509,
      "num_uses": 2,
      "uses": [
        {
          "fn_2 ": "(lam (lam (cons (car $1) (cons '.' (cons (car $0) (cons '.' empty))))))"
        }
      ]
    },
    {
      "body": "(lam (map (lam (if (char-eq? $0 #1) #0 $0)) $0))",
      "dreamcoder": "#(lambda (lambda (lambda (map (lambda (if (char-eq? $0 $2) $3 $0)) $0))))",
      "arity": 2,
      "name": "fn_3",
      "rewritten": [
        "(fn_3 '.' ',')",
        "(lam (map (lam (if (char-eq? ',' $0) '.' $0)) $0))",
        "(fn_3 LPAREN SPACE)",
        "(lam (map (lam (if (char-eq? SPACE $0) LPAREN $0)) $0))",
        "(lam (fold $0 $0 (lam (lam (if (char-eq? $1 ',') empty (cons $1 $0))))))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? (car $0) ',') empty $0))))))",
        "(lam (fold $0 $0 (lam (lam (fold $0 $0 (lam (lam (if (char-eq? $1 ',') (cdr $0) $0))))))))",
        "(lam (fold $0 $0 (lam (lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 ',') $0 (cons $1 $0))))))))))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 SPACE) $2 $0))))))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 SPACE) (if (char-eq? $1 ',') empty $2) $0))))))",
        "(lam (lam (prev_dc_inv_0 (cons LPAREN $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (cons LPAREN $0) (map (lam (if (char-eq? $0 ',') '.' $0)) $1))))",
        "(lam (lam (prev_dc_inv_0 (cons '-' $0) $1)))",
        "(lam (lam (prev_dc_inv_0 (cons '-' $0) (map (lam $0) $1))))",
        "(lam (prev_dc_inv_1 $0 (lam (length $0)) $0))",
        "(lam (prev_dc_inv_1 $0 (lam (length (range (length $0)))) $0))",
        "(lam (prev_dc_inv_1 $0 (lam (+ (index 1 $0) 1)) (range (length $0))))",
        "(lam (prev_dc_inv_1 $0 (lam (+ 1 (index 1 $0))) (range (length $0))))",
        "(lam (cons (car $0) (cons '-' empty)))",
        "(lam (cons (car $0) (map (lam '-') (range 1))))",
        "fn_2",
        "(lam (lam (prev_dc_inv_0 (cons '.' (cons (car $0) (cons '.' empty))) (cons (car $1) empty))))",
        "fn_2",
        "(lam (lam (cons (car $1) (cons '.' (cons (index 0 $0) (cons '.' empty))))))",
        "(lam (lam (prev_dc_inv_0 $0 $1)))",
        "(lam (lam (prev_dc_inv_0 (map (lam $0) $0) $1)))",
        "(lam (lam (prev_dc_inv_0 $0 $1)))",
        "(lam (lam (prev_dc_inv_0 $0 (map (lam $0) $1))))",
        "(lam (prev_dc_inv_0 STRING $0))",
        "(lam (prev_dc_inv_0 (map (lam $0) STRING) $0))",
        "(lam (prev_dc_inv_0 $0 STRING))",
        "(lam (prev_dc_inv_0 $0 (map (lam $0) STRING)))"
      ],
      "rewritten_dreamcoder": [
        "(#(lambda (lambda (lambda (map (lambda (if (char-eq? $0 $2) $3 $0)) $0)))) '.' ',')",
        "(lambda (map (lambda (if (char-eq? ',' $0) '.' $0)) $0))",
        "(#(lambda (lambda (lambda (map (lambda (if (char-eq? $0 $2) $3 $0)) $0)))) LPAREN SPACE)",
        "(lambda (map (lambda (if (char-eq? SPACE $0) LPAREN $0)) $0))",
        "(lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 ',') empty (cons $1 $0))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? (car $0) ',') empty $0))))))",
        "(lambda (fold $0 $0 (lambda (lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 ',') (cdr $0) $0))))))))",
        "(lambda (fold $0 $0 (lambda (lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 ',') $0 (cons $1 $0))))))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 SPACE) $2 $0))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 SPACE) (if (char-eq? $1 ',') empty $2) $0))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) (map (lambda (if (char-eq? $0 ',') '.' $0)) $1))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '-' $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '-' $0) (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (length $0)) $0))",
        "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (length (range (length $0)))) $0))",
        "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (+ (index 1 $0) 1)) (range (length $0))))",
        "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (+ 1 (index 1 $0))) (range (length $0))))",
        "(lambda (cons (car $0) (cons '-' empty)))",
        "(lambda (cons (car $0) (map (lambda '-') (range 1))))",
        "fn_2",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons '.' (cons (car $0) (cons '.' empty))) (cons (car $1) empty))))",
        "fn_2",
        "(lambda (lambda (cons (car $1) (cons '.' (cons (index 0 $0) (cons '.' empty))))))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
        "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) $1))))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) STRING $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) STRING) $0))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 STRING))",
        "(lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 (map (lambda $0) STRING)))"
      ],
      "utility": 405,
      "expected_cost": 8595,
      "final_cost": 8595,
      "multiplier": 1.117975567190227,
      "multiplier_wrt_orig": 1.3534613147178591,
      "num_uses": 2,
      "uses": [
        {
          "fn_3 '.' ','": "(lam (map (lam (if (char-eq? $0 ',') '.' $0)) $0))"
        },
        {
          "fn_3 LPAREN SPACE": "(lam (map (lam (if (char-eq? $0 SPACE) LPAREN $0)) $0))"
        }
      ]
    }
  ]
}