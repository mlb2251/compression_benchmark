{
  "cmd": "/scratch/mlbowers/proj/stitch/target/release/compress compression_benchmark/benches/text_text_ellisk_2019-01-25T20.19.06/bench000_it0.json --max-arity=3 --threads=1 --iterations=2 --fmt=dreamcoder --dreamcoder-comparison --out=compression_benchmark/benches/text_text_ellisk_2019-01-25T20.19.06/out/stitch/2022-10-04_19-35-57/raw/bench000_it0.json",
  "args": {
    "file": "compression_benchmark/benches/text_text_ellisk_2019-01-25T20.19.06/bench000_it0.json",
    "out": "compression_benchmark/benches/text_text_ellisk_2019-01-25T20.19.06/out/stitch/2022-10-04_19-35-57/raw/bench000_it0.json",
    "iterations": 2,
    "shuffle": false,
    "truncate": null,
    "fmt": "Dreamcoder",
    "no_opt": false,
    "args_from_json": false,
    "save_rewritten": null,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "no_mismatch_check": false,
      "no_top_lambda": false,
      "track": null,
      "follow_track": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "no_opt_free_vars": false,
      "no_opt_single_use": false,
      "no_opt_single_task": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "rewrite_check": false,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": true
    }
  },
  "original_cost": 16289,
  "original": [
    "(lam (map (lam (if (char-eq? $0 ',') '.' $0)) $0))",
    "(lam (map (lam (if (char-eq? ',' $0) '.' $0)) $0))",
    "(lam (fold $0 $0 (lam (lam (if (char-eq? $1 ',') empty (cons $1 $0))))))",
    "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? (car $0) ',') empty $0))))))",
    "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 SPACE) $2 $0))))))",
    "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 SPACE) (if (char-eq? $1 ',') empty $2) $0))))))",
    "(lam (lam (fold $1 (cons LPAREN $0) (lam (lam (cons $1 $0))))))",
    "(lam (lam (fold $1 (cons LPAREN (map (lam (if (char-eq? $0 ',') '.' $0)) $0)) (lam (lam (cons $1 $0))))))",
    "(lam (map (lam (index $0 $1)) (range (length (cdr (cdr $0))))))",
    "(lam (map (lam (index $0 $1)) (range (- (length (cdr $0)) 1))))",
    "(lam (map (lam (index $0 $1)) (range (+ (index 1 (cdr (cdr (range (length $0))))) 1))))",
    "(lam (map (lam (index $0 $1)) (range (+ 1 (index 1 (cdr (cdr (range (length $0)))))))))",
    "(lam (cons (car $0) (cons '-' empty)))",
    "(lam (cons (index 0 $0) (cons '-' empty)))",
    "(lam (lam (fold $1 $0 (lam (lam (cons $1 $0))))))",
    "(lam (lam (fold $1 (map (lam $0) $0) (lam (lam (cons $1 $0))))))"
  ],
  "invs": [
    {
      "body": "(lam (lam (fold $1 (#0 $0) (lam (lam (cons $1 $0))))))",
      "dreamcoder": "#(lambda (lambda (lambda (fold $1 ($2 $0) (lambda (lambda (cons $1 $0)))))))",
      "arity": 1,
      "name": "fn_0",
      "rewritten": [
        "(lam (map (lam (if (char-eq? $0 ',') '.' $0)) $0))",
        "(lam (map (lam (if (char-eq? ',' $0) '.' $0)) $0))",
        "(lam (fold $0 $0 (lam (lam (if (char-eq? $1 ',') empty (cons $1 $0))))))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (if (char-eq? (car $0) ',') empty $0))))))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 SPACE) $2 $0))))))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 SPACE) (if (char-eq? $1 ',') empty $2) $0))))))",
        "(fn_0 (cons LPAREN))",
        "(lam (lam (fold $1 (cons LPAREN (map (lam (if (char-eq? $0 ',') '.' $0)) $0)) (lam (lam (cons $1 $0))))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr (cdr $0))))))",
        "(lam (map (lam (index $0 $1)) (range (- (length (cdr $0)) 1))))",
        "(lam (map (lam (index $0 $1)) (range (+ (index 1 (cdr (cdr (range (length $0))))) 1))))",
        "(lam (map (lam (index $0 $1)) (range (+ 1 (index 1 (cdr (cdr (range (length $0)))))))))",
        "(lam (cons (car $0) (cons '-' empty)))",
        "(lam (cons (index 0 $0) (cons '-' empty)))",
        "(lam (lam (fold $1 $0 (lam (lam (cons $1 $0))))))",
        "(fn_0 (map (lam $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (if (char-eq? $0 ',') '.' $0)) $0))",
        "(lambda (map (lambda (if (char-eq? ',' $0) '.' $0)) $0))",
        "(lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 ',') empty (cons $1 $0))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? (car $0) ',') empty $0))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 SPACE) $2 $0))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 SPACE) (if (char-eq? $1 ',') empty $2) $0))))))",
        "(#(lambda (lambda (lambda (fold $1 ($2 $0) (lambda (lambda (cons $1 $0))))))) (cons LPAREN))",
        "(lambda (lambda (fold $1 (cons LPAREN (map (lambda (if (char-eq? $0 ',') '.' $0)) $0)) (lambda (lambda (cons $1 $0))))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr (cdr $0))))))",
        "(lambda (map (lambda (index $0 $1)) (range (- (length (cdr $0)) 1))))",
        "(lambda (map (lambda (index $0 $1)) (range (+ (index 1 (cdr (cdr (range (length $0))))) 1))))",
        "(lambda (map (lambda (index $0 $1)) (range (+ 1 (index 1 (cdr (cdr (range (length $0)))))))))",
        "(lambda (cons (car $0) (cons '-' empty)))",
        "(lambda (cons (index 0 $0) (cons '-' empty)))",
        "(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0))))))",
        "(#(lambda (lambda (lambda (fold $1 ($2 $0) (lambda (lambda (cons $1 $0))))))) (map (lambda $0)))"
      ],
      "utility": 205,
      "expected_cost": 6470,
      "final_cost": 6470,
      "multiplier": 1.1259659969088098,
      "multiplier_wrt_orig": 1.1259659969088098,
      "num_uses": 2,
      "uses": [
        {
          "fn_0 (cons LPAREN)": "(lam (lam (fold $1 (cons LPAREN $0) (lam (lam (cons $1 $0))))))"
        },
        {
          "fn_0 (map (lam $0))": "(lam (lam (fold $1 (map (lam $0) $0) (lam (lam (cons $1 $0))))))"
        }
      ]
    },
    {
      "body": "(if (char-eq? #0 ','))",
      "dreamcoder": "#(lambda (if (char-eq? $0 ',')))",
      "arity": 1,
      "name": "fn_1",
      "rewritten": [
        "(lam (map (lam (fn_1 $0 '.' $0)) $0))",
        "(lam (map (lam (if (char-eq? ',' $0) '.' $0)) $0))",
        "(lam (fold $0 $0 (lam (lam (fn_1 $1 empty (cons $1 $0))))))",
        "(lam (fold $0 $0 (lam (lam (cons $1 (fn_1 (car $0) empty $0))))))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 SPACE) $2 $0))))))",
        "(lam (fold $0 $0 (lam (lam (cdr (if (char-eq? $1 SPACE) (fn_1 $1 empty $2) $0))))))",
        "(fn_0 (cons LPAREN))",
        "(lam (lam (fold $1 (cons LPAREN (map (lam (fn_1 $0 '.' $0)) $0)) (lam (lam (cons $1 $0))))))",
        "(lam (map (lam (index $0 $1)) (range (length (cdr (cdr $0))))))",
        "(lam (map (lam (index $0 $1)) (range (- (length (cdr $0)) 1))))",
        "(lam (map (lam (index $0 $1)) (range (+ (index 1 (cdr (cdr (range (length $0))))) 1))))",
        "(lam (map (lam (index $0 $1)) (range (+ 1 (index 1 (cdr (cdr (range (length $0)))))))))",
        "(lam (cons (car $0) (cons '-' empty)))",
        "(lam (cons (index 0 $0) (cons '-' empty)))",
        "(lam (lam (fold $1 $0 (lam (lam (cons $1 $0))))))",
        "(fn_0 (map (lam $0)))"
      ],
      "rewritten_dreamcoder": [
        "(lambda (map (lambda (#(lambda (if (char-eq? $0 ','))) $0 '.' $0)) $0))",
        "(lambda (map (lambda (if (char-eq? ',' $0) '.' $0)) $0))",
        "(lambda (fold $0 $0 (lambda (lambda (#(lambda (if (char-eq? $0 ','))) $1 empty (cons $1 $0))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cons $1 (#(lambda (if (char-eq? $0 ','))) (car $0) empty $0))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 SPACE) $2 $0))))))",
        "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 SPACE) (#(lambda (if (char-eq? $0 ','))) $1 empty $2) $0))))))",
        "(fn_0 (cons LPAREN))",
        "(lambda (lambda (fold $1 (cons LPAREN (map (lambda (#(lambda (if (char-eq? $0 ','))) $0 '.' $0)) $0)) (lambda (lambda (cons $1 $0))))))",
        "(lambda (map (lambda (index $0 $1)) (range (length (cdr (cdr $0))))))",
        "(lambda (map (lambda (index $0 $1)) (range (- (length (cdr $0)) 1))))",
        "(lambda (map (lambda (index $0 $1)) (range (+ (index 1 (cdr (cdr (range (length $0))))) 1))))",
        "(lambda (map (lambda (index $0 $1)) (range (+ 1 (index 1 (cdr (cdr (range (length $0)))))))))",
        "(lambda (cons (car $0) (cons '-' empty)))",
        "(lambda (cons (index 0 $0) (cons '-' empty)))",
        "(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0))))))",
        "(fn_0 (map (lambda $0)))"
      ],
      "utility": 101,
      "expected_cost": 6066,
      "final_cost": 6066,
      "multiplier": 1.0666007253544345,
      "multiplier_wrt_orig": 1.2009561490273657,
      "num_uses": 5,
      "uses": [
        {
          "fn_1 $0": "(if (char-eq? $0 ','))"
        },
        {
          "fn_1 $1": "(if (char-eq? $1 ','))"
        },
        {
          "fn_1 (car $0)": "(if (char-eq? (car $0) ','))"
        }
      ]
    }
  ]
}