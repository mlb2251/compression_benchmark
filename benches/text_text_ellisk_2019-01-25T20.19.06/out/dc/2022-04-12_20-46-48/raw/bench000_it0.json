{
  "DSL": {
    "logVariable": -0.3421843446723427,
    "productions": [
      {
        "expression":
          "#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0))))))))",
        "logProbability": -0.7244665245255151
      },
      {
        "expression":
          "#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0))))))",
        "logProbability": -0.7244658031251787
      },
      { "expression": "char-eq?", "logProbability": 0.0 },
      { "expression": "empty?", "logProbability": -0.09531076374526304 },
      { "expression": "1", "logProbability": -0.12132066852681156 },
      { "expression": "length", "logProbability": -0.12132138992662789 },
      { "expression": "+", "logProbability": -0.15307008824120816 },
      { "expression": "0", "logProbability": -0.18161768456228478 },
      { "expression": "-", "logProbability": -0.1858591415710804 },
      { "expression": "range", "logProbability": -0.20379701965273211 },
      { "expression": "','", "logProbability": -0.29564020765542365 },
      { "expression": "'.'", "logProbability": -0.327389503269365 },
      { "expression": "'-'", "logProbability": -0.32738950815909096 },
      { "expression": "SPACE", "logProbability": -0.32738950815909096 },
      { "expression": "LPAREN", "logProbability": -0.32738950815909096 },
      { "expression": "RPAREN", "logProbability": -0.36017933098208177 },
      { "expression": "cons", "logProbability": -0.6638411813087437 },
      { "expression": "empty", "logProbability": -0.724465205673011 },
      { "expression": "map", "logProbability": -0.755970805453726 },
      { "expression": "cdr", "logProbability": -0.7562137567689899 },
      { "expression": "STRING", "logProbability": -0.7737452646248992 },
      { "expression": "unfold", "logProbability": -0.7890043242627498 },
      { "expression": "if", "logProbability": -0.9827737021766709 },
      { "expression": "fold", "logProbability": -1.0135459447843629 },
      { "expression": "index", "logProbability": -1.0411882404623136 },
      { "expression": "car", "logProbability": -1.048493993174854 }
    ]
  },
  "frontiers": [
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (map (lambda (if (char-eq? $0 ',') '.' $0)) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (map (lambda (if (char-eq? ',' $0) '.' $0)) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 ',') empty (cons $1 $0))))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? (car $0) ',') empty $0))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 SPACE) $2 $0))))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 SPACE) (if (char-eq? $1 ',') empty $2) $0))))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN $0) $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (cons LPAREN (map (lambda (if (char-eq? $0 ',') '.' $0)) $0)) $1)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (length $0)) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (map (lambda (index $0 $1)) (range (- (length (cdr $0)) 1))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (+ (index 1 $0) 1)) (range (length $0))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0)))))))) $0 (lambda (+ 1 (index 1 $0))) (range (length $0))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          }
        ]
      },
      "programs": [
        {
          "program": "(lambda (cons (car $0) (cons '-' empty)))",
          "logLikelihood": 0.0
        },
        {
          "program": "(lambda (cons (index 0 $0) (cons '-' empty)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          {
            "constructor": "list",
            "arguments": [ { "constructor": "char", "arguments": [] } ]
          },
          {
            "constructor": "->",
            "arguments": [
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              },
              {
                "constructor": "list",
                "arguments": [ { "constructor": "char", "arguments": [] } ]
              }
            ]
          }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) $0 $1)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (lambda (#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0)))))) (map (lambda $0) $0) $1)))",
          "logLikelihood": 0.0
        }
      ]
    }
  ]
}