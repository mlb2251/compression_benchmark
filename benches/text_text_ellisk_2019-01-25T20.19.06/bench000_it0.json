{
    "verbose": false,
    "arity": 3,
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "bs": 1000000,
    "topI": 300,
    "structurePenalty": 1.5,
    "CPUs": 8,
    "lc_score": 0.0,
    "DSL": {
        "logVariable": 0.0,
        "productions": [
            {
                "expression": "char-eq?",
                "logProbability": 0.0
            },
            {
                "expression": "empty?",
                "logProbability": 0.0
            },
            {
                "expression": "1",
                "logProbability": 0.0
            },
            {
                "expression": "length",
                "logProbability": 0.0
            },
            {
                "expression": "+",
                "logProbability": 0.0
            },
            {
                "expression": "0",
                "logProbability": 0.0
            },
            {
                "expression": "-",
                "logProbability": 0.0
            },
            {
                "expression": "range",
                "logProbability": 0.0
            },
            {
                "expression": "','",
                "logProbability": 0.0
            },
            {
                "expression": "'.'",
                "logProbability": 0.0
            },
            {
                "expression": "'-'",
                "logProbability": 0.0
            },
            {
                "expression": "SPACE",
                "logProbability": 0.0
            },
            {
                "expression": "LPAREN",
                "logProbability": 0.0
            },
            {
                "expression": "RPAREN",
                "logProbability": 0.0
            },
            {
                "expression": "cons",
                "logProbability": 0.0
            },
            {
                "expression": "empty",
                "logProbability": 0.0
            },
            {
                "expression": "map",
                "logProbability": 0.0
            },
            {
                "expression": "cdr",
                "logProbability": 0.0
            },
            {
                "expression": "STRING",
                "logProbability": 0.0
            },
            {
                "expression": "unfold",
                "logProbability": 0.0
            },
            {
                "expression": "if",
                "logProbability": 0.0
            },
            {
                "expression": "fold",
                "logProbability": 0.0
            },
            {
                "expression": "index",
                "logProbability": 0.0
            },
            {
                "expression": "car",
                "logProbability": 0.0
            }
        ]
    },
    "iterations": 20,
    "frontiers": [
        {
            "name": "Replace ',' w/ '.'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (if (char-eq? $0 ',') '.' $0)) $0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (if (char-eq? ',' $0) '.' $0)) $0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "nth (n=0) word delimited by ','",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (if (char-eq? $1 ',') empty (cons $1 $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cons $1 (if (char-eq? (car $0) ',') empty $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "drop first word delimited by ' '",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 SPACE) $2 $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (fold $0 $0 (lambda (lambda (cdr (if (char-eq? $1 SPACE) (if (char-eq? $1 ',') empty $2) $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append two words delimited by '('",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (fold $1 (cons LPAREN $0) (lambda (lambda (cons $1 $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (fold $1 (cons LPAREN (map (lambda (if (char-eq? $0 ',') '.' $0)) $0)) (lambda (lambda (cons $1 $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Drop last 2 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (index $0 $1)) (range (length (cdr (cdr $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index $0 $1)) (range (- (length (cdr $0)) 1))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first 4 characters",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (map (lambda (index $0 $1)) (range (+ (index 1 (cdr (cdr (range (length $0))))) 1))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (map (lambda (index $0 $1)) (range (+ 1 (index 1 (cdr (cdr (range (length $0)))))))))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Take first character and append '-'",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (cons (car $0) (cons '-' empty)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (cons (index 0 $0) (cons '-' empty)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "name": "Append 2 strings (I)",
            "request": {
                "constructor": "->",
                "arguments": [
                    {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "char",
                                "arguments": []
                            }
                        ]
                    },
                    {
                        "constructor": "->",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            },
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "char",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "programs": [
                {
                    "program": "(lambda (lambda (fold $1 $0 (lambda (lambda (cons $1 $0))))))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(lambda (lambda (fold $1 (map (lambda $0) $0) (lambda (lambda (cons $1 $0))))))",
                    "logLikelihood": 0.0
                }
            ]
        }
    ],
    "info": {
        "iteration": 0,
        "num_learned": 2,
        "new_grammar": {
            "logVariable": -0.344645,
            "productions": [
                {
                    "expression": "char-eq?",
                    "logProbability": -0.000104
                },
                {
                    "expression": "empty?",
                    "logProbability": -0.095415
                },
                {
                    "expression": "1",
                    "logProbability": -0.121528
                },
                {
                    "expression": "length",
                    "logProbability": -0.12558
                },
                {
                    "expression": "+",
                    "logProbability": -0.158149
                },
                {
                    "expression": "0",
                    "logProbability": -0.186765
                },
                {
                    "expression": "-",
                    "logProbability": -0.190939
                },
                {
                    "expression": "range",
                    "logProbability": -0.20365
                },
                {
                    "expression": "','",
                    "logProbability": -0.295845
                },
                {
                    "expression": "'.'",
                    "logProbability": -0.327594
                },
                {
                    "expression": "'-'",
                    "logProbability": -0.327594
                },
                {
                    "expression": "SPACE",
                    "logProbability": -0.327594
                },
                {
                    "expression": "LPAREN",
                    "logProbability": -0.327594
                },
                {
                    "expression": "RPAREN",
                    "logProbability": -0.360384
                },
                {
                    "expression": "cons",
                    "logProbability": -0.669062
                },
                {
                    "expression": "empty",
                    "logProbability": -0.729722
                },
                {
                    "expression": "map",
                    "logProbability": -0.751275
                },
                {
                    "expression": "cdr",
                    "logProbability": -0.756827
                },
                {
                    "expression": "STRING",
                    "logProbability": -0.774368
                },
                {
                    "expression": "unfold",
                    "logProbability": -0.789618
                },
                {
                    "expression": "if",
                    "logProbability": -0.985339
                },
                {
                    "expression": "fold",
                    "logProbability": -1.016091
                },
                {
                    "expression": "index",
                    "logProbability": -1.043561
                },
                {
                    "expression": "car",
                    "logProbability": -1.05125
                },
                {
                    "expression": "#(lambda (lambda (fold $0 $1 (lambda (lambda (cons $1 $0))))))",
                    "logProbability": -0.72508
                },
                {
                    "expression": "#(lambda (lambda (lambda (map (lambda (index $0 $3)) (range ($1 (cdr (cdr $0))))))))",
                    "logProbability": -0.72508
                }
            ]
        }
    }
}