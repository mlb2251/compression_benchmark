{
  "DSL": {
    "logVariable": -0.6632327147144084,
    "productions": [
      {
        "expression": "#(logo_FWRT logo_UL logo_UA)",
        "logProbability": -1.4979905110226004
      },
      {
        "expression":
          "#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0)))))))",
        "logProbability": -1.6041349177864426
      },
      {
        "expression": "#(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0)))",
        "logProbability": -1.547090275392577
      },
      {
        "expression":
          "#(lambda (lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $2 logo_epsA (logo_MULL logo_epsL $3) $0))))))",
        "logProbability": -1.6042112946847378
      },
      {
        "expression":
          "#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY $1 (logo_MULL logo_epsL $0))))",
        "logProbability": -1.5196331051478245
      },
      {
        "expression": "#(logo_DIVA logo_UA 4)",
        "logProbability": -0.7229703147031392
      },
      {
        "expression":
          "#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0)))))))",
        "logProbability": -1.25982606966028
      },
      { "expression": "logo_UA", "logProbability": -0.8540608474474056 },
      { "expression": "logo_UL", "logProbability": -0.36707671643195505 },
      { "expression": "logo_ZA", "logProbability": -1.0960755853452637 },
      { "expression": "logo_ZL", "logProbability": -0.8938681052081252 },
      { "expression": "logo_DIVA", "logProbability": -0.9651541902365053 },
      { "expression": "logo_MULA", "logProbability": -1.0319660619663975 },
      { "expression": "logo_DIVL", "logProbability": -0.8630834354738561 },
      { "expression": "logo_MULL", "logProbability": -0.6708865434548361 },
      { "expression": "logo_ADDA", "logProbability": -1.1073725274505506 },
      { "expression": "logo_SUBA", "logProbability": -1.0290173112577823 },
      { "expression": "logo_PT", "logProbability": -1.633987880936124 },
      { "expression": "logo_FWRT", "logProbability": -1.363304411729168 },
      { "expression": "logo_GETSET", "logProbability": -1.6637575675593164 },
      { "expression": "logo_IFTY", "logProbability": -1.039756305736549 },
      { "expression": "logo_epsA", "logProbability": -0.6967077121627088 },
      { "expression": "logo_epsL", "logProbability": -0.6953971819030604 },
      { "expression": "logo_forLoop", "logProbability": -1.3692349398026873 },
      { "expression": "0", "logProbability": -1.3026070635891993 },
      { "expression": "1", "logProbability": -1.3026070635891993 },
      { "expression": "2", "logProbability": -1.0661824845070758 },
      { "expression": "3", "logProbability": -0.9927153866367271 },
      { "expression": "4", "logProbability": -1.0980451453324753 },
      { "expression": "5", "logProbability": -0.8889205704461682 },
      { "expression": "6", "logProbability": -1.0938883620760542 },
      { "expression": "7", "logProbability": -1.0027895699387823 },
      { "expression": "8", "logProbability": -1.0978577554226958 },
      { "expression": "9", "logProbability": -1.2380685424516282 }
    ]
  },
  "frontiers": [
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 5 logo_epsA logo_ZL (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 5 (logo_DIVA logo_UA 3) logo_UL $0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 5 logo_epsA logo_ZL (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 7 (logo_DIVA logo_UA 3) logo_UL $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL 3) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 5 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL 3) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 5 (logo_DIVA logo_UA 5) logo_UL $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 5 (logo_MULA logo_epsA 8) logo_UL $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 7 (logo_DIVA logo_UA 7) logo_UL $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 8 (logo_DIVA logo_UA 7) logo_UL $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 8 (logo_DIVA logo_UA 8) (logo_DIVL logo_UL 2) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 8 (logo_MULA logo_epsA 5) (logo_DIVL logo_UL 2) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (#(logo_FWRT logo_UL logo_UA) $0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_FWRT logo_ZL #(logo_DIVA logo_UA 4) (logo_FWRT logo_UL logo_ZA $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_FWRT (logo_MULL logo_UL 2) #(logo_DIVA logo_UA 4) (#(logo_FWRT logo_UL logo_UA) $0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_FWRT (logo_MULL logo_UL 2) #(logo_DIVA logo_UA 4) (logo_FWRT logo_UL logo_ZA $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_FWRT logo_epsL #(logo_DIVA logo_UA 4) (logo_FWRT logo_epsL logo_UA $0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_FWRT logo_epsL #(logo_DIVA logo_UA 4) (logo_FWRT logo_epsL logo_ZA $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program": "(lambda (#(logo_FWRT logo_UL logo_UA) $0))",
          "logLikelihood": 0.0
        },
        {
          "program": "(lambda (logo_FWRT logo_UL logo_ZA $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0))) 6 $0))) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY #(logo_DIVA logo_UA 4) logo_UL $0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0))) 3 $0))) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 7 #(logo_DIVA logo_UA 4) logo_UL $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0))) 8 (logo_FWRT (logo_MULL logo_UL 3) logo_ZA $0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0))) 8 (logo_FWRT (logo_MULL logo_UL 3) logo_epsA $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(logo_DIVA logo_UA 4) 7 logo_UL $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(logo_DIVA logo_UA 4) 7 logo_UL (logo_GETSET (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(logo_DIVA logo_UA 4) 8 logo_UL $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) #(logo_DIVA logo_UA 4) 8 logo_UL (logo_GETSET (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA 3) logo_IFTY logo_epsL $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA 3) logo_IFTY logo_epsL (logo_GETSET (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_DIVA logo_UA 8) logo_IFTY logo_epsL $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $1 (lambda (lambda (logo_FWRT (logo_MULL $2 $1) $4 $0))))))) (logo_MULA logo_epsA 5) logo_IFTY logo_epsL $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 5 (logo_DIVA (logo_ADDA logo_UA logo_UA) 5) (logo_MULL logo_UL 4) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 5 (logo_MULA (logo_ADDA logo_epsA logo_epsA) 8) (logo_MULL logo_UL 4) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 9 (logo_DIVA (logo_MULA logo_UA 4) 9) (logo_MULL logo_UL 4) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 9 (logo_MULA (logo_DIVA logo_UA 9) 4) (logo_MULL logo_UL 4) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_DIVA logo_epsA 2) logo_epsL (logo_GETSET (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_forLoop logo_IFTY (lambda (lambda (#(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0))) 2 (logo_FWRT logo_epsL (logo_DIVA (logo_ADDA logo_UA logo_epsA) 2) $0)))) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT logo_UL #(logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_SUBA logo_UA #(logo_DIVA logo_UA 4)) $0)))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_forLoop 5 (lambda (lambda (logo_FWRT logo_UL #(logo_DIVA logo_UA 4) (logo_FWRT logo_UL (logo_MULA #(logo_DIVA logo_UA 4) 3) $0)))) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0))) 8 (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA logo_epsL $0)))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_FWRT logo_ZL (logo_MULA logo_epsA 5) (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA logo_epsL $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_FWRT logo_epsL logo_epsA (logo_FWRT logo_epsL logo_epsA $0)))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 6 logo_epsA logo_epsL $0))) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY $1 (logo_MULL logo_epsL $0)))) (logo_SUBA logo_UA logo_epsA) 2 $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY $1 (logo_MULL logo_epsL $0)))) (logo_SUBA logo_ZA logo_epsA) 2 $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY $1 (logo_MULL logo_epsL $0)))) logo_epsA 3 $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY $1 (logo_MULL logo_epsL $0)))) logo_epsA 3 (logo_GETSET (lambda $0) $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY $1 (logo_MULL logo_epsL $0)))) logo_epsA 3 $0))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $2 logo_epsA (logo_MULL logo_epsL $3) $0)))))) 3 6 $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_UA logo_epsA) (logo_DIVL logo_UL 5) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_SUBA logo_ZA logo_epsA) (logo_DIVL logo_UL 5) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $2 logo_epsA (logo_MULL logo_epsL $3) $0)))))) 4 7 $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 8 logo_epsA (logo_DIVL logo_UL 5) $0))) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA (logo_DIVL logo_UL 4) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY $1 (logo_MULL logo_epsL $0)))) logo_epsA 5 $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $2 logo_epsA (logo_MULL logo_epsL $3) $0)))))) 5 7 $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 8 logo_epsA (logo_DIVL logo_UL 4) $0))) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY $1 (logo_MULL logo_epsL $0)))) (logo_SUBA logo_UA logo_epsA) 6 $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY $1 (logo_MULL logo_epsL $0)))) (logo_SUBA logo_ZA logo_epsA) 6 $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY $1 (logo_MULL logo_epsL $0)))) logo_epsA 6 $0))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (logo_forLoop 7 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) $2 logo_epsA (logo_MULL logo_epsL $3) $0)))))) 6 6 $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 6 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY $1 (logo_MULL logo_epsL $0)))) logo_epsA $3 $0))) $0))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 8 (lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY $1 (logo_MULL logo_epsL $0)))) logo_epsA $3 $0))) $0))) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY $1 (logo_MULL logo_epsL $0)))) logo_epsA 3 (#(lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY $1 (logo_MULL logo_epsL $0)))) (logo_SUBA logo_UA logo_epsA) 3 $0)))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(logo_FWRT logo_UL logo_UA) (logo_PT (lambda (#(logo_FWRT logo_UL logo_UA) $0)) (#(logo_FWRT logo_UL logo_UA) $0))))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(logo_FWRT logo_UL logo_UA) (logo_PT (lambda (#(logo_FWRT logo_UL logo_UA) $0)) (logo_FWRT logo_UL logo_ZA $0))))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 2) logo_UA (logo_PT (lambda (#(logo_FWRT logo_UL logo_UA) $0)) $0)))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_forLoop 3 (lambda (lambda (logo_FWRT (logo_DIVL logo_UL 2) logo_UA (logo_PT (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT (logo_MULL logo_UL $2) #(logo_DIVA logo_UA 4) $0)) (logo_FWRT logo_UL #(logo_DIVA logo_UA 4) $0)))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_forLoop 4 (lambda (lambda (logo_PT (lambda (logo_FWRT logo_UL #(logo_DIVA logo_UA 4) $0)) (logo_FWRT logo_UL (logo_DIVA logo_UA 2) (logo_FWRT logo_UL #(logo_DIVA logo_UA 4) $0))))) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_forLoop 7 (lambda (lambda (logo_GETSET (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA logo_epsL $0)) (#(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0))) 6 $0)))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_forLoop logo_IFTY (lambda (lambda (logo_GETSET (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY logo_epsA logo_epsL $0)) (#(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0))) 6 $0)))) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0))) 7 (logo_GETSET (lambda (#(logo_FWRT logo_UL logo_UA) $0)) $0)))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_forLoop 7 (lambda (lambda (#(lambda (logo_FWRT logo_ZL (logo_DIVA logo_UA $0))) 7 (logo_GETSET (lambda (logo_FWRT logo_UL logo_ZA $0)) $0)))) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_forLoop 5 (lambda (lambda (logo_forLoop 7 (lambda (lambda (logo_FWRT (logo_MULL logo_UL $3) #(logo_DIVA logo_UA 4) (logo_FWRT logo_UL #(logo_DIVA logo_UA 4) $0)))) $0))) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) logo_UL $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 5 #(logo_DIVA logo_UA 4) logo_UL $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL 2) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 5 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL 2) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 4 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL 3) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) 5 #(logo_DIVA logo_UA 4) (logo_MULL logo_UL 3) $0))",
          "logLikelihood": 0.0
        }
      ]
    },
    {
      "request": {
        "constructor": "->",
        "arguments": [
          { "constructor": "turtle", "arguments": [] },
          { "constructor": "turtle", "arguments": [] }
        ]
      },
      "programs": [
        {
          "program":
            "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY #(logo_DIVA logo_UA 4) (logo_MULL logo_UL $1) $0))) $0))",
          "logLikelihood": 0.0
        },
        {
          "program":
            "(lambda (logo_forLoop 5 (lambda (lambda (#(lambda (lambda (lambda (logo_forLoop $2 (lambda (lambda (logo_FWRT $2 $3 $0))))))) logo_IFTY (logo_MULA (logo_ADDA logo_epsA logo_epsA) 5) (logo_MULL logo_UL $1) $0))) $0))",
          "logLikelihood": 0.0
        }
      ]
    }
  ]
}