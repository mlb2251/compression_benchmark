{
    "bench_group": "towers_tower_batch_50_3600_ellisk_2019-03-26T11.01.50",
    "bench": "bench002_it3",
    "mode": "stitch",
    "run": "compression_benchmark/benches/towers_tower_batch_50_3600_ellisk_2019-03-26T11.01.50/out/stitch/2022-10-04_19-35-54",
    "metrics": {
        "time_binary_seconds": 0.09,
        "time_per_inv_with_rewrite": 9.4,
        "time_per_inv_no_rewrite": 9.4,
        "mem_peak_kb": 5096,
        "compression_ratio": 1.1031646451972674,
        "absolute_compression": 5920,
        "compression_ratio_min": 1.2073908629441625
    },
    "num_inventions": 5,
    "inventions": [
        {
            "name": "fn_6",
            "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (1x3 (moveHand 4 ($2 $0))))) (moveHand 2 (3x1 $2)))))) (moveHand $2 $0) $4 (lambda (reverseHand $0))))))))) $0 $1 4))) $1 $2 $0))))",
            "stitch_uncanonical": "(lam (prev_dc_inv_5 #1 #0 $0))",
            "stitch_canonical": "(lam (prev_dc_inv_5 #0 #1 $0))",
            "arity": 2
        },
        {
            "name": "fn_7",
            "dreamcoder": "#(lambda (tower_loopM $0 (lambda (lambda (tower_embed (#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (1x3 (moveHand 4 ($2 $0))))) (moveHand 2 (3x1 $2)))))) (moveHand $2 $0) $4 (lambda (reverseHand $0))))))))) $0 $1 4))) $1 $2 $0)))) 2 $1) $0)))))",
            "stitch_uncanonical": "(tower_loopM #0 (lam (lam (tower_embed (fn_6 2 $1) $0))))",
            "stitch_canonical": "(tower_loopM #0 (lam (lam (tower_embed (fn_6 2 $1) $0))))",
            "arity": 1
        },
        {
            "name": "fn_8",
            "dreamcoder": "#(lambda (lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (moveHand $4 ($5 $0)))) $0)))))",
            "stitch_uncanonical": "(lam (tower_loopM #2 (lam (lam (moveHand #1 (#0 $0)))) $0))",
            "stitch_canonical": "(lam (tower_loopM #0 (lam (lam (moveHand #1 (#2 $0)))) $0))",
            "arity": 3
        },
        {
            "name": "fn_9",
            "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (tower_loopM $0 (lambda (lambda (moveHand 3 (reverseHand (tower_loopM $3 (lambda (lambda (moveHand 6 (3x1 $0)))) $0)))))))) $1 $2 $0))))",
            "stitch_uncanonical": "(lam (prev_dc_inv_1 #1 #0 $0))",
            "stitch_canonical": "(lam (prev_dc_inv_1 #0 #1 $0))",
            "arity": 2
        },
        {
            "name": "fn_10",
            "dreamcoder": "#(lambda (lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 4 (#(lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (1x3 (moveHand 4 ($2 $0))))) (moveHand 2 (3x1 $2)))))) $1 $0 (lambda (1x3 (reverseHand $0)))))) (reverseHand $0) 5)))))) $1 (moveHand 2 (reverseHand (#(lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (1x3 (moveHand 4 ($2 $0))))) (moveHand 2 (3x1 $2)))))) (moveHand $2 $0) $4 (lambda (reverseHand $0))))))))) $0 $1 4))) $1 2 $0))))))",
            "stitch_uncanonical": "(lam (prev_dc_inv_4 #0 (moveHand 2 (reverseHand (prev_dc_inv_5 #0 2 $0)))))",
            "stitch_canonical": "(lam (prev_dc_inv_4 #0 (moveHand 2 (reverseHand (prev_dc_inv_5 #0 2 $0)))))",
            "arity": 1
        }
    ]
}