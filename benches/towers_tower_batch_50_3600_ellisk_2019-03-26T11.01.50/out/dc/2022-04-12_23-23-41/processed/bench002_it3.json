{
    "bench_group": "towers_tower_batch_50_3600_ellisk_2019-03-26T11.01.50",
    "bench": "bench002_it3",
    "mode": "dreamcoder",
    "run": "benches/towers_tower_batch_50_3600_ellisk_2019-03-26T11.01.50/out/dc/2022-04-12_23-23-41",
    "metrics": {
        "time_binary_seconds": 1457.97,
        "time_per_inv_with_rewrite": 188508.8,
        "time_per_inv_no_rewrite": 105709.2,
        "mem_peak_kb": 785136,
        "compression_ratio": 1.1343583127262302,
        "absolute_compression": 7498
    },
    "num_inventions": 5,
    "inventions": [
        {
            "name": "fn_0",
            "stitch_uncanonical": "(tower_embed (lam (fn_5 #0 2 $0)))",
            "stitch_canonical": "(tower_embed (lam (fn_5 #0 2 $0)))",
            "dreamcoder": "#(lambda (tower_embed (lambda (#(lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (1x3 (moveHand 4 ($2 $0))))) (moveHand 2 (3x1 $2)))))) (moveHand $2 $0) $4 (lambda (reverseHand $0))))))))) $0 $1 4))) $1 2 $0))))"
        },
        {
            "name": "fn_1",
            "stitch_uncanonical": "(tower_loopM #0 (lam (lam (fn_0 $1 $0))))",
            "stitch_canonical": "(tower_loopM #0 (lam (lam (fn_0 $1 $0))))",
            "dreamcoder": "#(lambda (tower_loopM $0 (lambda (lambda (#(lambda (tower_embed (lambda (#(lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (1x3 (moveHand 4 ($2 $0))))) (moveHand 2 (3x1 $2)))))) (moveHand $2 $0) $4 (lambda (reverseHand $0))))))))) $0 $1 4))) $1 2 $0)))) $1 $0)))))"
        },
        {
            "name": "fn_2",
            "stitch_uncanonical": "(tower_loopM #0 (lam (lam (fn_0 #0 (moveHand 6 $0)))))",
            "stitch_canonical": "(tower_loopM #0 (lam (lam (fn_0 #0 (moveHand 6 $0)))))",
            "dreamcoder": "#(lambda (tower_loopM $0 (lambda (lambda (#(lambda (tower_embed (lambda (#(lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (1x3 (moveHand 4 ($2 $0))))) (moveHand 2 (3x1 $2)))))) (moveHand $2 $0) $4 (lambda (reverseHand $0))))))))) $0 $1 4))) $1 2 $0)))) $2 (moveHand 6 $0))))))"
        },
        {
            "name": "fn_3",
            "stitch_uncanonical": "(fn_4 #1 (moveHand 2 (reverseHand (fn_5 #1 2 #0))))",
            "stitch_canonical": "(fn_4 #0 (moveHand 2 (reverseHand (fn_5 #0 2 #2))))",
            "dreamcoder": "#(lambda (lambda (#(lambda (tower_loopM $0 (lambda (lambda (moveHand 4 (#(lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (1x3 (moveHand 4 ($2 $0))))) (moveHand 2 (3x1 $2)))))) $1 $0 (lambda (1x3 (reverseHand $0)))))) (reverseHand $0) 5)))))) $0 (moveHand 2 (reverseHand (#(lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (1x3 (moveHand 4 ($2 $0))))) (moveHand 2 (3x1 $2)))))) (moveHand $2 $0) $4 (lambda (reverseHand $0))))))))) $0 $1 4))) $0 2 $1))))))"
        },
        {
            "name": "fn_4",
            "stitch_uncanonical": "(tower_embed (lam (fn_5 #0 #2 $0)) (fn_5 #0 2 #1))",
            "stitch_canonical": "(tower_embed (lam (fn_5 #0 #1 $0)) (fn_5 #0 2 #3))",
            "dreamcoder": "#(lambda (lambda (lambda (tower_embed (lambda (#(lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (1x3 (moveHand 4 ($2 $0))))) (moveHand 2 (3x1 $2)))))) (moveHand $2 $0) $4 (lambda (reverseHand $0))))))))) $0 $1 4))) $3 $1 $0)) (#(lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (#(lambda (lambda (lambda (tower_loopM $1 (lambda (lambda (1x3 (moveHand 4 ($2 $0))))) (moveHand 2 (3x1 $2)))))) (moveHand $2 $0) $4 (lambda (reverseHand $0))))))))) $0 $1 4))) $2 2 $1)))))"
        }
    ]
}